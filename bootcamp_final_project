{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.074261,
     "end_time": "2021-03-11T23:17:22.096429",
     "exception": false,
     "start_time": "2021-03-11T23:17:22.022168",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This notebook was based on the Kaggle competition below, and executed as a final project for a Data Science Bootcamp, ministered by [Alura](https://www.alura.com.br/).\n",
    "\n",
    "It was written by Brian Lear.\n",
    "\n",
    "* LinkedIn: https://www.linkedin.com/in/brian-lear-155bb745/\n",
    "* GitHub: https://github.com/brian-lear"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071081,
     "end_time": "2021-03-11T23:17:22.239006",
     "exception": false,
     "start_time": "2021-03-11T23:17:22.167925",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **COVID-19 - Clinical Data to assess diagnosis** -> [Kaggle submission](https://www.kaggle.com/S%C3%ADrio-Libanes/covid19)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071533,
     "end_time": "2021-03-11T23:17:22.382217",
     "exception": false,
     "start_time": "2021-03-11T23:17:22.310684",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Context\n",
    "\n",
    "COVID-19 pandemic impacted the whole world, overwhelming healthcare systems - unprepared for such intense and lengthy request for ICU beds, professionals, personal protection equipment and healthcare resources.\n",
    "Brazil recorded first COVID-19 case on February 26 and reached community transmission on March 20.\n",
    "\n",
    "Call to action\n",
    "\n",
    "There is urgency in obtaining accurate that to better predict and prepare healthcare systems and avoid collapse, defined by above capacity need of ICU beds (assuming human resources, PPE and professionals are available), using individual clinical data - in lieu of epidemiological and populational data.**"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.073571,
     "end_time": "2021-03-11T23:17:22.527866",
     "exception": false,
     "start_time": "2021-03-11T23:17:22.454295",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Window Concept**\n",
    "\n",
    "The original data contains information about specific Patients and their stay at the hospital, comprised of 5 rows per patient,being each row referent to a time window, as per below.\n",
    "\n",
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071332,
     "end_time": "2021-03-11T23:17:22.670952",
     "exception": false,
     "start_time": "2021-03-11T23:17:22.599620",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Another relevant instruction is that we should not use patient information related to the row when it is already in the ICU, as we do not know whether the information was measured prior or after the patient being sent to the ICU.\n",
    "\n",
    "![image.png](attachment:image.png)\n",
    "\n",
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071776,
     "end_time": "2021-03-11T23:17:22.814212",
     "exception": false,
     "start_time": "2021-03-11T23:17:22.742436",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Chosen approach"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.072431,
     "end_time": "2021-03-11T23:17:22.959068",
     "exception": false,
     "start_time": "2021-03-11T23:17:22.886637",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The primary goal is to have a good model predicting whether a pacient that was not sent to the ICU on the first window (0-2 hours) will be sent on the following window (2-4 hours). After pondering about the task at hand, I decided to tackle the other windows as well. Hence, there are 4 models, each for a w0 (window0) and a prediction for the w1, focused on predicting who will be sent to the ICU.\n",
    "\n",
    "In order to determine which model to choose, I created 4 dataframes, for each combination of w0 and w1, while including new features, which were the lagging memory of how the other features changed (non categorical ones). For instance, how much did the blood tests improved or worsened between windows, and that information was carried to following dataframes, leaving the dataframde for the last window (6-12 hours predicting ICU in Above 12h), with lagged difference features between windows [0-2 and 4-6], [4-6 and 6-12], etc. \n",
    "\n",
    "I then ran those 4 dataframes throught a Logistic Regression, a Extra Trees and a LGBM, all with hyperopt. After analysing the final results using cross validation, with F1 score, Recall, Average Precision and AUC, I chose the best model for each window.\n",
    "\n",
    "After creating those 4 final models, I decided to analyse the combined probability of a patient ever going to the ICU. In order to do so, I created 4 new dataframes, but this time all had the same features, since using features dereived from past data would not make sense in this case. With those 4 dataframes in hand, I ran them through the same models, and underwent the same model selection. \n",
    "\n",
    "The idea was to use the predict_proba for each model, but for Tree models, the predict proba is not calibrated, which means it can't be used as we would use predict proba from a Logistic Regression. Therefore, before I could use the predict probas, I needed to calibrate the ones that were generated using a tree model. That was achieved by fitting the leaves of the Tree Models with a Logistic Regression, and using the predict proba from the Logistic Regression. With the calibrated probas in hand, I then sumed all probas, which gave me the combined probability that a pacient would be sent to the ICU at any given time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.072145,
     "end_time": "2021-03-11T23:17:23.102613",
     "exception": false,
     "start_time": "2021-03-11T23:17:23.030468",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Examples of created features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071353,
     "end_time": "2021-03-11T23:17:23.245894",
     "exception": false,
     "start_time": "2021-03-11T23:17:23.174541",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The feature creating technique below was used with all non categorical information, in order to try to capture if results changing overtime had a positive or negative impact on the prediction.\n",
    "\n",
    "* RESPIRATORY_RATE_DIFF: original variable, related to the original dataset\n",
    "* RESPIRATORY_RATE_DIFF_windif_2: feature created by checking if there was a difference between RESPIRATORY_RATE_DIFF(window 2-4) to RESPIRATORY_RATE_DIFF(window 0-2)\n",
    "* RESPIRATORY_RATE_DIFF_windif_3: feature created by checking if there was a difference between RESPIRATORY_RATE_DIFF(window 4-6) to RESPIRATORY_RATE_DIFF(window 2-4)\n",
    "* RESPIRATORY_RATE_DIFF_windif_4: feature created by checking if there was a difference between RESPIRATORY_RATE_DIFF(window 6-12) to RESPIRATORY_RATE_DIFF(window 4-6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071647,
     "end_time": "2021-03-11T23:17:23.389650",
     "exception": false,
     "start_time": "2021-03-11T23:17:23.318003",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Target variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.072234,
     "end_time": "2021-03-11T23:17:23.533903",
     "exception": false,
     "start_time": "2021-03-11T23:17:23.461669",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The target 'next_period_ICU' was created in order to capture the information if, for each patient, they were sent to the ICU on the next window. In that way, with initial data from a window, it could be predicted whether the patient would need an ICU spot on the following window, which would greatly improve the hospital's logistics and efficiency."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071164,
     "end_time": "2021-03-11T23:17:23.676868",
     "exception": false,
     "start_time": "2021-03-11T23:17:23.605704",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Libs and defs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:23.823219Z",
     "iopub.status.busy": "2021-03-11T23:17:23.822505Z",
     "iopub.status.idle": "2021-03-11T23:17:35.069067Z",
     "shell.execute_reply": "2021-03-11T23:17:35.068252Z"
    },
    "papermill": {
     "duration": 11.320905,
     "end_time": "2021-03-11T23:17:35.069294",
     "exception": false,
     "start_time": "2021-03-11T23:17:23.748389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting openpyxl\r\n",
      "  Downloading openpyxl-3.0.7-py2.py3-none-any.whl (243 kB)\r\n",
      "\u001b[K     |████████████████████████████████| 243 kB 870 kB/s \r\n",
      "\u001b[?25hCollecting et-xmlfile\r\n",
      "  Downloading et_xmlfile-1.0.1.tar.gz (8.4 kB)\r\n",
      "Building wheels for collected packages: et-xmlfile\r\n",
      "  Building wheel for et-xmlfile (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n",
      "\u001b[?25h  Created wheel for et-xmlfile: filename=et_xmlfile-1.0.1-py3-none-any.whl size=8913 sha256=111d3bf37831aec6ea5845472f65b475a14a0d62c13f7206d4d0f3510a3e9897\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/e2/bd/55/048b4fd505716c4c298f42ee02dffd9496bb6d212b266c7f31\r\n",
      "Successfully built et-xmlfile\r\n",
      "Installing collected packages: et-xmlfile, openpyxl\r\n",
      "Successfully installed et-xmlfile-1.0.1 openpyxl-3.0.7\r\n"
     ]
    }
   ],
   "source": [
    "!pip install 'openpyxl'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:35.233892Z",
     "iopub.status.busy": "2021-03-11T23:17:35.232897Z",
     "iopub.status.idle": "2021-03-11T23:17:37.010519Z",
     "shell.execute_reply": "2021-03-11T23:17:37.009914Z"
    },
    "papermill": {
     "duration": 1.863383,
     "end_time": "2021-03-11T23:17:37.010690",
     "exception": false,
     "start_time": "2021-03-11T23:17:35.147307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/covid19/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style type='text/css'>\n",
       ".datatable table.frame { margin-bottom: 0; }\n",
       ".datatable table.frame thead { border-bottom: none; }\n",
       ".datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}\n",
       ".datatable .bool    { background: #DDDD99; }\n",
       ".datatable .object  { background: #565656; }\n",
       ".datatable .int     { background: #5D9E5D; }\n",
       ".datatable .float   { background: #4040CC; }\n",
       ".datatable .str     { background: #CC4040; }\n",
       ".datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}\n",
       ".datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}\n",
       ".datatable th:nth-child(2) { padding-left: 12px; }\n",
       ".datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}\n",
       ".datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}\n",
       ".datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}\n",
       ".datatable .footer { font-size: 9px; }\n",
       ".datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import missingno\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from tabulate import tabulate\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split, RandomizedSearchCV, cross_validate\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import average_precision_score, classification_report, roc_auc_score, roc_curve, auc, plot_confusion_matrix, precision_recall_fscore_support\n",
    "from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "        \n",
    "\n",
    "from xgboost  import XGBClassifier\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "import time\n",
    "\n",
    "notebook_start = time.time()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:37.175254Z",
     "iopub.status.busy": "2021-03-11T23:17:37.174516Z",
     "iopub.status.idle": "2021-03-11T23:17:37.181681Z",
     "shell.execute_reply": "2021-03-11T23:17:37.182189Z"
    },
    "papermill": {
     "duration": 0.090908,
     "end_time": "2021-03-11T23:17:37.182406",
     "exception": false,
     "start_time": "2021-03-11T23:17:37.091498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# features used by Sirio Libanes' Hospital\n",
    "\n",
    "def makebio_df(df:pd.DataFrame):\n",
    "\n",
    "    df[\"BLOODPRESSURE_ARTERIAL_MEAN\"] = (df['BLOODPRESSURE_SISTOLIC_MEAN'] + 2*df['BLOODPRESSURE_DIASTOLIC_MEAN'])/3\n",
    " \n",
    "    df[\"NEUTROPHILES/LINFOCITOS\"] = df['NEUTROPHILES_MEAN']/df['LINFOCITOS_MEAN']\n",
    "\n",
    "    df[\"GASO\"] = df.groupby(\"PATIENT_VISIT_IDENTIFIER\").P02_ARTERIAL_MEAN.apply(lambda x: x.fillna(method='ffill'))\n",
    "    df[\"GASO\"] = (~df[\"GASO\"].isna()).astype(int)\n",
    "\n",
    "    return df[[\"ICU\",\"WINDOW\",\n",
    "               \"PATIENT_VISIT_IDENTIFIER\",\n",
    "               \"AGE_ABOVE65\", \n",
    "               \"GENDER\", \n",
    "               \"BLOODPRESSURE_ARTERIAL_MEAN\", \n",
    "               \"RESPIRATORY_RATE_MAX\", \n",
    "               \"HTN\", \n",
    "               'DISEASE GROUPING 1',\n",
    "               'DISEASE GROUPING 2',\n",
    "               'DISEASE GROUPING 3',\n",
    "               'DISEASE GROUPING 4',\n",
    "               'DISEASE GROUPING 5',\n",
    "               'DISEASE GROUPING 6',\n",
    "               \"GASO\",\n",
    "               \"OXYGEN_SATURATION_MIN\",\n",
    "               \"HEART_RATE_MAX\",\n",
    "               \"PCR_MEAN\",\n",
    "               \"CREATININ_MEAN\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:37.347331Z",
     "iopub.status.busy": "2021-03-11T23:17:37.346491Z",
     "iopub.status.idle": "2021-03-11T23:17:37.388908Z",
     "shell.execute_reply": "2021-03-11T23:17:37.389457Z"
    },
    "papermill": {
     "duration": 0.126965,
     "end_time": "2021-03-11T23:17:37.389657",
     "exception": false,
     "start_time": "2021-03-11T23:17:37.262692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# creates a new df based on selected window,next one i.e.(0-2,2-4) for ICU prediction and previous one for feature temporal differences\n",
    "\n",
    "def window_df_creation(df_base):\n",
    "# first, we create our 0-2 WINDOW dataframe\n",
    "\n",
    "    starting_window = '0-2' \n",
    "    ending_window = '2-4'\n",
    "#     slicing df to match selected Windows\n",
    "    df = df_base.copy()\n",
    "    df = df[(df['WINDOW']==starting_window)|(df['WINDOW']==ending_window)]\n",
    "    \n",
    "#     creating feature identifying if patient went to the ICU on the ending_window    \n",
    "    next_period_icu = df.groupby(['PATIENT_VISIT_IDENTIFIER'])['WINDOW','ICU'].sum()\n",
    "    next_period_icu = next_period_icu.rename(columns={'ICU':'next_period_ICU'})\n",
    "    \n",
    "#     adding new columns to starting_window rows\n",
    "    df1 = df.merge(next_period_icu,left_on='PATIENT_VISIT_IDENTIFIER',right_index=True)\n",
    "    df1 = df1[(df1['WINDOW']==starting_window)]\n",
    "    df1 = df1.drop(columns=['WINDOW','AGE_ABOVE65','ICU'])\n",
    "    \n",
    "#     transforming categorical data to dummies and setting index as unique ID (Patient ID)\n",
    "    df1 = pd.get_dummies(df1)\n",
    "    df1.index = df1['PATIENT_VISIT_IDENTIFIER']\n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "# creating 2-4 WINDOW df\n",
    "    \n",
    "    starting_window = '2-4' \n",
    "    ending_window = '4-6'\n",
    "    dif_window = '0-2'\n",
    "    \n",
    "    #     slicing df to match selected Windows\n",
    "    df = df_best_features.copy()\n",
    "    df = df[(df['WINDOW']==starting_window)|(df['WINDOW']==ending_window)]\n",
    "    \n",
    "#     remove starting_window ICU patients\n",
    "    remove_patients = df[(df['WINDOW']==starting_window) & (df['ICU']==1)]['PATIENT_VISIT_IDENTIFIER'].to_list()\n",
    "\n",
    "    df = df.query(\"PATIENT_VISIT_IDENTIFIER not in @remove_patients\")\n",
    "    df = df.reset_index(drop=True)\n",
    "    \n",
    "#     creating feature identifying if patient went to the ICU on the ending_window    \n",
    "    next_period_icu = df.groupby(['PATIENT_VISIT_IDENTIFIER'])['WINDOW','ICU'].sum()\n",
    "    next_period_icu = next_period_icu.rename(columns={'ICU':'next_period_ICU'})\n",
    "    \n",
    "#     adding new columns to starting_window rows\n",
    "    df = df.merge(next_period_icu,left_on='PATIENT_VISIT_IDENTIFIER',right_index=True)\n",
    "    df = df[(df['WINDOW']==starting_window)]\n",
    "    df = df.drop(columns=['WINDOW','AGE_ABOVE65','ICU'])\n",
    "    \n",
    "#     transforming categorical data to dummies and setting index as unique ID (Patient ID)\n",
    "    df = pd.get_dummies(df)\n",
    "    df['WINDOW'] = starting_window\n",
    "    df.index = df['PATIENT_VISIT_IDENTIFIER']\n",
    "        \n",
    "    df_dif_list = []\n",
    "    for x in df[(df['WINDOW']==starting_window)].index:\n",
    "        df_end = df_best_features[(df_best_features['WINDOW']==starting_window) & (df_best_features['PATIENT_VISIT_IDENTIFIER']==x)]\n",
    "        df_end = df_end.drop(columns=['WINDOW'])\n",
    "\n",
    "        df_init = df_best_features[(df_best_features['WINDOW']==dif_window) & (df_best_features['PATIENT_VISIT_IDENTIFIER']==x)]\n",
    "        df_init = df_init.drop(columns=['WINDOW'])\n",
    "        df_init = df_init.values.tolist()[0]\n",
    "\n",
    "        df_dif2 = df_end.sub(df_init, axis='columns')\n",
    "\n",
    "        df_dif2['PATIENT_VISIT_IDENTIFIER'] = x\n",
    "        df_dif2['WINDOW'] = starting_window\n",
    "        dif_vector = df_dif2.values.tolist()[0] \n",
    "        df_dif_list.append(dif_vector)\n",
    "\n",
    "    df_dif2 = pd.DataFrame(df_dif_list)\n",
    "\n",
    "    # new headers for dif columns\n",
    "    dif_headers = [f\"{x}_windif_2\" for x in df_best_features.columns.to_list()]\n",
    "    new_col = ['WINDOW']\n",
    "    dif_headers_new = dif_headers + new_col\n",
    "    dif_headers_new[0] = 'PATIENT_VISIT_IDENTIFIER'\n",
    "    dif_headers_new.remove('WINDOW_windif_2')\n",
    "    dif_headers_new\n",
    "\n",
    "    df_dif2.columns = dif_headers_new\n",
    "    df_dif2.drop(columns=['WINDOW','AGE_ABOVE65_windif_2','DISEASE GROUPING 2_windif_2','DISEASE GROUPING 3_windif_2','DISEASE GROUPING 4_windif_2','DISEASE GROUPING 5_windif_2','ICU_windif_2','AGE_PERCENTIL_10th_windif_2','AGE_PERCENTIL_20th_windif_2','AGE_PERCENTIL_80th_windif_2','AGE_PERCENTIL_90th_windif_2','AGE_PERCENTIL_Above 90th_windif_2'],inplace=True)\n",
    "\n",
    "#     merging dfs to create final df\n",
    "    df2 = df.merge(df_dif2,left_index = True,right_on='PATIENT_VISIT_IDENTIFIER')\n",
    "    df2.index = df2['PATIENT_VISIT_IDENTIFIER']\n",
    "    df2.drop(columns=['PATIENT_VISIT_IDENTIFIER','WINDOW'],inplace=True)\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "# creating 4-6 WINDOW df\n",
    "    \n",
    "    starting_window = '4-6' \n",
    "    ending_window = '6-12'\n",
    "    dif_window = '2-4'\n",
    "    \n",
    "    #     slicing df to match selected Windows\n",
    "    df = df_best_features.copy()\n",
    "    df = df[(df['WINDOW']==starting_window)|(df['WINDOW']==ending_window)]\n",
    "    \n",
    "    #     remove starting_window ICU patients\n",
    "    remove_patients = df[(df['WINDOW']==starting_window) & (df['ICU']==1)]['PATIENT_VISIT_IDENTIFIER'].to_list()\n",
    "\n",
    "    df = df.query(\"PATIENT_VISIT_IDENTIFIER not in @remove_patients\")\n",
    "    df = df.reset_index(drop=True)\n",
    "    \n",
    "#     creating feature identifying if patient went to the ICU on the ending_window    \n",
    "    next_period_icu = df.groupby(['PATIENT_VISIT_IDENTIFIER'])['WINDOW','ICU'].sum()\n",
    "    next_period_icu = next_period_icu.rename(columns={'ICU':'next_period_ICU'})\n",
    "    \n",
    "#     adding new columns to starting_window rows\n",
    "    df = df.merge(next_period_icu,left_on='PATIENT_VISIT_IDENTIFIER',right_index=True)\n",
    "    df = df[(df['WINDOW']==starting_window)]\n",
    "    df = df.drop(columns=['WINDOW','AGE_ABOVE65','ICU'])\n",
    "    \n",
    "#     transforming categorical data to dummies and setting index as unique ID (Patient ID)\n",
    "    df = pd.get_dummies(df)\n",
    "    df['WINDOW'] = starting_window\n",
    "    df.index = df['PATIENT_VISIT_IDENTIFIER']\n",
    "        \n",
    "    df_dif_list = []\n",
    "    for x in df[(df['WINDOW']==starting_window)].index:\n",
    "        df_end = df_best_features[(df_best_features['WINDOW']==starting_window) & (df_best_features['PATIENT_VISIT_IDENTIFIER']==x)]\n",
    "        df_end = df_end.drop(columns=['WINDOW'])\n",
    "\n",
    "        df_init = df_best_features[(df_best_features['WINDOW']==dif_window) & (df_best_features['PATIENT_VISIT_IDENTIFIER']==x)]\n",
    "        df_init = df_init.drop(columns=['WINDOW'])\n",
    "        df_init = df_init.values.tolist()[0]\n",
    "\n",
    "        df_dif3 = df_end.sub(df_init, axis='columns')\n",
    "\n",
    "        df_dif3['PATIENT_VISIT_IDENTIFIER'] = x\n",
    "        df_dif3['WINDOW'] = starting_window\n",
    "        dif_vector = df_dif3.values.tolist()[0] \n",
    "        df_dif_list.append(dif_vector)\n",
    "\n",
    "    df_dif3 = pd.DataFrame(df_dif_list)\n",
    "\n",
    "    # new headers for dif columns\n",
    "    dif_headers = [f\"{x}_windif_4\" for x in df_best_features.columns.to_list()]\n",
    "    new_col = ['WINDOW']\n",
    "    dif_headers_new = dif_headers + new_col\n",
    "    dif_headers_new[0] = 'PATIENT_VISIT_IDENTIFIER'\n",
    "    dif_headers_new.remove('WINDOW_windif_4')\n",
    "    dif_headers_new\n",
    "\n",
    "    df_dif3.columns = dif_headers_new\n",
    "    df_dif3.drop(columns=['WINDOW','AGE_ABOVE65_windif_4','DISEASE GROUPING 2_windif_4','DISEASE GROUPING 3_windif_4','DISEASE GROUPING 4_windif_4','DISEASE GROUPING 5_windif_4','ICU_windif_4','AGE_PERCENTIL_10th_windif_4','AGE_PERCENTIL_20th_windif_4','AGE_PERCENTIL_80th_windif_4','AGE_PERCENTIL_90th_windif_4','AGE_PERCENTIL_Above 90th_windif_4'],inplace=True)\n",
    "\n",
    "    \n",
    "    #     merging dfs to create final df\n",
    "    df3 = df.merge(df_dif3,left_index = True,right_on='PATIENT_VISIT_IDENTIFIER')\n",
    "    df3 = df3.merge(df_dif2,left_on = 'PATIENT_VISIT_IDENTIFIER',right_on='PATIENT_VISIT_IDENTIFIER')\n",
    "    df3.index = df3['PATIENT_VISIT_IDENTIFIER_x']\n",
    "    df3.drop(columns=['PATIENT_VISIT_IDENTIFIER','PATIENT_VISIT_IDENTIFIER_x','WINDOW'],inplace=True)\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "# creating 6-12 WINDOW df\n",
    "    \n",
    "    starting_window = '6-12' \n",
    "    ending_window = 'ABOVE_12'\n",
    "    dif_window = '4-6'\n",
    "    \n",
    "    #     slicing df to match selected Windows\n",
    "    df = df_best_features.copy()\n",
    "    df = df[(df['WINDOW']==starting_window)|(df['WINDOW']==ending_window)]\n",
    "    \n",
    "    #     remove starting_window ICU patients\n",
    "    remove_patients = df[(df['WINDOW']==starting_window) & (df['ICU']==1)]['PATIENT_VISIT_IDENTIFIER'].to_list()\n",
    "\n",
    "    df = df.query(\"PATIENT_VISIT_IDENTIFIER not in @remove_patients\")\n",
    "    df = df.reset_index(drop=True)\n",
    "    \n",
    "#     creating feature identifying if patient went to the ICU on the ending_window    \n",
    "    next_period_icu = df.groupby(['PATIENT_VISIT_IDENTIFIER'])['WINDOW','ICU'].sum()\n",
    "    next_period_icu = next_period_icu.rename(columns={'ICU':'next_period_ICU'})\n",
    "    \n",
    "#     adding new columns to starting_window rows\n",
    "    df = df.merge(next_period_icu,left_on='PATIENT_VISIT_IDENTIFIER',right_index=True)\n",
    "    df = df[(df['WINDOW']==starting_window)]\n",
    "    df = df.drop(columns=['WINDOW','AGE_ABOVE65','ICU'])\n",
    "    \n",
    "#     transforming categorical data to dummies and setting index as unique ID (Patient ID)\n",
    "    df = pd.get_dummies(df)\n",
    "    df['WINDOW'] = starting_window\n",
    "    df.index = df['PATIENT_VISIT_IDENTIFIER']\n",
    "        \n",
    "    df_dif_list = []\n",
    "    for x in df[(df['WINDOW']==starting_window)].index:\n",
    "        df_end = df_best_features[(df_best_features['WINDOW']==starting_window) & (df_best_features['PATIENT_VISIT_IDENTIFIER']==x)]\n",
    "        df_end = df_end.drop(columns=['WINDOW'])\n",
    "\n",
    "        df_init = df_best_features[(df_best_features['WINDOW']==dif_window) & (df_best_features['PATIENT_VISIT_IDENTIFIER']==x)]\n",
    "        df_init = df_init.drop(columns=['WINDOW'])\n",
    "        df_init = df_init.values.tolist()[0]\n",
    "\n",
    "        df_dif4 = df_end.sub(df_init, axis='columns')\n",
    "\n",
    "        df_dif4['PATIENT_VISIT_IDENTIFIER'] = x\n",
    "        df_dif4['WINDOW'] = starting_window\n",
    "        dif_vector = df_dif4.values.tolist()[0] \n",
    "        df_dif_list.append(dif_vector)\n",
    "\n",
    "    df_dif4 = pd.DataFrame(df_dif_list)\n",
    "\n",
    "    # new headers for dif columns\n",
    "    dif_headers = [f\"{x}_windif_6\" for x in df_best_features.columns.to_list()]\n",
    "    new_col = ['WINDOW']\n",
    "    dif_headers_new = dif_headers + new_col\n",
    "    dif_headers_new[0] = 'PATIENT_VISIT_IDENTIFIER'\n",
    "    dif_headers_new.remove('WINDOW_windif_6')\n",
    "    dif_headers_new\n",
    "\n",
    "    df_dif4.columns = dif_headers_new\n",
    "    df_dif4.drop(columns=['WINDOW','AGE_ABOVE65_windif_6','DISEASE GROUPING 2_windif_6','DISEASE GROUPING 3_windif_6','DISEASE GROUPING 4_windif_6','DISEASE GROUPING 5_windif_6','ICU_windif_6','AGE_PERCENTIL_10th_windif_6','AGE_PERCENTIL_20th_windif_6','AGE_PERCENTIL_80th_windif_6','AGE_PERCENTIL_90th_windif_6','AGE_PERCENTIL_Above 90th_windif_6'],inplace=True)\n",
    "\n",
    "    \n",
    "    #     merging dfs to create final df\n",
    "    df4 = df.merge(df_dif4,left_index = True,right_on='PATIENT_VISIT_IDENTIFIER')\n",
    "    df4 = df4.merge(df_dif2,left_on = 'PATIENT_VISIT_IDENTIFIER',right_on='PATIENT_VISIT_IDENTIFIER')\n",
    "    df4 = df4.merge(df_dif3,left_on = 'PATIENT_VISIT_IDENTIFIER',right_on='PATIENT_VISIT_IDENTIFIER')\n",
    "    df4.index = df4['PATIENT_VISIT_IDENTIFIER_x']\n",
    "    df4.drop(columns=['PATIENT_VISIT_IDENTIFIER','PATIENT_VISIT_IDENTIFIER_x','PATIENT_VISIT_IDENTIFIER_y','WINDOW'],inplace=True)\n",
    "    \n",
    "    return df1,df2,df3,df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:37.562381Z",
     "iopub.status.busy": "2021-03-11T23:17:37.561320Z",
     "iopub.status.idle": "2021-03-11T23:17:37.586073Z",
     "shell.execute_reply": "2021-03-11T23:17:37.586648Z"
    },
    "papermill": {
     "duration": 0.116336,
     "end_time": "2021-03-11T23:17:37.586843",
     "exception": false,
     "start_time": "2021-03-11T23:17:37.470507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# creates new dfs to be used with proba combination\n",
    "\n",
    "def df_proba_create(df_base):\n",
    "\n",
    "    # first, we create our 0-2 WINDOW dataframe\n",
    "\n",
    "    starting_window = '0-2' \n",
    "    ending_window = '2-4'\n",
    "#     slicing df to match selected Windows\n",
    "    df = df_base.copy()\n",
    "    df = df[(df['WINDOW']==starting_window)|(df['WINDOW']==ending_window)]\n",
    "    \n",
    "#     creating feature identifying if patient went to the ICU on the ending_window    \n",
    "    next_period_icu = df.groupby(['PATIENT_VISIT_IDENTIFIER'])['WINDOW','ICU'].sum()\n",
    "    next_period_icu = next_period_icu.rename(columns={'ICU':'next_period_ICU'})\n",
    "    \n",
    "#     adding new columns to starting_window rows\n",
    "    df1 = df.merge(next_period_icu,left_on='PATIENT_VISIT_IDENTIFIER',right_index=True)\n",
    "    df1 = df1[(df1['WINDOW']==starting_window)]\n",
    "    df1 = df1.drop(columns=['WINDOW','AGE_ABOVE65','ICU'])\n",
    "    \n",
    "#     transforming categorical data to dummies and setting index as unique ID (Patient ID)\n",
    "    df1 = pd.get_dummies(df1)\n",
    "    df1.index = df1['PATIENT_VISIT_IDENTIFIER']\n",
    "    df1.drop(columns=['PATIENT_VISIT_IDENTIFIER'], inplace = True)\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "    # 2-4 WINDOW dataframe\n",
    "\n",
    "    starting_window = '0-2' \n",
    "    ending_window = '4-6'\n",
    "#     slicing df to match selected Windows\n",
    "    df = df_base.copy()\n",
    "    df = df[(df['WINDOW']==starting_window)|(df['WINDOW']==ending_window)]\n",
    "    \n",
    "    #     remove starting_window ICU patients\n",
    "    remove_patients = df[(df['WINDOW']==starting_window) & (df['ICU']==1)]['PATIENT_VISIT_IDENTIFIER'].to_list()\n",
    "\n",
    "    df = df.query(\"PATIENT_VISIT_IDENTIFIER not in @remove_patients\")\n",
    "    df = df.reset_index(drop=True)\n",
    "    \n",
    "#     creating feature identifying if patient went to the ICU on the ending_window    \n",
    "    next_period_icu = df.groupby(['PATIENT_VISIT_IDENTIFIER'])['WINDOW','ICU'].sum()\n",
    "    next_period_icu = next_period_icu.rename(columns={'ICU':'next_period_ICU'})\n",
    "    \n",
    "#     adding new columns to starting_window rows\n",
    "    df2 = df.merge(next_period_icu,left_on='PATIENT_VISIT_IDENTIFIER',right_index=True)\n",
    "    df2 = df2[(df2['WINDOW']==starting_window)]\n",
    "    df2 = df2.drop(columns=['WINDOW','AGE_ABOVE65','ICU'])\n",
    "    \n",
    "#     transforming categorical data to dummies and setting index as unique ID (Patient ID)\n",
    "    df2 = pd.get_dummies(df2)\n",
    "    df2.index = df2['PATIENT_VISIT_IDENTIFIER']\n",
    "    df2.drop(columns=['PATIENT_VISIT_IDENTIFIER'], inplace = True)\n",
    "    \n",
    "\n",
    "    # 4-6 WINDOW dataframe\n",
    "\n",
    "    starting_window = '0-2' \n",
    "    ending_window = '6-12'\n",
    "#     slicing df to match selected Windows\n",
    "    df = df_base.copy()\n",
    "    df = df[(df['WINDOW']==starting_window)|(df['WINDOW']==ending_window)]\n",
    "    \n",
    "    #     remove starting_window ICU patients\n",
    "    remove_patients = df[(df['WINDOW']==starting_window) & (df['ICU']==1)]['PATIENT_VISIT_IDENTIFIER'].to_list()\n",
    "\n",
    "    df = df.query(\"PATIENT_VISIT_IDENTIFIER not in @remove_patients\")\n",
    "    df = df.reset_index(drop=True)\n",
    "    \n",
    "#     creating feature identifying if patient went to the ICU on the ending_window    \n",
    "    next_period_icu = df.groupby(['PATIENT_VISIT_IDENTIFIER'])['WINDOW','ICU'].sum()\n",
    "    next_period_icu = next_period_icu.rename(columns={'ICU':'next_period_ICU'})\n",
    "    \n",
    "#     adding new columns to starting_window rows\n",
    "    df3 = df.merge(next_period_icu,left_on='PATIENT_VISIT_IDENTIFIER',right_index=True)\n",
    "    df3 = df3[(df3['WINDOW']==starting_window)]\n",
    "    df3 = df3.drop(columns=['WINDOW','AGE_ABOVE65','ICU'])\n",
    "    \n",
    "#     transforming categorical data to dummies and setting index as unique ID (Patient ID)\n",
    "    df3 = pd.get_dummies(df3)\n",
    "    df3.index = df3['PATIENT_VISIT_IDENTIFIER']\n",
    "    df3.drop(columns=['PATIENT_VISIT_IDENTIFIER'], inplace = True)\n",
    "    \n",
    "\n",
    "    # 6-12 WINDOW dataframe\n",
    "\n",
    "    starting_window = '0-2' \n",
    "    ending_window = 'ABOVE_12'\n",
    "#     slicing df to match selected Windows\n",
    "    df = df_base.copy()\n",
    "    df = df[(df['WINDOW']==starting_window)|(df['WINDOW']==ending_window)]\n",
    "    \n",
    "    #     remove starting_window ICU patients\n",
    "    remove_patients = df[(df['WINDOW']==starting_window) & (df['ICU']==1)]['PATIENT_VISIT_IDENTIFIER'].to_list()\n",
    "\n",
    "    df = df.query(\"PATIENT_VISIT_IDENTIFIER not in @remove_patients\")\n",
    "    df = df.reset_index(drop=True)\n",
    "    \n",
    "#     creating feature identifying if patient went to the ICU on the ending_window    \n",
    "    next_period_icu = df.groupby(['PATIENT_VISIT_IDENTIFIER'])['WINDOW','ICU'].sum()\n",
    "    next_period_icu = next_period_icu.rename(columns={'ICU':'next_period_ICU'})\n",
    "    \n",
    "#     adding new columns to starting_window rows\n",
    "    df4 = df.merge(next_period_icu,left_on='PATIENT_VISIT_IDENTIFIER',right_index=True)\n",
    "    df4 = df4[(df4['WINDOW']==starting_window)]\n",
    "    df4 = df4.drop(columns=['WINDOW','AGE_ABOVE65','ICU'])\n",
    "    \n",
    "#     transforming categorical data to dummies and setting index as unique ID (Patient ID)\n",
    "    df4 = pd.get_dummies(df4)\n",
    "    df4.index = df4['PATIENT_VISIT_IDENTIFIER']\n",
    "    df4.drop(columns=['PATIENT_VISIT_IDENTIFIER'], inplace = True)\n",
    "    \n",
    "    return df1,df2,df3,df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:37.765602Z",
     "iopub.status.busy": "2021-03-11T23:17:37.764637Z",
     "iopub.status.idle": "2021-03-11T23:17:37.771540Z",
     "shell.execute_reply": "2021-03-11T23:17:37.771010Z"
    },
    "papermill": {
     "duration": 0.0914,
     "end_time": "2021-03-11T23:17:37.771689",
     "exception": false,
     "start_time": "2021-03-11T23:17:37.680289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_test(df):\n",
    "    features = df.columns.to_list()\n",
    "    features.remove('next_period_ICU')\n",
    "    \n",
    "    x=df[features]\n",
    "    y=df['next_period_ICU']\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(x,y,stratify = y,random_state = 42, test_size=0.20)\n",
    "    return X_train, X_test, y_train, y_test, x, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:37.960313Z",
     "iopub.status.busy": "2021-03-11T23:17:37.959204Z",
     "iopub.status.idle": "2021-03-11T23:17:37.962594Z",
     "shell.execute_reply": "2021-03-11T23:17:37.961968Z"
    },
    "papermill": {
     "duration": 0.111185,
     "end_time": "2021-03-11T23:17:37.962747",
     "exception": false,
     "start_time": "2021-03-11T23:17:37.851562",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def model_comparison(df):\n",
    "    \n",
    "#     train test split\n",
    "    X_train, X_test, y_train, y_test, x_full, y_full = train_test(df)  \n",
    "    \n",
    "    \n",
    "    \n",
    "    ###############     Logistic Regression     ###############\n",
    "    \n",
    "    init_time = time.time()\n",
    "    \n",
    "        ###### Hyperoptimization ######\n",
    "    lr_params = {\n",
    "        'C': np.random.uniform(low=0.0, high=1.0, size=1000),\n",
    "        'penalty': ['l1', 'l2'],\n",
    "        'max_iter': np.random.uniform(low=2000, high=10000, size=1000),\n",
    "    }\n",
    "\n",
    "    lr_random_search_model = RandomizedSearchCV(\n",
    "        estimator=LogisticRegression(\n",
    "            fit_intercept=True,\n",
    "            class_weight='balanced',\n",
    "            random_state=42\n",
    "        ), \n",
    "        param_distributions=lr_params,\n",
    "        scoring='f1',\n",
    "        cv=4,\n",
    "        n_iter=2000,\n",
    "        n_jobs=-1,\n",
    "        random_state=42\n",
    "    )\n",
    "\n",
    "    lr_random_search_model.fit(x_full, y_full)\n",
    "    lr_best_model = lr_random_search_model.best_estimator_\n",
    "\n",
    "    \n",
    "    ###### Evaluating hyperopt ######\n",
    "    y_pred_test = lr_best_model.predict(x_full)\n",
    "    y_prob_test = lr_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "    lr_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "    _,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "    lr_f1_score_test = round(f1_score_test[1],4)\n",
    "    lr_recall_test = round(recall_test[1],4)\n",
    "\n",
    "    lr_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)\n",
    "\n",
    "    end_time = time.time()\n",
    "    lr_fit_time = round((end_time - init_time)/60,2)\n",
    "    \n",
    "    print(f\"Logistic Regression done in {lr_fit_time} minutes\")\n",
    "    \n",
    "    \n",
    "    ###############     Extra Trees     ############### \n",
    "    \n",
    "    init_time = time.time()\n",
    "\n",
    "\n",
    "    # Hyperparameter grid\n",
    "    param_grid = {\n",
    "        'n_estimators': np.linspace(1500, 3000).astype(int),\n",
    "        'max_depth': list(np.linspace(2, 4).astype(int)),\n",
    "        'max_features': ['auto', 'sqrt'],\n",
    "        'max_samples': list(np.arange(0.5, 1, 0.1)),\n",
    "        'min_samples_split': [5, 10, 20],\n",
    "        'bootstrap': [True, False]\n",
    "    }\n",
    "\n",
    "    # Estimator for use in random search\n",
    "    estimator = ExtraTreesClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "    # Create the random search model\n",
    "    xtrees_model = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "                            scoring = 'f1', cv = 3, \n",
    "                            n_iter = 100, verbose = 0,\n",
    "                            random_state=42)\n",
    "\n",
    "    # Fit \n",
    "    xtrees_model.fit(x_full, y_full)\n",
    "    xt_best_model = xtrees_model.best_estimator_\n",
    "\n",
    "\n",
    "    ###### Evaluating hyperopt - test ######\n",
    "    y_pred_test = xt_best_model.predict(x_full)\n",
    "    y_prob_test = xt_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "    xt_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "    _,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "    xt_f1_score_test = round(f1_score_test[1],4)\n",
    "    xt_recall_test = round(recall_test[1],4)\n",
    "\n",
    "    xt_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)\n",
    "\n",
    "    end_time = time.time()\n",
    "    xt_fit_time = round((end_time - init_time)/60,2)\n",
    "    print(f\"Extra Trees done in {xt_fit_time} minutes\")\n",
    "    \n",
    "    \n",
    "    \n",
    "    ###############     LGBM     ###############\n",
    "\n",
    "    init_time = time.time()\n",
    "\n",
    "\n",
    "    # Hyperparameter grid\n",
    "    param_grid = {\"n_estimators\": np.linspace(2, 5).astype(int),\n",
    "                  \"boosting_type\": [\"gbdt\",\"dart\",\"goss\"],\n",
    "                  \"subsample\": list(np.arange(0.5, 1, 0.2)),\n",
    "                  \"colsample_bytree\": list(np.arange(0.5, 0.8, 0.1)),\n",
    "                  \"objective\": [\"binary\",\"multiclass\"],\n",
    "                  \"alpha\": list(np.arange(0, 0.6, 0.2)),\n",
    "                  \"max_depth\": [2,3,4,5,6],\n",
    "                  \"num_leaves\": np.linspace(20, 40).astype(int),\n",
    "                 }\n",
    "\n",
    "    # Estimator for use in random search\n",
    "    estimator = LGBMClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "    # Create the random search model\n",
    "    lgbm = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "                            scoring = 'f1', cv = 5, \n",
    "                            n_iter = 100, verbose = 0,\n",
    "                            random_state=42)\n",
    "\n",
    "    # Fit \n",
    "    lgbm.fit(x_full, y_full)\n",
    "    lgbm_best_model = lgbm.best_estimator_\n",
    "\n",
    "    ###### Evaluating hyperopt - test ######\n",
    "    y_pred_test = lgbm_best_model.predict(x_full)\n",
    "    y_prob_test = lgbm_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "    lgbm_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "    _,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "    lgbm_f1_score_test = round(f1_score_test[1],4)\n",
    "    lgbm_recall_test = round(recall_test[1],4)\n",
    "\n",
    "    lgbm_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)\n",
    "\n",
    "    end_time = time.time()\n",
    "    lgbm_fit_time = round((end_time - init_time)/60,2)\n",
    "    print(f\"LGBM done in {lgbm_fit_time} minutes\")\n",
    "    \n",
    "    \n",
    "    ###############     Model comparison table     ###############\n",
    "    \n",
    "    \n",
    "    print(\n",
    "    tabulate(\n",
    "        [\n",
    "            [\"Model\", \"F1-score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "            [\n",
    "                \"Logistic Regression\",\n",
    "                lr_f1_score_test,\n",
    "                lr_recall_test,\n",
    "                lr_auc_score_test,\n",
    "                lr_avg_prec_test,          \n",
    "            ],\n",
    "            [\n",
    "                \"Extra Trees\",\n",
    "                xt_f1_score_test,\n",
    "                xt_recall_test,\n",
    "                xt_auc_score_test,\n",
    "                xt_avg_prec_test,\n",
    "            ],\n",
    "            [\n",
    "                \"LGBM\",\n",
    "                lgbm_f1_score_test,\n",
    "                lgbm_recall_test,\n",
    "                lgbm_auc_score_test,\n",
    "                lgbm_avg_prec_test\n",
    "            ],\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "    \n",
    "    return lr_best_model, xt_best_model, lgbm_best_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:38.131703Z",
     "iopub.status.busy": "2021-03-11T23:17:38.131041Z",
     "iopub.status.idle": "2021-03-11T23:17:38.134289Z",
     "shell.execute_reply": "2021-03-11T23:17:38.133650Z"
    },
    "papermill": {
     "duration": 0.091788,
     "end_time": "2021-03-11T23:17:38.134457",
     "exception": false,
     "start_time": "2021-03-11T23:17:38.042669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# plots ROC AUC curve\n",
    "def roc_auc_plot(y_test, y_prob):\n",
    "  \n",
    "  # get roc/auc info\n",
    "  fpr = dict()\n",
    "  tpr = dict()\n",
    "  fpr, tpr, _ = roc_curve(y_test, y_prob)\n",
    "  roc_auc = dict()\n",
    "  roc_auc = round(auc(fpr, tpr),3)\n",
    "\n",
    "  # make the plot\n",
    "  fig = plt.figure(figsize=(10,10))\n",
    "  plt.plot([0, 1], [0, 1], 'k--')\n",
    "  plt.xlim([-0.05, 1.0])\n",
    "  plt.ylim([0.0, 1.05])\n",
    "  plt.xlabel('False Positive Rate')\n",
    "  plt.ylabel('True Positive Rate')\n",
    "  plt.grid(True)\n",
    "  plt.plot(fpr, tpr, label='AUC = {0}'.format(roc_auc))        \n",
    "  plt.legend(loc=\"lower right\", shadow=True, fancybox =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:38.299588Z",
     "iopub.status.busy": "2021-03-11T23:17:38.298862Z",
     "iopub.status.idle": "2021-03-11T23:17:38.309503Z",
     "shell.execute_reply": "2021-03-11T23:17:38.310047Z"
    },
    "papermill": {
     "duration": 0.09475,
     "end_time": "2021-03-11T23:17:38.310231",
     "exception": false,
     "start_time": "2021-03-11T23:17:38.215481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# function to transform predict_proba values for Tree based models, by using Logistic Regression (based on https://gdmarmerola.github.io/probability-calibration/)\n",
    "\n",
    "def lr_proba(model,df):\n",
    "    \n",
    "    features = df.columns.to_list()\n",
    "    features.remove('next_period_ICU')\n",
    "\n",
    "    X=df[features]\n",
    "    y=df['next_period_ICU']\n",
    "    x_id=df.index.values\n",
    "\n",
    "    if str(model)[:3] == 'LGB':\n",
    "        leaves = model.predict(X,pred_leaf = True)\n",
    "    else:\n",
    "        # then, we apply the model to the data in order to get the leave indexes\n",
    "        leaves = model.apply(X)\n",
    "        \n",
    "    encoder = OneHotEncoder()\n",
    "    leaves_encoded = encoder.fit_transform(leaves)\n",
    "\n",
    "    # parameters obtained via random search\n",
    "    lr_params = {'solver':'sag',\n",
    "                 'C': 0.001756\t,\n",
    "                 'fit_intercept': False}\n",
    "\n",
    "    lr = LogisticRegression(**lr_params)\n",
    "    lr.fit(leaves_encoded, y)\n",
    "\n",
    "    if str(model)[:3] == 'LGB':\n",
    "        leaves = model.predict(X,pred_leaf = True)\n",
    "    else:\n",
    "        # then, we apply the model to the data in order to get the leave indexes\n",
    "        leaves = model.apply(X)\n",
    "\n",
    "    # then, we one-hot encode the leave indexes so we can use them in the logistic regression\n",
    "    leaves_encoded = encoder.transform(leaves)\n",
    "\n",
    "    # and fit it to the encoded leaves\n",
    "    y_hat = lr.predict_proba(leaves_encoded)\n",
    "\n",
    "    # retuning probabilities\n",
    "    df_yhat = pd.DataFrame(y_hat)\n",
    "    df_xid = pd.DataFrame(x_id)\n",
    "    df_xid.columns = ['id']\n",
    "    \n",
    "    df_mix = df_xid.merge(df_yhat,left_index = True, right_index = True)\n",
    "    df_mix.index = df_mix['id']\n",
    "    df_mix.drop(columns=['id'],inplace=True)\n",
    "    \n",
    "    return df_mix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.0795,
     "end_time": "2021-03-11T23:17:38.470616",
     "exception": false,
     "start_time": "2021-03-11T23:17:38.391116",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Importing and handling data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:38.635005Z",
     "iopub.status.busy": "2021-03-11T23:17:38.633968Z",
     "iopub.status.idle": "2021-03-11T23:17:44.923323Z",
     "shell.execute_reply": "2021-03-11T23:17:44.922733Z"
    },
    "papermill": {
     "duration": 6.37269,
     "end_time": "2021-03-11T23:17:44.923468",
     "exception": false,
     "start_time": "2021-03-11T23:17:38.550778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PATIENT_VISIT_IDENTIFIER</th>\n",
       "      <th>AGE_ABOVE65</th>\n",
       "      <th>AGE_PERCENTIL</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>DISEASE GROUPING 1</th>\n",
       "      <th>DISEASE GROUPING 2</th>\n",
       "      <th>DISEASE GROUPING 3</th>\n",
       "      <th>DISEASE GROUPING 4</th>\n",
       "      <th>DISEASE GROUPING 5</th>\n",
       "      <th>DISEASE GROUPING 6</th>\n",
       "      <th>HTN</th>\n",
       "      <th>IMMUNOCOMPROMISED</th>\n",
       "      <th>OTHER</th>\n",
       "      <th>ALBUMIN_MEDIAN</th>\n",
       "      <th>ALBUMIN_MEAN</th>\n",
       "      <th>ALBUMIN_MIN</th>\n",
       "      <th>ALBUMIN_MAX</th>\n",
       "      <th>ALBUMIN_DIFF</th>\n",
       "      <th>BE_ARTERIAL_MEDIAN</th>\n",
       "      <th>BE_ARTERIAL_MEAN</th>\n",
       "      <th>BE_ARTERIAL_MIN</th>\n",
       "      <th>BE_ARTERIAL_MAX</th>\n",
       "      <th>BE_ARTERIAL_DIFF</th>\n",
       "      <th>BE_VENOUS_MEDIAN</th>\n",
       "      <th>BE_VENOUS_MEAN</th>\n",
       "      <th>BE_VENOUS_MIN</th>\n",
       "      <th>BE_VENOUS_MAX</th>\n",
       "      <th>BE_VENOUS_DIFF</th>\n",
       "      <th>BIC_ARTERIAL_MEDIAN</th>\n",
       "      <th>BIC_ARTERIAL_MEAN</th>\n",
       "      <th>BIC_ARTERIAL_MIN</th>\n",
       "      <th>BIC_ARTERIAL_MAX</th>\n",
       "      <th>BIC_ARTERIAL_DIFF</th>\n",
       "      <th>BIC_VENOUS_MEDIAN</th>\n",
       "      <th>BIC_VENOUS_MEAN</th>\n",
       "      <th>BIC_VENOUS_MIN</th>\n",
       "      <th>BIC_VENOUS_MAX</th>\n",
       "      <th>BIC_VENOUS_DIFF</th>\n",
       "      <th>BILLIRUBIN_MEDIAN</th>\n",
       "      <th>BILLIRUBIN_MEAN</th>\n",
       "      <th>BILLIRUBIN_MIN</th>\n",
       "      <th>BILLIRUBIN_MAX</th>\n",
       "      <th>BILLIRUBIN_DIFF</th>\n",
       "      <th>BLAST_MEDIAN</th>\n",
       "      <th>BLAST_MEAN</th>\n",
       "      <th>BLAST_MIN</th>\n",
       "      <th>BLAST_MAX</th>\n",
       "      <th>BLAST_DIFF</th>\n",
       "      <th>CALCIUM_MEDIAN</th>\n",
       "      <th>CALCIUM_MEAN</th>\n",
       "      <th>CALCIUM_MIN</th>\n",
       "      <th>CALCIUM_MAX</th>\n",
       "      <th>CALCIUM_DIFF</th>\n",
       "      <th>CREATININ_MEDIAN</th>\n",
       "      <th>CREATININ_MEAN</th>\n",
       "      <th>CREATININ_MIN</th>\n",
       "      <th>CREATININ_MAX</th>\n",
       "      <th>CREATININ_DIFF</th>\n",
       "      <th>FFA_MEDIAN</th>\n",
       "      <th>FFA_MEAN</th>\n",
       "      <th>FFA_MIN</th>\n",
       "      <th>FFA_MAX</th>\n",
       "      <th>FFA_DIFF</th>\n",
       "      <th>GGT_MEDIAN</th>\n",
       "      <th>GGT_MEAN</th>\n",
       "      <th>GGT_MIN</th>\n",
       "      <th>GGT_MAX</th>\n",
       "      <th>GGT_DIFF</th>\n",
       "      <th>GLUCOSE_MEDIAN</th>\n",
       "      <th>GLUCOSE_MEAN</th>\n",
       "      <th>GLUCOSE_MIN</th>\n",
       "      <th>GLUCOSE_MAX</th>\n",
       "      <th>GLUCOSE_DIFF</th>\n",
       "      <th>HEMATOCRITE_MEDIAN</th>\n",
       "      <th>HEMATOCRITE_MEAN</th>\n",
       "      <th>HEMATOCRITE_MIN</th>\n",
       "      <th>HEMATOCRITE_MAX</th>\n",
       "      <th>HEMATOCRITE_DIFF</th>\n",
       "      <th>HEMOGLOBIN_MEDIAN</th>\n",
       "      <th>HEMOGLOBIN_MEAN</th>\n",
       "      <th>HEMOGLOBIN_MIN</th>\n",
       "      <th>HEMOGLOBIN_MAX</th>\n",
       "      <th>HEMOGLOBIN_DIFF</th>\n",
       "      <th>INR_MEDIAN</th>\n",
       "      <th>INR_MEAN</th>\n",
       "      <th>INR_MIN</th>\n",
       "      <th>INR_MAX</th>\n",
       "      <th>INR_DIFF</th>\n",
       "      <th>LACTATE_MEDIAN</th>\n",
       "      <th>LACTATE_MEAN</th>\n",
       "      <th>LACTATE_MIN</th>\n",
       "      <th>LACTATE_MAX</th>\n",
       "      <th>LACTATE_DIFF</th>\n",
       "      <th>LEUKOCYTES_MEDIAN</th>\n",
       "      <th>LEUKOCYTES_MEAN</th>\n",
       "      <th>LEUKOCYTES_MIN</th>\n",
       "      <th>LEUKOCYTES_MAX</th>\n",
       "      <th>LEUKOCYTES_DIFF</th>\n",
       "      <th>LINFOCITOS_MEDIAN</th>\n",
       "      <th>LINFOCITOS_MEAN</th>\n",
       "      <th>LINFOCITOS_MIN</th>\n",
       "      <th>LINFOCITOS_MAX</th>\n",
       "      <th>LINFOCITOS_DIFF</th>\n",
       "      <th>NEUTROPHILES_MEDIAN</th>\n",
       "      <th>NEUTROPHILES_MEAN</th>\n",
       "      <th>NEUTROPHILES_MIN</th>\n",
       "      <th>NEUTROPHILES_MAX</th>\n",
       "      <th>NEUTROPHILES_DIFF</th>\n",
       "      <th>P02_ARTERIAL_MEDIAN</th>\n",
       "      <th>P02_ARTERIAL_MEAN</th>\n",
       "      <th>P02_ARTERIAL_MIN</th>\n",
       "      <th>P02_ARTERIAL_MAX</th>\n",
       "      <th>P02_ARTERIAL_DIFF</th>\n",
       "      <th>P02_VENOUS_MEDIAN</th>\n",
       "      <th>P02_VENOUS_MEAN</th>\n",
       "      <th>P02_VENOUS_MIN</th>\n",
       "      <th>P02_VENOUS_MAX</th>\n",
       "      <th>P02_VENOUS_DIFF</th>\n",
       "      <th>PC02_ARTERIAL_MEDIAN</th>\n",
       "      <th>PC02_ARTERIAL_MEAN</th>\n",
       "      <th>PC02_ARTERIAL_MIN</th>\n",
       "      <th>PC02_ARTERIAL_MAX</th>\n",
       "      <th>PC02_ARTERIAL_DIFF</th>\n",
       "      <th>PC02_VENOUS_MEDIAN</th>\n",
       "      <th>PC02_VENOUS_MEAN</th>\n",
       "      <th>PC02_VENOUS_MIN</th>\n",
       "      <th>PC02_VENOUS_MAX</th>\n",
       "      <th>PC02_VENOUS_DIFF</th>\n",
       "      <th>PCR_MEDIAN</th>\n",
       "      <th>PCR_MEAN</th>\n",
       "      <th>PCR_MIN</th>\n",
       "      <th>PCR_MAX</th>\n",
       "      <th>PCR_DIFF</th>\n",
       "      <th>PH_ARTERIAL_MEDIAN</th>\n",
       "      <th>PH_ARTERIAL_MEAN</th>\n",
       "      <th>PH_ARTERIAL_MIN</th>\n",
       "      <th>PH_ARTERIAL_MAX</th>\n",
       "      <th>PH_ARTERIAL_DIFF</th>\n",
       "      <th>PH_VENOUS_MEDIAN</th>\n",
       "      <th>PH_VENOUS_MEAN</th>\n",
       "      <th>PH_VENOUS_MIN</th>\n",
       "      <th>PH_VENOUS_MAX</th>\n",
       "      <th>PH_VENOUS_DIFF</th>\n",
       "      <th>PLATELETS_MEDIAN</th>\n",
       "      <th>PLATELETS_MEAN</th>\n",
       "      <th>PLATELETS_MIN</th>\n",
       "      <th>PLATELETS_MAX</th>\n",
       "      <th>PLATELETS_DIFF</th>\n",
       "      <th>POTASSIUM_MEDIAN</th>\n",
       "      <th>POTASSIUM_MEAN</th>\n",
       "      <th>POTASSIUM_MIN</th>\n",
       "      <th>POTASSIUM_MAX</th>\n",
       "      <th>POTASSIUM_DIFF</th>\n",
       "      <th>SAT02_ARTERIAL_MEDIAN</th>\n",
       "      <th>SAT02_ARTERIAL_MEAN</th>\n",
       "      <th>SAT02_ARTERIAL_MIN</th>\n",
       "      <th>SAT02_ARTERIAL_MAX</th>\n",
       "      <th>SAT02_ARTERIAL_DIFF</th>\n",
       "      <th>SAT02_VENOUS_MEDIAN</th>\n",
       "      <th>SAT02_VENOUS_MEAN</th>\n",
       "      <th>SAT02_VENOUS_MIN</th>\n",
       "      <th>SAT02_VENOUS_MAX</th>\n",
       "      <th>SAT02_VENOUS_DIFF</th>\n",
       "      <th>SODIUM_MEDIAN</th>\n",
       "      <th>SODIUM_MEAN</th>\n",
       "      <th>SODIUM_MIN</th>\n",
       "      <th>SODIUM_MAX</th>\n",
       "      <th>SODIUM_DIFF</th>\n",
       "      <th>TGO_MEDIAN</th>\n",
       "      <th>TGO_MEAN</th>\n",
       "      <th>TGO_MIN</th>\n",
       "      <th>TGO_MAX</th>\n",
       "      <th>TGO_DIFF</th>\n",
       "      <th>TGP_MEDIAN</th>\n",
       "      <th>TGP_MEAN</th>\n",
       "      <th>TGP_MIN</th>\n",
       "      <th>TGP_MAX</th>\n",
       "      <th>TGP_DIFF</th>\n",
       "      <th>TTPA_MEDIAN</th>\n",
       "      <th>TTPA_MEAN</th>\n",
       "      <th>TTPA_MIN</th>\n",
       "      <th>TTPA_MAX</th>\n",
       "      <th>TTPA_DIFF</th>\n",
       "      <th>UREA_MEDIAN</th>\n",
       "      <th>UREA_MEAN</th>\n",
       "      <th>UREA_MIN</th>\n",
       "      <th>UREA_MAX</th>\n",
       "      <th>UREA_DIFF</th>\n",
       "      <th>DIMER_MEDIAN</th>\n",
       "      <th>DIMER_MEAN</th>\n",
       "      <th>DIMER_MIN</th>\n",
       "      <th>DIMER_MAX</th>\n",
       "      <th>DIMER_DIFF</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_MEAN</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_MEAN</th>\n",
       "      <th>HEART_RATE_MEAN</th>\n",
       "      <th>RESPIRATORY_RATE_MEAN</th>\n",
       "      <th>TEMPERATURE_MEAN</th>\n",
       "      <th>OXYGEN_SATURATION_MEAN</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_MEDIAN</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_MEDIAN</th>\n",
       "      <th>HEART_RATE_MEDIAN</th>\n",
       "      <th>RESPIRATORY_RATE_MEDIAN</th>\n",
       "      <th>TEMPERATURE_MEDIAN</th>\n",
       "      <th>OXYGEN_SATURATION_MEDIAN</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_MIN</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_MIN</th>\n",
       "      <th>HEART_RATE_MIN</th>\n",
       "      <th>RESPIRATORY_RATE_MIN</th>\n",
       "      <th>TEMPERATURE_MIN</th>\n",
       "      <th>OXYGEN_SATURATION_MIN</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_MAX</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_MAX</th>\n",
       "      <th>HEART_RATE_MAX</th>\n",
       "      <th>RESPIRATORY_RATE_MAX</th>\n",
       "      <th>TEMPERATURE_MAX</th>\n",
       "      <th>OXYGEN_SATURATION_MAX</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_DIFF</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_DIFF</th>\n",
       "      <th>HEART_RATE_DIFF</th>\n",
       "      <th>RESPIRATORY_RATE_DIFF</th>\n",
       "      <th>TEMPERATURE_DIFF</th>\n",
       "      <th>OXYGEN_SATURATION_DIFF</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_DIFF_REL</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_DIFF_REL</th>\n",
       "      <th>HEART_RATE_DIFF_REL</th>\n",
       "      <th>RESPIRATORY_RATE_DIFF_REL</th>\n",
       "      <th>TEMPERATURE_DIFF_REL</th>\n",
       "      <th>OXYGEN_SATURATION_DIFF_REL</th>\n",
       "      <th>WINDOW</th>\n",
       "      <th>ICU</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>60th</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.086420</td>\n",
       "      <td>-0.230769</td>\n",
       "      <td>-0.283019</td>\n",
       "      <td>-0.593220</td>\n",
       "      <td>-0.285714</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>0.086420</td>\n",
       "      <td>-0.230769</td>\n",
       "      <td>-0.283019</td>\n",
       "      <td>-0.586207</td>\n",
       "      <td>-0.285714</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>0.237113</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>-0.162393</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>0.208791</td>\n",
       "      <td>0.898990</td>\n",
       "      <td>-0.247863</td>\n",
       "      <td>-0.459459</td>\n",
       "      <td>-0.432836</td>\n",
       "      <td>-0.636364</td>\n",
       "      <td>-0.420290</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>-1.00000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0-2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>60th</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>-0.230769</td>\n",
       "      <td>-0.132075</td>\n",
       "      <td>-0.593220</td>\n",
       "      <td>0.535714</td>\n",
       "      <td>0.578947</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>-0.230769</td>\n",
       "      <td>-0.132075</td>\n",
       "      <td>-0.586207</td>\n",
       "      <td>0.535714</td>\n",
       "      <td>0.578947</td>\n",
       "      <td>0.443299</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>-0.025641</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.838384</td>\n",
       "      <td>-0.076923</td>\n",
       "      <td>-0.459459</td>\n",
       "      <td>-0.313433</td>\n",
       "      <td>-0.636364</td>\n",
       "      <td>0.246377</td>\n",
       "      <td>0.578947</td>\n",
       "      <td>-1.00000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>2-4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>60th</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.605263</td>\n",
       "      <td>0.605263</td>\n",
       "      <td>0.605263</td>\n",
       "      <td>0.605263</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.938950</td>\n",
       "      <td>-0.938950</td>\n",
       "      <td>-0.938950</td>\n",
       "      <td>-0.938950</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.183673</td>\n",
       "      <td>0.183673</td>\n",
       "      <td>0.183673</td>\n",
       "      <td>0.183673</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.868365</td>\n",
       "      <td>-0.868365</td>\n",
       "      <td>-0.868365</td>\n",
       "      <td>-0.868365</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.742004</td>\n",
       "      <td>-0.742004</td>\n",
       "      <td>-0.742004</td>\n",
       "      <td>-0.742004</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.945093</td>\n",
       "      <td>-0.945093</td>\n",
       "      <td>-0.945093</td>\n",
       "      <td>-0.945093</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.891993</td>\n",
       "      <td>-0.891993</td>\n",
       "      <td>-0.891993</td>\n",
       "      <td>-0.891993</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.090147</td>\n",
       "      <td>0.090147</td>\n",
       "      <td>0.090147</td>\n",
       "      <td>0.090147</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.109756</td>\n",
       "      <td>0.109756</td>\n",
       "      <td>0.109756</td>\n",
       "      <td>0.109756</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.932246</td>\n",
       "      <td>-0.932246</td>\n",
       "      <td>-0.932246</td>\n",
       "      <td>-0.932246</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.835844</td>\n",
       "      <td>-0.835844</td>\n",
       "      <td>-0.835844</td>\n",
       "      <td>-0.835844</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.914938</td>\n",
       "      <td>-0.914938</td>\n",
       "      <td>-0.914938</td>\n",
       "      <td>-0.914938</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.868747</td>\n",
       "      <td>-0.868747</td>\n",
       "      <td>-0.868747</td>\n",
       "      <td>-0.868747</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.170732</td>\n",
       "      <td>-0.170732</td>\n",
       "      <td>-0.170732</td>\n",
       "      <td>-0.170732</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.704142</td>\n",
       "      <td>-0.704142</td>\n",
       "      <td>-0.704142</td>\n",
       "      <td>-0.704142</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.779310</td>\n",
       "      <td>-0.779310</td>\n",
       "      <td>-0.779310</td>\n",
       "      <td>-0.779310</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.754601</td>\n",
       "      <td>-0.754601</td>\n",
       "      <td>-0.754601</td>\n",
       "      <td>-0.754601</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.875236</td>\n",
       "      <td>-0.875236</td>\n",
       "      <td>-0.875236</td>\n",
       "      <td>-0.875236</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.234043</td>\n",
       "      <td>0.234043</td>\n",
       "      <td>0.234043</td>\n",
       "      <td>0.234043</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.540721</td>\n",
       "      <td>-0.540721</td>\n",
       "      <td>-0.540721</td>\n",
       "      <td>-0.540721</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.518519</td>\n",
       "      <td>-0.518519</td>\n",
       "      <td>-0.518519</td>\n",
       "      <td>-0.518519</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.939394</td>\n",
       "      <td>0.939394</td>\n",
       "      <td>0.939394</td>\n",
       "      <td>0.939394</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.345679</td>\n",
       "      <td>0.345679</td>\n",
       "      <td>0.345679</td>\n",
       "      <td>0.345679</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.028571</td>\n",
       "      <td>-0.028571</td>\n",
       "      <td>-0.028571</td>\n",
       "      <td>-0.028571</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.997201</td>\n",
       "      <td>-0.997201</td>\n",
       "      <td>-0.997201</td>\n",
       "      <td>-0.997201</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.990854</td>\n",
       "      <td>-0.990854</td>\n",
       "      <td>-0.990854</td>\n",
       "      <td>-0.990854</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.825613</td>\n",
       "      <td>-0.825613</td>\n",
       "      <td>-0.825613</td>\n",
       "      <td>-0.825613</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.836145</td>\n",
       "      <td>-0.836145</td>\n",
       "      <td>-0.836145</td>\n",
       "      <td>-0.836145</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.994912</td>\n",
       "      <td>-0.994912</td>\n",
       "      <td>-0.994912</td>\n",
       "      <td>-0.994912</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4-6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>60th</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.107143</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.107143</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.318681</td>\n",
       "      <td>0.898990</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.275362</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>6-12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>60th</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.871658</td>\n",
       "      <td>-0.871658</td>\n",
       "      <td>-0.871658</td>\n",
       "      <td>-0.871658</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.863874</td>\n",
       "      <td>-0.863874</td>\n",
       "      <td>-0.863874</td>\n",
       "      <td>-0.863874</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-0.317073</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.414634</td>\n",
       "      <td>-0.414634</td>\n",
       "      <td>-0.414634</td>\n",
       "      <td>-0.414634</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.979069</td>\n",
       "      <td>-0.979069</td>\n",
       "      <td>-0.979069</td>\n",
       "      <td>-0.979069</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.326531</td>\n",
       "      <td>0.326531</td>\n",
       "      <td>0.326531</td>\n",
       "      <td>0.326531</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.926398</td>\n",
       "      <td>-0.926398</td>\n",
       "      <td>-0.926398</td>\n",
       "      <td>-0.926398</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.859275</td>\n",
       "      <td>-0.859275</td>\n",
       "      <td>-0.859275</td>\n",
       "      <td>-0.859275</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.669393</td>\n",
       "      <td>-0.669393</td>\n",
       "      <td>-0.669393</td>\n",
       "      <td>-0.669393</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.891993</td>\n",
       "      <td>-0.891993</td>\n",
       "      <td>-0.891993</td>\n",
       "      <td>-0.891993</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.320755</td>\n",
       "      <td>-0.320755</td>\n",
       "      <td>-0.320755</td>\n",
       "      <td>-0.320755</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.353659</td>\n",
       "      <td>-0.353659</td>\n",
       "      <td>-0.353659</td>\n",
       "      <td>-0.353659</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.979925</td>\n",
       "      <td>-0.979925</td>\n",
       "      <td>-0.979925</td>\n",
       "      <td>-0.979925</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.963023</td>\n",
       "      <td>-0.963023</td>\n",
       "      <td>-0.963023</td>\n",
       "      <td>-0.963023</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.762843</td>\n",
       "      <td>-0.762843</td>\n",
       "      <td>-0.762843</td>\n",
       "      <td>-0.762843</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.643154</td>\n",
       "      <td>-0.643154</td>\n",
       "      <td>-0.643154</td>\n",
       "      <td>-0.643154</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.868747</td>\n",
       "      <td>-0.868747</td>\n",
       "      <td>-0.868747</td>\n",
       "      <td>-0.868747</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.365854</td>\n",
       "      <td>-0.365854</td>\n",
       "      <td>-0.365854</td>\n",
       "      <td>-0.365854</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.230769</td>\n",
       "      <td>-0.230769</td>\n",
       "      <td>-0.230769</td>\n",
       "      <td>-0.230769</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.875862</td>\n",
       "      <td>-0.875862</td>\n",
       "      <td>-0.875862</td>\n",
       "      <td>-0.875862</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.815951</td>\n",
       "      <td>-0.815951</td>\n",
       "      <td>-0.815951</td>\n",
       "      <td>-0.815951</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.574468</td>\n",
       "      <td>0.574468</td>\n",
       "      <td>0.574468</td>\n",
       "      <td>0.574468</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.393939</td>\n",
       "      <td>0.393939</td>\n",
       "      <td>0.393939</td>\n",
       "      <td>0.393939</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.471295</td>\n",
       "      <td>-0.471295</td>\n",
       "      <td>-0.471295</td>\n",
       "      <td>-0.471295</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.666667</td>\n",
       "      <td>-0.666667</td>\n",
       "      <td>-0.666667</td>\n",
       "      <td>-0.666667</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.848485</td>\n",
       "      <td>0.848485</td>\n",
       "      <td>0.848485</td>\n",
       "      <td>0.848485</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.925926</td>\n",
       "      <td>0.925926</td>\n",
       "      <td>0.925926</td>\n",
       "      <td>0.925926</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.999067</td>\n",
       "      <td>-0.999067</td>\n",
       "      <td>-0.999067</td>\n",
       "      <td>-0.999067</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.983994</td>\n",
       "      <td>-0.983994</td>\n",
       "      <td>-0.983994</td>\n",
       "      <td>-0.983994</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.846633</td>\n",
       "      <td>-0.846633</td>\n",
       "      <td>-0.846633</td>\n",
       "      <td>-0.846633</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.836145</td>\n",
       "      <td>-0.836145</td>\n",
       "      <td>-0.836145</td>\n",
       "      <td>-0.836145</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.996762</td>\n",
       "      <td>-0.996762</td>\n",
       "      <td>-0.996762</td>\n",
       "      <td>-0.996762</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.243021</td>\n",
       "      <td>-0.338537</td>\n",
       "      <td>-0.213031</td>\n",
       "      <td>-0.317859</td>\n",
       "      <td>0.033779</td>\n",
       "      <td>0.665932</td>\n",
       "      <td>-0.283951</td>\n",
       "      <td>-0.376923</td>\n",
       "      <td>-0.188679</td>\n",
       "      <td>-0.379310</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.631579</td>\n",
       "      <td>-0.340206</td>\n",
       "      <td>-0.4875</td>\n",
       "      <td>-0.572650</td>\n",
       "      <td>-0.857143</td>\n",
       "      <td>0.098901</td>\n",
       "      <td>0.797980</td>\n",
       "      <td>-0.076923</td>\n",
       "      <td>0.286486</td>\n",
       "      <td>0.298507</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.362319</td>\n",
       "      <td>0.947368</td>\n",
       "      <td>-0.33913</td>\n",
       "      <td>0.325153</td>\n",
       "      <td>0.114504</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>-0.238095</td>\n",
       "      <td>-0.818182</td>\n",
       "      <td>-0.389967</td>\n",
       "      <td>0.407558</td>\n",
       "      <td>-0.230462</td>\n",
       "      <td>0.096774</td>\n",
       "      <td>-0.242282</td>\n",
       "      <td>-0.814433</td>\n",
       "      <td>ABOVE_12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PATIENT_VISIT_IDENTIFIER  AGE_ABOVE65 AGE_PERCENTIL  GENDER  \\\n",
       "0                         0            1          60th       0   \n",
       "1                         0            1          60th       0   \n",
       "2                         0            1          60th       0   \n",
       "3                         0            1          60th       0   \n",
       "4                         0            1          60th       0   \n",
       "\n",
       "   DISEASE GROUPING 1  DISEASE GROUPING 2  DISEASE GROUPING 3  \\\n",
       "0                 0.0                 0.0                 0.0   \n",
       "1                 0.0                 0.0                 0.0   \n",
       "2                 0.0                 0.0                 0.0   \n",
       "3                 0.0                 0.0                 0.0   \n",
       "4                 0.0                 0.0                 0.0   \n",
       "\n",
       "   DISEASE GROUPING 4  DISEASE GROUPING 5  DISEASE GROUPING 6  HTN  \\\n",
       "0                 0.0                 1.0                 1.0  0.0   \n",
       "1                 0.0                 1.0                 1.0  0.0   \n",
       "2                 0.0                 1.0                 1.0  0.0   \n",
       "3                 0.0                 1.0                 1.0  0.0   \n",
       "4                 0.0                 1.0                 1.0  0.0   \n",
       "\n",
       "   IMMUNOCOMPROMISED  OTHER  ALBUMIN_MEDIAN  ALBUMIN_MEAN  ALBUMIN_MIN  \\\n",
       "0                0.0    1.0             NaN           NaN          NaN   \n",
       "1                0.0    1.0             NaN           NaN          NaN   \n",
       "2                0.0    1.0        0.605263      0.605263     0.605263   \n",
       "3                0.0    1.0             NaN           NaN          NaN   \n",
       "4                0.0    1.0        0.000000      0.000000     0.000000   \n",
       "\n",
       "   ALBUMIN_MAX  ALBUMIN_DIFF  BE_ARTERIAL_MEDIAN  BE_ARTERIAL_MEAN  \\\n",
       "0          NaN           NaN                 NaN               NaN   \n",
       "1          NaN           NaN                 NaN               NaN   \n",
       "2     0.605263          -1.0           -1.000000         -1.000000   \n",
       "3          NaN           NaN                 NaN               NaN   \n",
       "4     0.000000          -1.0           -0.871658         -0.871658   \n",
       "\n",
       "   BE_ARTERIAL_MIN  BE_ARTERIAL_MAX  BE_ARTERIAL_DIFF  BE_VENOUS_MEDIAN  \\\n",
       "0              NaN              NaN               NaN               NaN   \n",
       "1              NaN              NaN               NaN               NaN   \n",
       "2        -1.000000        -1.000000              -1.0         -1.000000   \n",
       "3              NaN              NaN               NaN               NaN   \n",
       "4        -0.871658        -0.871658              -1.0         -0.863874   \n",
       "\n",
       "   BE_VENOUS_MEAN  BE_VENOUS_MIN  BE_VENOUS_MAX  BE_VENOUS_DIFF  \\\n",
       "0             NaN            NaN            NaN             NaN   \n",
       "1             NaN            NaN            NaN             NaN   \n",
       "2       -1.000000      -1.000000      -1.000000            -1.0   \n",
       "3             NaN            NaN            NaN             NaN   \n",
       "4       -0.863874      -0.863874      -0.863874            -1.0   \n",
       "\n",
       "   BIC_ARTERIAL_MEDIAN  BIC_ARTERIAL_MEAN  BIC_ARTERIAL_MIN  BIC_ARTERIAL_MAX  \\\n",
       "0                  NaN                NaN               NaN               NaN   \n",
       "1                  NaN                NaN               NaN               NaN   \n",
       "2            -0.317073          -0.317073         -0.317073         -0.317073   \n",
       "3                  NaN                NaN               NaN               NaN   \n",
       "4            -0.317073          -0.317073         -0.317073         -0.317073   \n",
       "\n",
       "   BIC_ARTERIAL_DIFF  BIC_VENOUS_MEDIAN  BIC_VENOUS_MEAN  BIC_VENOUS_MIN  \\\n",
       "0                NaN                NaN              NaN             NaN   \n",
       "1                NaN                NaN              NaN             NaN   \n",
       "2               -1.0          -0.317073        -0.317073       -0.317073   \n",
       "3                NaN                NaN              NaN             NaN   \n",
       "4               -1.0          -0.414634        -0.414634       -0.414634   \n",
       "\n",
       "   BIC_VENOUS_MAX  BIC_VENOUS_DIFF  BILLIRUBIN_MEDIAN  BILLIRUBIN_MEAN  \\\n",
       "0             NaN              NaN                NaN              NaN   \n",
       "1             NaN              NaN                NaN              NaN   \n",
       "2       -0.317073             -1.0          -0.938950        -0.938950   \n",
       "3             NaN              NaN                NaN              NaN   \n",
       "4       -0.414634             -1.0          -0.979069        -0.979069   \n",
       "\n",
       "   BILLIRUBIN_MIN  BILLIRUBIN_MAX  BILLIRUBIN_DIFF  BLAST_MEDIAN  BLAST_MEAN  \\\n",
       "0             NaN             NaN              NaN           NaN         NaN   \n",
       "1             NaN             NaN              NaN           NaN         NaN   \n",
       "2       -0.938950       -0.938950             -1.0          -1.0        -1.0   \n",
       "3             NaN             NaN              NaN           NaN         NaN   \n",
       "4       -0.979069       -0.979069             -1.0          -1.0        -1.0   \n",
       "\n",
       "   BLAST_MIN  BLAST_MAX  BLAST_DIFF  CALCIUM_MEDIAN  CALCIUM_MEAN  \\\n",
       "0        NaN        NaN         NaN             NaN           NaN   \n",
       "1        NaN        NaN         NaN             NaN           NaN   \n",
       "2       -1.0       -1.0        -1.0        0.183673      0.183673   \n",
       "3        NaN        NaN         NaN             NaN           NaN   \n",
       "4       -1.0       -1.0        -1.0        0.326531      0.326531   \n",
       "\n",
       "   CALCIUM_MIN  CALCIUM_MAX  CALCIUM_DIFF  CREATININ_MEDIAN  CREATININ_MEAN  \\\n",
       "0          NaN          NaN           NaN               NaN             NaN   \n",
       "1          NaN          NaN           NaN               NaN             NaN   \n",
       "2     0.183673     0.183673          -1.0         -0.868365       -0.868365   \n",
       "3          NaN          NaN           NaN               NaN             NaN   \n",
       "4     0.326531     0.326531          -1.0         -0.926398       -0.926398   \n",
       "\n",
       "   CREATININ_MIN  CREATININ_MAX  CREATININ_DIFF  FFA_MEDIAN  FFA_MEAN  \\\n",
       "0            NaN            NaN             NaN         NaN       NaN   \n",
       "1            NaN            NaN             NaN         NaN       NaN   \n",
       "2      -0.868365      -0.868365            -1.0   -0.742004 -0.742004   \n",
       "3            NaN            NaN             NaN         NaN       NaN   \n",
       "4      -0.926398      -0.926398            -1.0   -0.859275 -0.859275   \n",
       "\n",
       "    FFA_MIN   FFA_MAX  FFA_DIFF  GGT_MEDIAN  GGT_MEAN   GGT_MIN   GGT_MAX  \\\n",
       "0       NaN       NaN       NaN         NaN       NaN       NaN       NaN   \n",
       "1       NaN       NaN       NaN         NaN       NaN       NaN       NaN   \n",
       "2 -0.742004 -0.742004      -1.0   -0.945093 -0.945093 -0.945093 -0.945093   \n",
       "3       NaN       NaN       NaN         NaN       NaN       NaN       NaN   \n",
       "4 -0.859275 -0.859275      -1.0   -0.669393 -0.669393 -0.669393 -0.669393   \n",
       "\n",
       "   GGT_DIFF  GLUCOSE_MEDIAN  GLUCOSE_MEAN  GLUCOSE_MIN  GLUCOSE_MAX  \\\n",
       "0       NaN             NaN           NaN          NaN          NaN   \n",
       "1       NaN             NaN           NaN          NaN          NaN   \n",
       "2      -1.0       -0.891993     -0.891993    -0.891993    -0.891993   \n",
       "3       NaN             NaN           NaN          NaN          NaN   \n",
       "4      -1.0       -0.891993     -0.891993    -0.891993    -0.891993   \n",
       "\n",
       "   GLUCOSE_DIFF  HEMATOCRITE_MEDIAN  HEMATOCRITE_MEAN  HEMATOCRITE_MIN  \\\n",
       "0           NaN                 NaN               NaN              NaN   \n",
       "1           NaN                 NaN               NaN              NaN   \n",
       "2          -1.0            0.090147          0.090147         0.090147   \n",
       "3           NaN                 NaN               NaN              NaN   \n",
       "4          -1.0           -0.320755         -0.320755        -0.320755   \n",
       "\n",
       "   HEMATOCRITE_MAX  HEMATOCRITE_DIFF  HEMOGLOBIN_MEDIAN  HEMOGLOBIN_MEAN  \\\n",
       "0              NaN               NaN                NaN              NaN   \n",
       "1              NaN               NaN                NaN              NaN   \n",
       "2         0.090147              -1.0           0.109756         0.109756   \n",
       "3              NaN               NaN                NaN              NaN   \n",
       "4        -0.320755              -1.0          -0.353659        -0.353659   \n",
       "\n",
       "   HEMOGLOBIN_MIN  HEMOGLOBIN_MAX  HEMOGLOBIN_DIFF  INR_MEDIAN  INR_MEAN  \\\n",
       "0             NaN             NaN              NaN         NaN       NaN   \n",
       "1             NaN             NaN              NaN         NaN       NaN   \n",
       "2        0.109756        0.109756             -1.0   -0.932246 -0.932246   \n",
       "3             NaN             NaN              NaN         NaN       NaN   \n",
       "4       -0.353659       -0.353659             -1.0   -0.979925 -0.979925   \n",
       "\n",
       "    INR_MIN   INR_MAX  INR_DIFF  LACTATE_MEDIAN  LACTATE_MEAN  LACTATE_MIN  \\\n",
       "0       NaN       NaN       NaN             NaN           NaN          NaN   \n",
       "1       NaN       NaN       NaN             NaN           NaN          NaN   \n",
       "2 -0.932246 -0.932246      -1.0        1.000000      1.000000     1.000000   \n",
       "3       NaN       NaN       NaN             NaN           NaN          NaN   \n",
       "4 -0.979925 -0.979925      -1.0       -0.963023     -0.963023    -0.963023   \n",
       "\n",
       "   LACTATE_MAX  LACTATE_DIFF  LEUKOCYTES_MEDIAN  LEUKOCYTES_MEAN  \\\n",
       "0          NaN           NaN                NaN              NaN   \n",
       "1          NaN           NaN                NaN              NaN   \n",
       "2     1.000000          -1.0          -0.835844        -0.835844   \n",
       "3          NaN           NaN                NaN              NaN   \n",
       "4    -0.963023          -1.0          -0.762843        -0.762843   \n",
       "\n",
       "   LEUKOCYTES_MIN  LEUKOCYTES_MAX  LEUKOCYTES_DIFF  LINFOCITOS_MEDIAN  \\\n",
       "0             NaN             NaN              NaN                NaN   \n",
       "1             NaN             NaN              NaN                NaN   \n",
       "2       -0.835844       -0.835844             -1.0          -0.914938   \n",
       "3             NaN             NaN              NaN                NaN   \n",
       "4       -0.762843       -0.762843             -1.0          -0.643154   \n",
       "\n",
       "   LINFOCITOS_MEAN  LINFOCITOS_MIN  LINFOCITOS_MAX  LINFOCITOS_DIFF  \\\n",
       "0              NaN             NaN             NaN              NaN   \n",
       "1              NaN             NaN             NaN              NaN   \n",
       "2        -0.914938       -0.914938       -0.914938             -1.0   \n",
       "3              NaN             NaN             NaN              NaN   \n",
       "4        -0.643154       -0.643154       -0.643154             -1.0   \n",
       "\n",
       "   NEUTROPHILES_MEDIAN  NEUTROPHILES_MEAN  NEUTROPHILES_MIN  NEUTROPHILES_MAX  \\\n",
       "0                  NaN                NaN               NaN               NaN   \n",
       "1                  NaN                NaN               NaN               NaN   \n",
       "2            -0.868747          -0.868747         -0.868747         -0.868747   \n",
       "3                  NaN                NaN               NaN               NaN   \n",
       "4            -0.868747          -0.868747         -0.868747         -0.868747   \n",
       "\n",
       "   NEUTROPHILES_DIFF  P02_ARTERIAL_MEDIAN  P02_ARTERIAL_MEAN  \\\n",
       "0                NaN                  NaN                NaN   \n",
       "1                NaN                  NaN                NaN   \n",
       "2               -1.0            -0.170732          -0.170732   \n",
       "3                NaN                  NaN                NaN   \n",
       "4               -1.0            -0.365854          -0.365854   \n",
       "\n",
       "   P02_ARTERIAL_MIN  P02_ARTERIAL_MAX  P02_ARTERIAL_DIFF  P02_VENOUS_MEDIAN  \\\n",
       "0               NaN               NaN                NaN                NaN   \n",
       "1               NaN               NaN                NaN                NaN   \n",
       "2         -0.170732         -0.170732               -1.0          -0.704142   \n",
       "3               NaN               NaN                NaN                NaN   \n",
       "4         -0.365854         -0.365854               -1.0          -0.230769   \n",
       "\n",
       "   P02_VENOUS_MEAN  P02_VENOUS_MIN  P02_VENOUS_MAX  P02_VENOUS_DIFF  \\\n",
       "0              NaN             NaN             NaN              NaN   \n",
       "1              NaN             NaN             NaN              NaN   \n",
       "2        -0.704142       -0.704142       -0.704142             -1.0   \n",
       "3              NaN             NaN             NaN              NaN   \n",
       "4        -0.230769       -0.230769       -0.230769             -1.0   \n",
       "\n",
       "   PC02_ARTERIAL_MEDIAN  PC02_ARTERIAL_MEAN  PC02_ARTERIAL_MIN  \\\n",
       "0                   NaN                 NaN                NaN   \n",
       "1                   NaN                 NaN                NaN   \n",
       "2             -0.779310           -0.779310          -0.779310   \n",
       "3                   NaN                 NaN                NaN   \n",
       "4             -0.875862           -0.875862          -0.875862   \n",
       "\n",
       "   PC02_ARTERIAL_MAX  PC02_ARTERIAL_DIFF  PC02_VENOUS_MEDIAN  \\\n",
       "0                NaN                 NaN                 NaN   \n",
       "1                NaN                 NaN                 NaN   \n",
       "2          -0.779310                -1.0           -0.754601   \n",
       "3                NaN                 NaN                 NaN   \n",
       "4          -0.875862                -1.0           -0.815951   \n",
       "\n",
       "   PC02_VENOUS_MEAN  PC02_VENOUS_MIN  PC02_VENOUS_MAX  PC02_VENOUS_DIFF  \\\n",
       "0               NaN              NaN              NaN               NaN   \n",
       "1               NaN              NaN              NaN               NaN   \n",
       "2         -0.754601        -0.754601        -0.754601              -1.0   \n",
       "3               NaN              NaN              NaN               NaN   \n",
       "4         -0.815951        -0.815951        -0.815951              -1.0   \n",
       "\n",
       "   PCR_MEDIAN  PCR_MEAN   PCR_MIN   PCR_MAX  PCR_DIFF  PH_ARTERIAL_MEDIAN  \\\n",
       "0         NaN       NaN       NaN       NaN       NaN                 NaN   \n",
       "1         NaN       NaN       NaN       NaN       NaN                 NaN   \n",
       "2   -0.875236 -0.875236 -0.875236 -0.875236      -1.0            0.234043   \n",
       "3         NaN       NaN       NaN       NaN       NaN                 NaN   \n",
       "4   -1.000000 -1.000000 -1.000000 -1.000000      -1.0            0.574468   \n",
       "\n",
       "   PH_ARTERIAL_MEAN  PH_ARTERIAL_MIN  PH_ARTERIAL_MAX  PH_ARTERIAL_DIFF  \\\n",
       "0               NaN              NaN              NaN               NaN   \n",
       "1               NaN              NaN              NaN               NaN   \n",
       "2          0.234043         0.234043         0.234043              -1.0   \n",
       "3               NaN              NaN              NaN               NaN   \n",
       "4          0.574468         0.574468         0.574468              -1.0   \n",
       "\n",
       "   PH_VENOUS_MEDIAN  PH_VENOUS_MEAN  PH_VENOUS_MIN  PH_VENOUS_MAX  \\\n",
       "0               NaN             NaN            NaN            NaN   \n",
       "1               NaN             NaN            NaN            NaN   \n",
       "2          0.363636        0.363636       0.363636       0.363636   \n",
       "3               NaN             NaN            NaN            NaN   \n",
       "4          0.393939        0.393939       0.393939       0.393939   \n",
       "\n",
       "   PH_VENOUS_DIFF  PLATELETS_MEDIAN  PLATELETS_MEAN  PLATELETS_MIN  \\\n",
       "0             NaN               NaN             NaN            NaN   \n",
       "1             NaN               NaN             NaN            NaN   \n",
       "2            -1.0         -0.540721       -0.540721      -0.540721   \n",
       "3             NaN               NaN             NaN            NaN   \n",
       "4            -1.0         -0.471295       -0.471295      -0.471295   \n",
       "\n",
       "   PLATELETS_MAX  PLATELETS_DIFF  POTASSIUM_MEDIAN  POTASSIUM_MEAN  \\\n",
       "0            NaN             NaN               NaN             NaN   \n",
       "1            NaN             NaN               NaN             NaN   \n",
       "2      -0.540721            -1.0         -0.518519       -0.518519   \n",
       "3            NaN             NaN               NaN             NaN   \n",
       "4      -0.471295            -1.0         -0.666667       -0.666667   \n",
       "\n",
       "   POTASSIUM_MIN  POTASSIUM_MAX  POTASSIUM_DIFF  SAT02_ARTERIAL_MEDIAN  \\\n",
       "0            NaN            NaN             NaN                    NaN   \n",
       "1            NaN            NaN             NaN                    NaN   \n",
       "2      -0.518519      -0.518519            -1.0               0.939394   \n",
       "3            NaN            NaN             NaN                    NaN   \n",
       "4      -0.666667      -0.666667            -1.0               0.848485   \n",
       "\n",
       "   SAT02_ARTERIAL_MEAN  SAT02_ARTERIAL_MIN  SAT02_ARTERIAL_MAX  \\\n",
       "0                  NaN                 NaN                 NaN   \n",
       "1                  NaN                 NaN                 NaN   \n",
       "2             0.939394            0.939394            0.939394   \n",
       "3                  NaN                 NaN                 NaN   \n",
       "4             0.848485            0.848485            0.848485   \n",
       "\n",
       "   SAT02_ARTERIAL_DIFF  SAT02_VENOUS_MEDIAN  SAT02_VENOUS_MEAN  \\\n",
       "0                  NaN                  NaN                NaN   \n",
       "1                  NaN                  NaN                NaN   \n",
       "2                 -1.0             0.345679           0.345679   \n",
       "3                  NaN                  NaN                NaN   \n",
       "4                 -1.0             0.925926           0.925926   \n",
       "\n",
       "   SAT02_VENOUS_MIN  SAT02_VENOUS_MAX  SAT02_VENOUS_DIFF  SODIUM_MEDIAN  \\\n",
       "0               NaN               NaN                NaN            NaN   \n",
       "1               NaN               NaN                NaN            NaN   \n",
       "2          0.345679          0.345679               -1.0      -0.028571   \n",
       "3               NaN               NaN                NaN            NaN   \n",
       "4          0.925926          0.925926               -1.0       0.142857   \n",
       "\n",
       "   SODIUM_MEAN  SODIUM_MIN  SODIUM_MAX  SODIUM_DIFF  TGO_MEDIAN  TGO_MEAN  \\\n",
       "0          NaN         NaN         NaN          NaN         NaN       NaN   \n",
       "1          NaN         NaN         NaN          NaN         NaN       NaN   \n",
       "2    -0.028571   -0.028571   -0.028571         -1.0   -0.997201 -0.997201   \n",
       "3          NaN         NaN         NaN          NaN         NaN       NaN   \n",
       "4     0.142857    0.142857    0.142857         -1.0   -0.999067 -0.999067   \n",
       "\n",
       "    TGO_MIN   TGO_MAX  TGO_DIFF  TGP_MEDIAN  TGP_MEAN   TGP_MIN   TGP_MAX  \\\n",
       "0       NaN       NaN       NaN         NaN       NaN       NaN       NaN   \n",
       "1       NaN       NaN       NaN         NaN       NaN       NaN       NaN   \n",
       "2 -0.997201 -0.997201      -1.0   -0.990854 -0.990854 -0.990854 -0.990854   \n",
       "3       NaN       NaN       NaN         NaN       NaN       NaN       NaN   \n",
       "4 -0.999067 -0.999067      -1.0   -0.983994 -0.983994 -0.983994 -0.983994   \n",
       "\n",
       "   TGP_DIFF  TTPA_MEDIAN  TTPA_MEAN  TTPA_MIN  TTPA_MAX  TTPA_DIFF  \\\n",
       "0       NaN          NaN        NaN       NaN       NaN        NaN   \n",
       "1       NaN          NaN        NaN       NaN       NaN        NaN   \n",
       "2      -1.0    -0.825613  -0.825613 -0.825613 -0.825613       -1.0   \n",
       "3       NaN          NaN        NaN       NaN       NaN        NaN   \n",
       "4      -1.0    -0.846633  -0.846633 -0.846633 -0.846633       -1.0   \n",
       "\n",
       "   UREA_MEDIAN  UREA_MEAN  UREA_MIN  UREA_MAX  UREA_DIFF  DIMER_MEDIAN  \\\n",
       "0          NaN        NaN       NaN       NaN        NaN           NaN   \n",
       "1          NaN        NaN       NaN       NaN        NaN           NaN   \n",
       "2    -0.836145  -0.836145 -0.836145 -0.836145       -1.0     -0.994912   \n",
       "3          NaN        NaN       NaN       NaN        NaN           NaN   \n",
       "4    -0.836145  -0.836145 -0.836145 -0.836145       -1.0     -0.996762   \n",
       "\n",
       "   DIMER_MEAN  DIMER_MIN  DIMER_MAX  DIMER_DIFF  BLOODPRESSURE_DIASTOLIC_MEAN  \\\n",
       "0         NaN        NaN        NaN         NaN                      0.086420   \n",
       "1         NaN        NaN        NaN         NaN                      0.333333   \n",
       "2   -0.994912  -0.994912  -0.994912        -1.0                           NaN   \n",
       "3         NaN        NaN        NaN         NaN                           NaN   \n",
       "4   -0.996762  -0.996762  -0.996762        -1.0                     -0.243021   \n",
       "\n",
       "   BLOODPRESSURE_SISTOLIC_MEAN  HEART_RATE_MEAN  RESPIRATORY_RATE_MEAN  \\\n",
       "0                    -0.230769        -0.283019              -0.593220   \n",
       "1                    -0.230769        -0.132075              -0.593220   \n",
       "2                          NaN              NaN                    NaN   \n",
       "3                          NaN              NaN                    NaN   \n",
       "4                    -0.338537        -0.213031              -0.317859   \n",
       "\n",
       "   TEMPERATURE_MEAN  OXYGEN_SATURATION_MEAN  BLOODPRESSURE_DIASTOLIC_MEDIAN  \\\n",
       "0         -0.285714                0.736842                        0.086420   \n",
       "1          0.535714                0.578947                        0.333333   \n",
       "2               NaN                     NaN                             NaN   \n",
       "3         -0.107143                0.736842                             NaN   \n",
       "4          0.033779                0.665932                       -0.283951   \n",
       "\n",
       "   BLOODPRESSURE_SISTOLIC_MEDIAN  HEART_RATE_MEDIAN  RESPIRATORY_RATE_MEDIAN  \\\n",
       "0                      -0.230769          -0.283019                -0.586207   \n",
       "1                      -0.230769          -0.132075                -0.586207   \n",
       "2                            NaN                NaN                      NaN   \n",
       "3                            NaN                NaN                      NaN   \n",
       "4                      -0.376923          -0.188679                -0.379310   \n",
       "\n",
       "   TEMPERATURE_MEDIAN  OXYGEN_SATURATION_MEDIAN  BLOODPRESSURE_DIASTOLIC_MIN  \\\n",
       "0           -0.285714                  0.736842                     0.237113   \n",
       "1            0.535714                  0.578947                     0.443299   \n",
       "2                 NaN                       NaN                          NaN   \n",
       "3           -0.107143                  0.736842                          NaN   \n",
       "4            0.035714                  0.631579                    -0.340206   \n",
       "\n",
       "   BLOODPRESSURE_SISTOLIC_MIN  HEART_RATE_MIN  RESPIRATORY_RATE_MIN  \\\n",
       "0                      0.0000       -0.162393             -0.500000   \n",
       "1                      0.0000       -0.025641             -0.500000   \n",
       "2                         NaN             NaN                   NaN   \n",
       "3                         NaN             NaN                   NaN   \n",
       "4                     -0.4875       -0.572650             -0.857143   \n",
       "\n",
       "   TEMPERATURE_MIN  OXYGEN_SATURATION_MIN  BLOODPRESSURE_DIASTOLIC_MAX  \\\n",
       "0         0.208791               0.898990                    -0.247863   \n",
       "1         0.714286               0.838384                    -0.076923   \n",
       "2              NaN                    NaN                          NaN   \n",
       "3         0.318681               0.898990                          NaN   \n",
       "4         0.098901               0.797980                    -0.076923   \n",
       "\n",
       "   BLOODPRESSURE_SISTOLIC_MAX  HEART_RATE_MAX  RESPIRATORY_RATE_MAX  \\\n",
       "0                   -0.459459       -0.432836             -0.636364   \n",
       "1                   -0.459459       -0.313433             -0.636364   \n",
       "2                         NaN             NaN                   NaN   \n",
       "3                         NaN             NaN                   NaN   \n",
       "4                    0.286486        0.298507              0.272727   \n",
       "\n",
       "   TEMPERATURE_MAX  OXYGEN_SATURATION_MAX  BLOODPRESSURE_DIASTOLIC_DIFF  \\\n",
       "0        -0.420290               0.736842                      -1.00000   \n",
       "1         0.246377               0.578947                      -1.00000   \n",
       "2              NaN                    NaN                           NaN   \n",
       "3        -0.275362               0.736842                           NaN   \n",
       "4         0.362319               0.947368                      -0.33913   \n",
       "\n",
       "   BLOODPRESSURE_SISTOLIC_DIFF  HEART_RATE_DIFF  RESPIRATORY_RATE_DIFF  \\\n",
       "0                    -1.000000        -1.000000              -1.000000   \n",
       "1                    -1.000000        -1.000000              -1.000000   \n",
       "2                          NaN              NaN                    NaN   \n",
       "3                          NaN              NaN                    NaN   \n",
       "4                     0.325153         0.114504               0.176471   \n",
       "\n",
       "   TEMPERATURE_DIFF  OXYGEN_SATURATION_DIFF  BLOODPRESSURE_DIASTOLIC_DIFF_REL  \\\n",
       "0         -1.000000               -1.000000                         -1.000000   \n",
       "1         -1.000000               -1.000000                         -1.000000   \n",
       "2               NaN                     NaN                               NaN   \n",
       "3         -1.000000               -1.000000                               NaN   \n",
       "4         -0.238095               -0.818182                         -0.389967   \n",
       "\n",
       "   BLOODPRESSURE_SISTOLIC_DIFF_REL  HEART_RATE_DIFF_REL  \\\n",
       "0                        -1.000000            -1.000000   \n",
       "1                        -1.000000            -1.000000   \n",
       "2                              NaN                  NaN   \n",
       "3                              NaN                  NaN   \n",
       "4                         0.407558            -0.230462   \n",
       "\n",
       "   RESPIRATORY_RATE_DIFF_REL  TEMPERATURE_DIFF_REL  \\\n",
       "0                  -1.000000             -1.000000   \n",
       "1                  -1.000000             -1.000000   \n",
       "2                        NaN                   NaN   \n",
       "3                        NaN             -1.000000   \n",
       "4                   0.096774             -0.242282   \n",
       "\n",
       "   OXYGEN_SATURATION_DIFF_REL    WINDOW  ICU  \n",
       "0                   -1.000000       0-2    0  \n",
       "1                   -1.000000       2-4    0  \n",
       "2                         NaN       4-6    0  \n",
       "3                   -1.000000      6-12    0  \n",
       "4                   -0.814433  ABOVE_12    1  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.max_columns', None)\n",
    "df = pd.read_excel(\"/kaggle/input/covid19/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:45.095190Z",
     "iopub.status.busy": "2021-03-11T23:17:45.094539Z",
     "iopub.status.idle": "2021-03-11T23:17:45.100759Z",
     "shell.execute_reply": "2021-03-11T23:17:45.100094Z"
    },
    "papermill": {
     "duration": 0.093029,
     "end_time": "2021-03-11T23:17:45.100913",
     "exception": false,
     "start_time": "2021-03-11T23:17:45.007884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_raw = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:45.270779Z",
     "iopub.status.busy": "2021-03-11T23:17:45.270057Z",
     "iopub.status.idle": "2021-03-11T23:17:45.369240Z",
     "shell.execute_reply": "2021-03-11T23:17:45.368489Z"
    },
    "papermill": {
     "duration": 0.187076,
     "end_time": "2021-03-11T23:17:45.369421",
     "exception": false,
     "start_time": "2021-03-11T23:17:45.182345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Adding new features based on features used by hospital\n",
    "\n",
    "df_raw[\"BLOODPRESSURE_ARTERIAL_MEAN\"] = (df_raw['BLOODPRESSURE_SISTOLIC_MEAN'] + 2*df_raw['BLOODPRESSURE_DIASTOLIC_MEAN'])/3\n",
    " \n",
    "df_raw[\"NEUTROPHILES/LINFOCITOS\"] = df_raw['NEUTROPHILES_MEAN']/df_raw['LINFOCITOS_MEAN']\n",
    "\n",
    "df_raw[\"GASO\"] = df_raw.groupby(\"PATIENT_VISIT_IDENTIFIER\").P02_ARTERIAL_MEAN.apply(lambda x: x.fillna(method='ffill'))\n",
    "df_raw[\"GASO\"] = (~df_raw[\"GASO\"].isna()).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:45.538781Z",
     "iopub.status.busy": "2021-03-11T23:17:45.537778Z",
     "iopub.status.idle": "2021-03-11T23:17:45.544174Z",
     "shell.execute_reply": "2021-03-11T23:17:45.543662Z"
    },
    "papermill": {
     "duration": 0.092945,
     "end_time": "2021-03-11T23:17:45.544340",
     "exception": false,
     "start_time": "2021-03-11T23:17:45.451395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1925, 234)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:45.712538Z",
     "iopub.status.busy": "2021-03-11T23:17:45.711902Z",
     "iopub.status.idle": "2021-03-11T23:17:46.583784Z",
     "shell.execute_reply": "2021-03-11T23:17:46.583109Z"
    },
    "papermill": {
     "duration": 0.957019,
     "end_time": "2021-03-11T23:17:46.583945",
     "exception": false,
     "start_time": "2021-03-11T23:17:45.626926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "missingno.matrix(df_raw)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:46.780020Z",
     "iopub.status.busy": "2021-03-11T23:17:46.778973Z",
     "iopub.status.idle": "2021-03-11T23:17:46.805687Z",
     "shell.execute_reply": "2021-03-11T23:17:46.805082Z"
    },
    "papermill": {
     "duration": 0.136685,
     "end_time": "2021-03-11T23:17:46.805850",
     "exception": false,
     "start_time": "2021-03-11T23:17:46.669165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#####  removing when patient was sent to the ICU in the first window\n",
    "\n",
    "remove_patients = df_raw.query(\"WINDOW == '0-2' and ICU == 1\")['PATIENT_VISIT_IDENTIFIER'].to_list()\n",
    "\n",
    "df_raw = df_raw.query(\"PATIENT_VISIT_IDENTIFIER not in @remove_patients\")\n",
    "df_raw = df_raw.reset_index(drop=True)\n",
    "\n",
    "# making sure there are no spaces in column names\n",
    "df_raw.columns = df_raw.columns.map(lambda x: x.strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:46.980530Z",
     "iopub.status.busy": "2021-03-11T23:17:46.979893Z",
     "iopub.status.idle": "2021-03-11T23:17:46.983415Z",
     "shell.execute_reply": "2021-03-11T23:17:46.983889Z"
    },
    "papermill": {
     "duration": 0.093527,
     "end_time": "2021-03-11T23:17:46.984053",
     "exception": false,
     "start_time": "2021-03-11T23:17:46.890526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1765, 234)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# removed 32 patients that were sent to the ICU on during the first window (0-2 hours)\n",
    "\n",
    "df_raw.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:47.163196Z",
     "iopub.status.busy": "2021-03-11T23:17:47.162530Z",
     "iopub.status.idle": "2021-03-11T23:17:47.164879Z",
     "shell.execute_reply": "2021-03-11T23:17:47.165398Z"
    },
    "papermill": {
     "duration": 0.097092,
     "end_time": "2021-03-11T23:17:47.165582",
     "exception": false,
     "start_time": "2021-03-11T23:17:47.068490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# creating list with float features\n",
    "\n",
    "new_floats = ['BLOODPRESSURE_ARTERIAL_MEAN','NEUTROPHILES/LINFOCITOS']\n",
    "float_features_columns = df.iloc[:,13:-2].columns.to_list()\n",
    "float_features_columns = float_features_columns + new_floats\n",
    "\n",
    "# creating list with cat features\n",
    "\n",
    "new_cat = ['GASO']\n",
    "cat_features_columns = df.iloc[:,:13].columns.to_list()\n",
    "cat_features_columns = cat_features_columns + new_cat\n",
    "\n",
    "# creating list with outputs\n",
    "outputs_columns = df.iloc[:,-2:].columns.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:47.337789Z",
     "iopub.status.busy": "2021-03-11T23:17:47.337093Z",
     "iopub.status.idle": "2021-03-11T23:17:47.850216Z",
     "shell.execute_reply": "2021-03-11T23:17:47.849677Z"
    },
    "papermill": {
     "duration": 0.60015,
     "end_time": "2021-03-11T23:17:47.850393",
     "exception": false,
     "start_time": "2021-03-11T23:17:47.250243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1410, 234)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# in order not to use ICU rows to do a backfill, created a df with no ICU rows in order to do the backfill\n",
    "df_no_icu = df_raw.query(\"ICU != 1.0\")\n",
    "\n",
    "float_features_no_icu = df_no_icu.groupby('PATIENT_VISIT_IDENTIFIER',as_index=False)[float_features_columns].fillna(method='bfill').fillna(method='ffill')\n",
    "cat_features_no_icu = df_no_icu.groupby('PATIENT_VISIT_IDENTIFIER',as_index=False)[cat_features_columns].fillna(method='bfill').fillna(method='ffill')\n",
    "output_no_icu = df_no_icu[outputs_columns]\n",
    "\n",
    "df_no_icu_concat = pd.concat([cat_features_no_icu,float_features_no_icu,output_no_icu], ignore_index=True, axis=1)\n",
    "new_headers = cat_features_columns + float_features_columns + outputs_columns\n",
    "df_no_icu_concat.columns = new_headers\n",
    "df_no_icu_concat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:48.039554Z",
     "iopub.status.busy": "2021-03-11T23:17:48.038822Z",
     "iopub.status.idle": "2021-03-11T23:17:48.274772Z",
     "shell.execute_reply": "2021-03-11T23:17:48.274133Z"
    },
    "papermill": {
     "duration": 0.340073,
     "end_time": "2021-03-11T23:17:48.274916",
     "exception": false,
     "start_time": "2021-03-11T23:17:47.934843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(163, 234)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating df with first row when Patient was sent to the ICU\n",
    "df_icu = df_raw.query(\"ICU == 1.0\").reset_index()\n",
    "df_icu = df_icu.groupby('PATIENT_VISIT_IDENTIFIER').first().reset_index()\n",
    "\n",
    "float_features_icu = df_icu.groupby('PATIENT_VISIT_IDENTIFIER',as_index=False)[float_features_columns].fillna(method='bfill').fillna(method='ffill')\n",
    "float_features_icu.index = df_icu['index']\n",
    "cat_features_icu = df_icu.groupby('PATIENT_VISIT_IDENTIFIER',as_index=False)[cat_features_columns].fillna(method='bfill').fillna(method='ffill')\n",
    "cat_features_icu.index = df_icu['index']\n",
    "output_icu = df_icu[outputs_columns]\n",
    "output_icu.index = df_icu['index']\n",
    "\n",
    "df_icu.drop(columns=['index'],inplace=True)\n",
    "df_icu_concat = pd.concat([cat_features_icu,float_features_icu,output_icu], ignore_index=True, axis=1)\n",
    "df_icu_concat.columns = new_headers\n",
    "df_icu_concat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:48.450442Z",
     "iopub.status.busy": "2021-03-11T23:17:48.449658Z",
     "iopub.status.idle": "2021-03-11T23:17:48.464111Z",
     "shell.execute_reply": "2021-03-11T23:17:48.464621Z"
    },
    "papermill": {
     "duration": 0.10471,
     "end_time": "2021-03-11T23:17:48.464803",
     "exception": false,
     "start_time": "2021-03-11T23:17:48.360093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1573, 234)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# concatenating ICU and no ICU dataframes\n",
    "df_concat = pd.concat([df_no_icu_concat,df_icu_concat], ignore_index=False, axis=0)\n",
    "df_concat = df_concat.sort_index()\n",
    "df_concat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:48.678662Z",
     "iopub.status.busy": "2021-03-11T23:17:48.677896Z",
     "iopub.status.idle": "2021-03-11T23:17:48.702059Z",
     "shell.execute_reply": "2021-03-11T23:17:48.701511Z"
    },
    "papermill": {
     "duration": 0.146682,
     "end_time": "2021-03-11T23:17:48.702202",
     "exception": false,
     "start_time": "2021-03-11T23:17:48.555520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# transforming categorical data to dummies\n",
    "df_dummies = df_concat[['PATIENT_VISIT_IDENTIFIER','AGE_PERCENTIL']].copy()\n",
    "df_dummies = pd.get_dummies(df_dummies)\n",
    "df_dummies = df_dummies.drop_duplicates()\n",
    "\n",
    "# joining new dummy features\n",
    "df_concat = df_concat.drop(columns=['AGE_PERCENTIL'])\n",
    "df_concat = df_concat.merge(df_dummies,left_on = 'PATIENT_VISIT_IDENTIFIER',right_on = 'PATIENT_VISIT_IDENTIFIER')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:48.884933Z",
     "iopub.status.busy": "2021-03-11T23:17:48.884241Z",
     "iopub.status.idle": "2021-03-11T23:17:49.673308Z",
     "shell.execute_reply": "2021-03-11T23:17:49.672633Z"
    },
    "papermill": {
     "duration": 0.883483,
     "end_time": "2021-03-11T23:17:49.673457",
     "exception": false,
     "start_time": "2021-03-11T23:17:48.789974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# checking again visually for gaps in data\n",
    "missingno.matrix(df_concat)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:49.851273Z",
     "iopub.status.busy": "2021-03-11T23:17:49.850579Z",
     "iopub.status.idle": "2021-03-11T23:17:49.857428Z",
     "shell.execute_reply": "2021-03-11T23:17:49.858039Z"
    },
    "papermill": {
     "duration": 0.098543,
     "end_time": "2021-03-11T23:17:49.858211",
     "exception": false,
     "start_time": "2021-03-11T23:17:49.759668",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# There are no NULL values in df\n",
    "df_concat.columns[df_concat.isna().any()].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:50.056311Z",
     "iopub.status.busy": "2021-03-11T23:17:50.055561Z",
     "iopub.status.idle": "2021-03-11T23:17:50.217274Z",
     "shell.execute_reply": "2021-03-11T23:17:50.216583Z"
    },
    "papermill": {
     "duration": 0.263534,
     "end_time": "2021-03-11T23:17:50.217425",
     "exception": false,
     "start_time": "2021-03-11T23:17:49.953891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# in order to remove columns with no variance, the second position of a value_counts will be searched. When no number returns, it means the feature has only one value\n",
    "drop_columns_no_variance = []\n",
    "for x in df_concat.columns:\n",
    "    try :\n",
    "        has_variance = df_concat[x].value_counts().to_list()[1]\n",
    "    except Exception:\n",
    "        drop_columns_no_variance.append(x)\n",
    "        continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:50.413928Z",
     "iopub.status.busy": "2021-03-11T23:17:50.413117Z",
     "iopub.status.idle": "2021-03-11T23:17:50.416582Z",
     "shell.execute_reply": "2021-03-11T23:17:50.417124Z"
    },
    "papermill": {
     "duration": 0.098188,
     "end_time": "2021-03-11T23:17:50.417314",
     "exception": false,
     "start_time": "2021-03-11T23:17:50.319126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(drop_columns_no_variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:50.596900Z",
     "iopub.status.busy": "2021-03-11T23:17:50.595922Z",
     "iopub.status.idle": "2021-03-11T23:17:50.605983Z",
     "shell.execute_reply": "2021-03-11T23:17:50.606487Z"
    },
    "papermill": {
     "duration": 0.101177,
     "end_time": "2021-03-11T23:17:50.606656",
     "exception": false,
     "start_time": "2021-03-11T23:17:50.505479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1573, 207)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# there are 36 values that have no variance and will be removed\n",
    "df_concat.drop(columns=drop_columns_no_variance,inplace=True)\n",
    "df_concat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:50.791347Z",
     "iopub.status.busy": "2021-03-11T23:17:50.790364Z",
     "iopub.status.idle": "2021-03-11T23:17:50.812067Z",
     "shell.execute_reply": "2021-03-11T23:17:50.811488Z"
    },
    "papermill": {
     "duration": 0.118086,
     "end_time": "2021-03-11T23:17:50.812212",
     "exception": false,
     "start_time": "2021-03-11T23:17:50.694126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1573 entries, 0 to 1572\n",
      "Columns: 207 entries, PATIENT_VISIT_IDENTIFIER to AGE_PERCENTIL_Above 90th\n",
      "dtypes: float64(191), int64(5), object(1), uint8(10)\n",
      "memory usage: 2.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df_concat.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:50.997156Z",
     "iopub.status.busy": "2021-03-11T23:17:50.996042Z",
     "iopub.status.idle": "2021-03-11T23:17:51.401078Z",
     "shell.execute_reply": "2021-03-11T23:17:51.400504Z"
    },
    "papermill": {
     "duration": 0.499686,
     "end_time": "2021-03-11T23:17:51.401228",
     "exception": false,
     "start_time": "2021-03-11T23:17:50.901542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PATIENT_VISIT_IDENTIFIER</th>\n",
       "      <th>AGE_ABOVE65</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>DISEASE GROUPING 1</th>\n",
       "      <th>DISEASE GROUPING 2</th>\n",
       "      <th>DISEASE GROUPING 3</th>\n",
       "      <th>DISEASE GROUPING 4</th>\n",
       "      <th>DISEASE GROUPING 5</th>\n",
       "      <th>DISEASE GROUPING 6</th>\n",
       "      <th>HTN</th>\n",
       "      <th>IMMUNOCOMPROMISED</th>\n",
       "      <th>OTHER</th>\n",
       "      <th>GASO</th>\n",
       "      <th>ALBUMIN_MEDIAN</th>\n",
       "      <th>ALBUMIN_MEAN</th>\n",
       "      <th>ALBUMIN_MIN</th>\n",
       "      <th>ALBUMIN_MAX</th>\n",
       "      <th>BE_ARTERIAL_MEDIAN</th>\n",
       "      <th>BE_ARTERIAL_MEAN</th>\n",
       "      <th>BE_ARTERIAL_MIN</th>\n",
       "      <th>BE_ARTERIAL_MAX</th>\n",
       "      <th>BE_VENOUS_MEDIAN</th>\n",
       "      <th>BE_VENOUS_MEAN</th>\n",
       "      <th>BE_VENOUS_MIN</th>\n",
       "      <th>BE_VENOUS_MAX</th>\n",
       "      <th>BIC_ARTERIAL_MEDIAN</th>\n",
       "      <th>BIC_ARTERIAL_MEAN</th>\n",
       "      <th>BIC_ARTERIAL_MIN</th>\n",
       "      <th>BIC_ARTERIAL_MAX</th>\n",
       "      <th>BIC_VENOUS_MEDIAN</th>\n",
       "      <th>BIC_VENOUS_MEAN</th>\n",
       "      <th>BIC_VENOUS_MIN</th>\n",
       "      <th>BIC_VENOUS_MAX</th>\n",
       "      <th>BILLIRUBIN_MEDIAN</th>\n",
       "      <th>BILLIRUBIN_MEAN</th>\n",
       "      <th>BILLIRUBIN_MIN</th>\n",
       "      <th>BILLIRUBIN_MAX</th>\n",
       "      <th>BLAST_MEDIAN</th>\n",
       "      <th>BLAST_MEAN</th>\n",
       "      <th>BLAST_MIN</th>\n",
       "      <th>BLAST_MAX</th>\n",
       "      <th>CALCIUM_MEDIAN</th>\n",
       "      <th>CALCIUM_MEAN</th>\n",
       "      <th>CALCIUM_MIN</th>\n",
       "      <th>CALCIUM_MAX</th>\n",
       "      <th>CREATININ_MEDIAN</th>\n",
       "      <th>CREATININ_MEAN</th>\n",
       "      <th>CREATININ_MIN</th>\n",
       "      <th>CREATININ_MAX</th>\n",
       "      <th>FFA_MEDIAN</th>\n",
       "      <th>FFA_MEAN</th>\n",
       "      <th>FFA_MIN</th>\n",
       "      <th>FFA_MAX</th>\n",
       "      <th>GGT_MEDIAN</th>\n",
       "      <th>GGT_MEAN</th>\n",
       "      <th>GGT_MIN</th>\n",
       "      <th>GGT_MAX</th>\n",
       "      <th>GLUCOSE_MEDIAN</th>\n",
       "      <th>GLUCOSE_MEAN</th>\n",
       "      <th>GLUCOSE_MIN</th>\n",
       "      <th>GLUCOSE_MAX</th>\n",
       "      <th>HEMATOCRITE_MEDIAN</th>\n",
       "      <th>HEMATOCRITE_MEAN</th>\n",
       "      <th>HEMATOCRITE_MIN</th>\n",
       "      <th>HEMATOCRITE_MAX</th>\n",
       "      <th>HEMOGLOBIN_MEDIAN</th>\n",
       "      <th>HEMOGLOBIN_MEAN</th>\n",
       "      <th>HEMOGLOBIN_MIN</th>\n",
       "      <th>HEMOGLOBIN_MAX</th>\n",
       "      <th>INR_MEDIAN</th>\n",
       "      <th>INR_MEAN</th>\n",
       "      <th>INR_MIN</th>\n",
       "      <th>INR_MAX</th>\n",
       "      <th>LACTATE_MEDIAN</th>\n",
       "      <th>LACTATE_MEAN</th>\n",
       "      <th>LACTATE_MIN</th>\n",
       "      <th>LACTATE_MAX</th>\n",
       "      <th>LEUKOCYTES_MEDIAN</th>\n",
       "      <th>LEUKOCYTES_MEAN</th>\n",
       "      <th>LEUKOCYTES_MIN</th>\n",
       "      <th>LEUKOCYTES_MAX</th>\n",
       "      <th>LINFOCITOS_MEDIAN</th>\n",
       "      <th>LINFOCITOS_MEAN</th>\n",
       "      <th>LINFOCITOS_MIN</th>\n",
       "      <th>LINFOCITOS_MAX</th>\n",
       "      <th>NEUTROPHILES_MEDIAN</th>\n",
       "      <th>NEUTROPHILES_MEAN</th>\n",
       "      <th>NEUTROPHILES_MIN</th>\n",
       "      <th>NEUTROPHILES_MAX</th>\n",
       "      <th>P02_ARTERIAL_MEDIAN</th>\n",
       "      <th>P02_ARTERIAL_MEAN</th>\n",
       "      <th>P02_ARTERIAL_MIN</th>\n",
       "      <th>P02_ARTERIAL_MAX</th>\n",
       "      <th>P02_VENOUS_MEDIAN</th>\n",
       "      <th>P02_VENOUS_MEAN</th>\n",
       "      <th>P02_VENOUS_MIN</th>\n",
       "      <th>P02_VENOUS_MAX</th>\n",
       "      <th>PC02_ARTERIAL_MEDIAN</th>\n",
       "      <th>PC02_ARTERIAL_MEAN</th>\n",
       "      <th>PC02_ARTERIAL_MIN</th>\n",
       "      <th>PC02_ARTERIAL_MAX</th>\n",
       "      <th>PC02_VENOUS_MEDIAN</th>\n",
       "      <th>PC02_VENOUS_MEAN</th>\n",
       "      <th>PC02_VENOUS_MIN</th>\n",
       "      <th>PC02_VENOUS_MAX</th>\n",
       "      <th>PCR_MEDIAN</th>\n",
       "      <th>PCR_MEAN</th>\n",
       "      <th>PCR_MIN</th>\n",
       "      <th>PCR_MAX</th>\n",
       "      <th>PH_ARTERIAL_MEDIAN</th>\n",
       "      <th>PH_ARTERIAL_MEAN</th>\n",
       "      <th>PH_ARTERIAL_MIN</th>\n",
       "      <th>PH_ARTERIAL_MAX</th>\n",
       "      <th>PH_VENOUS_MEDIAN</th>\n",
       "      <th>PH_VENOUS_MEAN</th>\n",
       "      <th>PH_VENOUS_MIN</th>\n",
       "      <th>PH_VENOUS_MAX</th>\n",
       "      <th>PLATELETS_MEDIAN</th>\n",
       "      <th>PLATELETS_MEAN</th>\n",
       "      <th>PLATELETS_MIN</th>\n",
       "      <th>PLATELETS_MAX</th>\n",
       "      <th>POTASSIUM_MEDIAN</th>\n",
       "      <th>POTASSIUM_MEAN</th>\n",
       "      <th>POTASSIUM_MIN</th>\n",
       "      <th>POTASSIUM_MAX</th>\n",
       "      <th>SAT02_ARTERIAL_MEDIAN</th>\n",
       "      <th>SAT02_ARTERIAL_MEAN</th>\n",
       "      <th>SAT02_ARTERIAL_MIN</th>\n",
       "      <th>SAT02_ARTERIAL_MAX</th>\n",
       "      <th>SAT02_VENOUS_MEDIAN</th>\n",
       "      <th>SAT02_VENOUS_MEAN</th>\n",
       "      <th>SAT02_VENOUS_MIN</th>\n",
       "      <th>SAT02_VENOUS_MAX</th>\n",
       "      <th>SODIUM_MEDIAN</th>\n",
       "      <th>SODIUM_MEAN</th>\n",
       "      <th>SODIUM_MIN</th>\n",
       "      <th>SODIUM_MAX</th>\n",
       "      <th>TGO_MEDIAN</th>\n",
       "      <th>TGO_MEAN</th>\n",
       "      <th>TGO_MIN</th>\n",
       "      <th>TGO_MAX</th>\n",
       "      <th>TGP_MEDIAN</th>\n",
       "      <th>TGP_MEAN</th>\n",
       "      <th>TGP_MIN</th>\n",
       "      <th>TGP_MAX</th>\n",
       "      <th>TTPA_MEDIAN</th>\n",
       "      <th>TTPA_MEAN</th>\n",
       "      <th>TTPA_MIN</th>\n",
       "      <th>TTPA_MAX</th>\n",
       "      <th>UREA_MEDIAN</th>\n",
       "      <th>UREA_MEAN</th>\n",
       "      <th>UREA_MIN</th>\n",
       "      <th>UREA_MAX</th>\n",
       "      <th>DIMER_MEDIAN</th>\n",
       "      <th>DIMER_MEAN</th>\n",
       "      <th>DIMER_MIN</th>\n",
       "      <th>DIMER_MAX</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_MEAN</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_MEAN</th>\n",
       "      <th>HEART_RATE_MEAN</th>\n",
       "      <th>RESPIRATORY_RATE_MEAN</th>\n",
       "      <th>TEMPERATURE_MEAN</th>\n",
       "      <th>OXYGEN_SATURATION_MEAN</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_MEDIAN</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_MEDIAN</th>\n",
       "      <th>HEART_RATE_MEDIAN</th>\n",
       "      <th>RESPIRATORY_RATE_MEDIAN</th>\n",
       "      <th>TEMPERATURE_MEDIAN</th>\n",
       "      <th>OXYGEN_SATURATION_MEDIAN</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_MIN</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_MIN</th>\n",
       "      <th>HEART_RATE_MIN</th>\n",
       "      <th>RESPIRATORY_RATE_MIN</th>\n",
       "      <th>TEMPERATURE_MIN</th>\n",
       "      <th>OXYGEN_SATURATION_MIN</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_MAX</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_MAX</th>\n",
       "      <th>HEART_RATE_MAX</th>\n",
       "      <th>RESPIRATORY_RATE_MAX</th>\n",
       "      <th>TEMPERATURE_MAX</th>\n",
       "      <th>OXYGEN_SATURATION_MAX</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_DIFF</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_DIFF</th>\n",
       "      <th>HEART_RATE_DIFF</th>\n",
       "      <th>RESPIRATORY_RATE_DIFF</th>\n",
       "      <th>TEMPERATURE_DIFF</th>\n",
       "      <th>OXYGEN_SATURATION_DIFF</th>\n",
       "      <th>BLOODPRESSURE_DIASTOLIC_DIFF_REL</th>\n",
       "      <th>BLOODPRESSURE_SISTOLIC_DIFF_REL</th>\n",
       "      <th>HEART_RATE_DIFF_REL</th>\n",
       "      <th>RESPIRATORY_RATE_DIFF_REL</th>\n",
       "      <th>TEMPERATURE_DIFF_REL</th>\n",
       "      <th>OXYGEN_SATURATION_DIFF_REL</th>\n",
       "      <th>BLOODPRESSURE_ARTERIAL_MEAN</th>\n",
       "      <th>NEUTROPHILES/LINFOCITOS</th>\n",
       "      <th>ICU</th>\n",
       "      <th>AGE_PERCENTIL_10th</th>\n",
       "      <th>AGE_PERCENTIL_20th</th>\n",
       "      <th>AGE_PERCENTIL_30th</th>\n",
       "      <th>AGE_PERCENTIL_40th</th>\n",
       "      <th>AGE_PERCENTIL_50th</th>\n",
       "      <th>AGE_PERCENTIL_60th</th>\n",
       "      <th>AGE_PERCENTIL_70th</th>\n",
       "      <th>AGE_PERCENTIL_80th</th>\n",
       "      <th>AGE_PERCENTIL_90th</th>\n",
       "      <th>AGE_PERCENTIL_Above 90th</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PATIENT_VISIT_IDENTIFIER</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.031265</td>\n",
       "      <td>0.074006</td>\n",
       "      <td>0.048391</td>\n",
       "      <td>0.007865</td>\n",
       "      <td>0.051399</td>\n",
       "      <td>0.005817</td>\n",
       "      <td>-0.010689</td>\n",
       "      <td>0.033785</td>\n",
       "      <td>0.004840</td>\n",
       "      <td>-0.000715</td>\n",
       "      <td>0.057211</td>\n",
       "      <td>0.015054</td>\n",
       "      <td>0.006279</td>\n",
       "      <td>0.006279</td>\n",
       "      <td>0.006279</td>\n",
       "      <td>0.006279</td>\n",
       "      <td>-0.019203</td>\n",
       "      <td>-0.019203</td>\n",
       "      <td>-0.019203</td>\n",
       "      <td>-0.019203</td>\n",
       "      <td>0.034085</td>\n",
       "      <td>0.034085</td>\n",
       "      <td>0.034085</td>\n",
       "      <td>0.034085</td>\n",
       "      <td>0.011486</td>\n",
       "      <td>0.011486</td>\n",
       "      <td>0.011486</td>\n",
       "      <td>0.011486</td>\n",
       "      <td>0.055256</td>\n",
       "      <td>0.055256</td>\n",
       "      <td>0.055256</td>\n",
       "      <td>0.055256</td>\n",
       "      <td>0.001862</td>\n",
       "      <td>0.001862</td>\n",
       "      <td>0.001862</td>\n",
       "      <td>0.001862</td>\n",
       "      <td>0.014950</td>\n",
       "      <td>0.014950</td>\n",
       "      <td>0.014950</td>\n",
       "      <td>0.014950</td>\n",
       "      <td>0.030832</td>\n",
       "      <td>0.030832</td>\n",
       "      <td>0.030832</td>\n",
       "      <td>0.030832</td>\n",
       "      <td>0.038332</td>\n",
       "      <td>0.038332</td>\n",
       "      <td>0.038332</td>\n",
       "      <td>0.038332</td>\n",
       "      <td>-0.021351</td>\n",
       "      <td>-0.021351</td>\n",
       "      <td>-0.021351</td>\n",
       "      <td>-0.021351</td>\n",
       "      <td>-0.053070</td>\n",
       "      <td>-0.053070</td>\n",
       "      <td>-0.053070</td>\n",
       "      <td>-0.053070</td>\n",
       "      <td>0.032138</td>\n",
       "      <td>0.032138</td>\n",
       "      <td>0.032138</td>\n",
       "      <td>0.032138</td>\n",
       "      <td>-0.013189</td>\n",
       "      <td>-0.013189</td>\n",
       "      <td>-0.013189</td>\n",
       "      <td>-0.013189</td>\n",
       "      <td>-0.027437</td>\n",
       "      <td>-0.027437</td>\n",
       "      <td>-0.027437</td>\n",
       "      <td>-0.027437</td>\n",
       "      <td>-0.056623</td>\n",
       "      <td>-0.056623</td>\n",
       "      <td>-0.056623</td>\n",
       "      <td>-0.056623</td>\n",
       "      <td>0.018460</td>\n",
       "      <td>0.018460</td>\n",
       "      <td>0.018460</td>\n",
       "      <td>0.018460</td>\n",
       "      <td>0.006118</td>\n",
       "      <td>0.006118</td>\n",
       "      <td>0.006118</td>\n",
       "      <td>0.006118</td>\n",
       "      <td>0.038331</td>\n",
       "      <td>0.038331</td>\n",
       "      <td>0.038331</td>\n",
       "      <td>0.038331</td>\n",
       "      <td>-0.008212</td>\n",
       "      <td>-0.008212</td>\n",
       "      <td>-0.008212</td>\n",
       "      <td>-0.008212</td>\n",
       "      <td>-0.012394</td>\n",
       "      <td>-0.012394</td>\n",
       "      <td>-0.012394</td>\n",
       "      <td>-0.012394</td>\n",
       "      <td>-0.077576</td>\n",
       "      <td>-0.077576</td>\n",
       "      <td>-0.077576</td>\n",
       "      <td>-0.077576</td>\n",
       "      <td>0.030214</td>\n",
       "      <td>0.030214</td>\n",
       "      <td>0.030214</td>\n",
       "      <td>0.030214</td>\n",
       "      <td>0.072683</td>\n",
       "      <td>0.072683</td>\n",
       "      <td>0.072683</td>\n",
       "      <td>0.072683</td>\n",
       "      <td>-0.049710</td>\n",
       "      <td>-0.049710</td>\n",
       "      <td>-0.049710</td>\n",
       "      <td>-0.049710</td>\n",
       "      <td>-0.017123</td>\n",
       "      <td>-0.017123</td>\n",
       "      <td>-0.017123</td>\n",
       "      <td>-0.017123</td>\n",
       "      <td>-0.062787</td>\n",
       "      <td>-0.062787</td>\n",
       "      <td>-0.062787</td>\n",
       "      <td>-0.062787</td>\n",
       "      <td>0.023905</td>\n",
       "      <td>0.023905</td>\n",
       "      <td>0.023905</td>\n",
       "      <td>0.023905</td>\n",
       "      <td>0.097040</td>\n",
       "      <td>0.097040</td>\n",
       "      <td>0.097040</td>\n",
       "      <td>0.097040</td>\n",
       "      <td>0.021630</td>\n",
       "      <td>0.021630</td>\n",
       "      <td>0.021630</td>\n",
       "      <td>0.021630</td>\n",
       "      <td>-0.051289</td>\n",
       "      <td>-0.051289</td>\n",
       "      <td>-0.051289</td>\n",
       "      <td>-0.051289</td>\n",
       "      <td>0.002493</td>\n",
       "      <td>0.002493</td>\n",
       "      <td>0.002493</td>\n",
       "      <td>0.002493</td>\n",
       "      <td>0.029332</td>\n",
       "      <td>0.029332</td>\n",
       "      <td>0.029332</td>\n",
       "      <td>0.029332</td>\n",
       "      <td>0.038154</td>\n",
       "      <td>0.038154</td>\n",
       "      <td>0.038154</td>\n",
       "      <td>0.038154</td>\n",
       "      <td>0.016988</td>\n",
       "      <td>0.016988</td>\n",
       "      <td>0.016988</td>\n",
       "      <td>0.016988</td>\n",
       "      <td>0.024557</td>\n",
       "      <td>0.024557</td>\n",
       "      <td>0.024557</td>\n",
       "      <td>0.024557</td>\n",
       "      <td>-0.037059</td>\n",
       "      <td>-0.037059</td>\n",
       "      <td>-0.037059</td>\n",
       "      <td>-0.037059</td>\n",
       "      <td>0.084111</td>\n",
       "      <td>0.058097</td>\n",
       "      <td>0.087693</td>\n",
       "      <td>0.028978</td>\n",
       "      <td>-0.027485</td>\n",
       "      <td>-0.029245</td>\n",
       "      <td>0.079540</td>\n",
       "      <td>0.051120</td>\n",
       "      <td>0.087046</td>\n",
       "      <td>0.019975</td>\n",
       "      <td>-0.032546</td>\n",
       "      <td>-0.037103</td>\n",
       "      <td>0.053537</td>\n",
       "      <td>0.053562</td>\n",
       "      <td>0.073602</td>\n",
       "      <td>0.020976</td>\n",
       "      <td>-0.022254</td>\n",
       "      <td>0.004223</td>\n",
       "      <td>0.076183</td>\n",
       "      <td>0.061159</td>\n",
       "      <td>0.058760</td>\n",
       "      <td>0.010442</td>\n",
       "      <td>-0.002016</td>\n",
       "      <td>-0.036654</td>\n",
       "      <td>0.023258</td>\n",
       "      <td>0.010283</td>\n",
       "      <td>-0.006479</td>\n",
       "      <td>-0.002880</td>\n",
       "      <td>0.016071</td>\n",
       "      <td>-0.013829</td>\n",
       "      <td>0.014737</td>\n",
       "      <td>0.010439</td>\n",
       "      <td>-0.020332</td>\n",
       "      <td>0.002510</td>\n",
       "      <td>0.016640</td>\n",
       "      <td>-0.013892</td>\n",
       "      <td>0.083976</td>\n",
       "      <td>0.115270</td>\n",
       "      <td>-0.020097</td>\n",
       "      <td>-0.009140</td>\n",
       "      <td>-0.030883</td>\n",
       "      <td>-0.079288</td>\n",
       "      <td>0.144888</td>\n",
       "      <td>0.010010</td>\n",
       "      <td>-0.019118</td>\n",
       "      <td>-0.050190</td>\n",
       "      <td>-0.025630</td>\n",
       "      <td>0.050998</td>\n",
       "      <td>0.012995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE_ABOVE65</th>\n",
       "      <td>-0.031265</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.040368</td>\n",
       "      <td>0.257561</td>\n",
       "      <td>0.057273</td>\n",
       "      <td>0.165942</td>\n",
       "      <td>0.025486</td>\n",
       "      <td>0.318834</td>\n",
       "      <td>0.004895</td>\n",
       "      <td>0.334484</td>\n",
       "      <td>0.162399</td>\n",
       "      <td>0.119200</td>\n",
       "      <td>-0.020136</td>\n",
       "      <td>-0.100775</td>\n",
       "      <td>-0.100775</td>\n",
       "      <td>-0.100775</td>\n",
       "      <td>-0.100775</td>\n",
       "      <td>0.060274</td>\n",
       "      <td>0.060274</td>\n",
       "      <td>0.060274</td>\n",
       "      <td>0.060274</td>\n",
       "      <td>0.125534</td>\n",
       "      <td>0.125534</td>\n",
       "      <td>0.125534</td>\n",
       "      <td>0.125534</td>\n",
       "      <td>0.012287</td>\n",
       "      <td>0.012287</td>\n",
       "      <td>0.012287</td>\n",
       "      <td>0.012287</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>0.049565</td>\n",
       "      <td>0.049565</td>\n",
       "      <td>0.049565</td>\n",
       "      <td>0.049565</td>\n",
       "      <td>0.058519</td>\n",
       "      <td>0.058519</td>\n",
       "      <td>0.058519</td>\n",
       "      <td>0.058519</td>\n",
       "      <td>-0.106386</td>\n",
       "      <td>-0.106386</td>\n",
       "      <td>-0.106386</td>\n",
       "      <td>-0.106386</td>\n",
       "      <td>0.113914</td>\n",
       "      <td>0.113914</td>\n",
       "      <td>0.113914</td>\n",
       "      <td>0.113914</td>\n",
       "      <td>-0.024290</td>\n",
       "      <td>-0.024290</td>\n",
       "      <td>-0.024290</td>\n",
       "      <td>-0.024290</td>\n",
       "      <td>-0.099784</td>\n",
       "      <td>-0.099784</td>\n",
       "      <td>-0.099784</td>\n",
       "      <td>-0.099784</td>\n",
       "      <td>0.035220</td>\n",
       "      <td>0.035220</td>\n",
       "      <td>0.035220</td>\n",
       "      <td>0.035220</td>\n",
       "      <td>-0.244813</td>\n",
       "      <td>-0.244813</td>\n",
       "      <td>-0.244813</td>\n",
       "      <td>-0.244813</td>\n",
       "      <td>-0.255381</td>\n",
       "      <td>-0.255381</td>\n",
       "      <td>-0.255381</td>\n",
       "      <td>-0.255381</td>\n",
       "      <td>0.066448</td>\n",
       "      <td>0.066448</td>\n",
       "      <td>0.066448</td>\n",
       "      <td>0.066448</td>\n",
       "      <td>-0.040969</td>\n",
       "      <td>-0.040969</td>\n",
       "      <td>-0.040969</td>\n",
       "      <td>-0.040969</td>\n",
       "      <td>-0.001383</td>\n",
       "      <td>-0.001383</td>\n",
       "      <td>-0.001383</td>\n",
       "      <td>-0.001383</td>\n",
       "      <td>-0.139216</td>\n",
       "      <td>-0.139216</td>\n",
       "      <td>-0.139216</td>\n",
       "      <td>-0.139216</td>\n",
       "      <td>0.030810</td>\n",
       "      <td>0.030810</td>\n",
       "      <td>0.030810</td>\n",
       "      <td>0.030810</td>\n",
       "      <td>-0.083229</td>\n",
       "      <td>-0.083229</td>\n",
       "      <td>-0.083229</td>\n",
       "      <td>-0.083229</td>\n",
       "      <td>0.025996</td>\n",
       "      <td>0.025996</td>\n",
       "      <td>0.025996</td>\n",
       "      <td>0.025996</td>\n",
       "      <td>-0.004333</td>\n",
       "      <td>-0.004333</td>\n",
       "      <td>-0.004333</td>\n",
       "      <td>-0.004333</td>\n",
       "      <td>0.006415</td>\n",
       "      <td>0.006415</td>\n",
       "      <td>0.006415</td>\n",
       "      <td>0.006415</td>\n",
       "      <td>0.050356</td>\n",
       "      <td>0.050356</td>\n",
       "      <td>0.050356</td>\n",
       "      <td>0.050356</td>\n",
       "      <td>0.007758</td>\n",
       "      <td>0.007758</td>\n",
       "      <td>0.007758</td>\n",
       "      <td>0.007758</td>\n",
       "      <td>0.035135</td>\n",
       "      <td>0.035135</td>\n",
       "      <td>0.035135</td>\n",
       "      <td>0.035135</td>\n",
       "      <td>-0.163665</td>\n",
       "      <td>-0.163665</td>\n",
       "      <td>-0.163665</td>\n",
       "      <td>-0.163665</td>\n",
       "      <td>0.115473</td>\n",
       "      <td>0.115473</td>\n",
       "      <td>0.115473</td>\n",
       "      <td>0.115473</td>\n",
       "      <td>-0.077803</td>\n",
       "      <td>-0.077803</td>\n",
       "      <td>-0.077803</td>\n",
       "      <td>-0.077803</td>\n",
       "      <td>-0.074362</td>\n",
       "      <td>-0.074362</td>\n",
       "      <td>-0.074362</td>\n",
       "      <td>-0.074362</td>\n",
       "      <td>-0.096616</td>\n",
       "      <td>-0.096616</td>\n",
       "      <td>-0.096616</td>\n",
       "      <td>-0.096616</td>\n",
       "      <td>0.052032</td>\n",
       "      <td>0.052032</td>\n",
       "      <td>0.052032</td>\n",
       "      <td>0.052032</td>\n",
       "      <td>-0.046748</td>\n",
       "      <td>-0.046748</td>\n",
       "      <td>-0.046748</td>\n",
       "      <td>-0.046748</td>\n",
       "      <td>0.019146</td>\n",
       "      <td>0.019146</td>\n",
       "      <td>0.019146</td>\n",
       "      <td>0.019146</td>\n",
       "      <td>0.268288</td>\n",
       "      <td>0.268288</td>\n",
       "      <td>0.268288</td>\n",
       "      <td>0.268288</td>\n",
       "      <td>0.030132</td>\n",
       "      <td>0.030132</td>\n",
       "      <td>0.030132</td>\n",
       "      <td>0.030132</td>\n",
       "      <td>-0.110035</td>\n",
       "      <td>0.228852</td>\n",
       "      <td>-0.200581</td>\n",
       "      <td>0.068900</td>\n",
       "      <td>-0.097945</td>\n",
       "      <td>-0.102686</td>\n",
       "      <td>-0.108749</td>\n",
       "      <td>0.227439</td>\n",
       "      <td>-0.196400</td>\n",
       "      <td>0.060995</td>\n",
       "      <td>-0.099888</td>\n",
       "      <td>-0.091496</td>\n",
       "      <td>-0.075535</td>\n",
       "      <td>0.175373</td>\n",
       "      <td>-0.161583</td>\n",
       "      <td>0.036929</td>\n",
       "      <td>-0.086033</td>\n",
       "      <td>-0.069702</td>\n",
       "      <td>-0.065501</td>\n",
       "      <td>0.211603</td>\n",
       "      <td>-0.172953</td>\n",
       "      <td>0.054965</td>\n",
       "      <td>-0.060190</td>\n",
       "      <td>-0.073072</td>\n",
       "      <td>0.002925</td>\n",
       "      <td>0.043980</td>\n",
       "      <td>-0.025417</td>\n",
       "      <td>0.027294</td>\n",
       "      <td>0.018894</td>\n",
       "      <td>0.047390</td>\n",
       "      <td>0.017290</td>\n",
       "      <td>0.031833</td>\n",
       "      <td>-0.009802</td>\n",
       "      <td>0.026774</td>\n",
       "      <td>0.019965</td>\n",
       "      <td>0.048119</td>\n",
       "      <td>0.006087</td>\n",
       "      <td>-0.030171</td>\n",
       "      <td>0.129427</td>\n",
       "      <td>-0.315026</td>\n",
       "      <td>-0.325501</td>\n",
       "      <td>-0.305342</td>\n",
       "      <td>-0.308265</td>\n",
       "      <td>-0.290485</td>\n",
       "      <td>0.342255</td>\n",
       "      <td>0.369008</td>\n",
       "      <td>0.380186</td>\n",
       "      <td>0.321851</td>\n",
       "      <td>0.341540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GENDER</th>\n",
       "      <td>0.074006</td>\n",
       "      <td>0.040368</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.041055</td>\n",
       "      <td>0.004516</td>\n",
       "      <td>-0.041710</td>\n",
       "      <td>-0.039350</td>\n",
       "      <td>-0.015991</td>\n",
       "      <td>-0.022329</td>\n",
       "      <td>-0.014544</td>\n",
       "      <td>-0.019953</td>\n",
       "      <td>0.044796</td>\n",
       "      <td>-0.058352</td>\n",
       "      <td>-0.044106</td>\n",
       "      <td>-0.044106</td>\n",
       "      <td>-0.044106</td>\n",
       "      <td>-0.044106</td>\n",
       "      <td>-0.030622</td>\n",
       "      <td>-0.030622</td>\n",
       "      <td>-0.030622</td>\n",
       "      <td>-0.030622</td>\n",
       "      <td>0.022976</td>\n",
       "      <td>0.022976</td>\n",
       "      <td>0.022976</td>\n",
       "      <td>0.022976</td>\n",
       "      <td>0.009726</td>\n",
       "      <td>0.009726</td>\n",
       "      <td>0.009726</td>\n",
       "      <td>0.009726</td>\n",
       "      <td>0.022764</td>\n",
       "      <td>0.022764</td>\n",
       "      <td>0.022764</td>\n",
       "      <td>0.022764</td>\n",
       "      <td>-0.058487</td>\n",
       "      <td>-0.058487</td>\n",
       "      <td>-0.058487</td>\n",
       "      <td>-0.058487</td>\n",
       "      <td>-0.050024</td>\n",
       "      <td>-0.050024</td>\n",
       "      <td>-0.050024</td>\n",
       "      <td>-0.050024</td>\n",
       "      <td>0.011806</td>\n",
       "      <td>0.011806</td>\n",
       "      <td>0.011806</td>\n",
       "      <td>0.011806</td>\n",
       "      <td>-0.192830</td>\n",
       "      <td>-0.192830</td>\n",
       "      <td>-0.192830</td>\n",
       "      <td>-0.192830</td>\n",
       "      <td>0.011162</td>\n",
       "      <td>0.011162</td>\n",
       "      <td>0.011162</td>\n",
       "      <td>0.011162</td>\n",
       "      <td>-0.028679</td>\n",
       "      <td>-0.028679</td>\n",
       "      <td>-0.028679</td>\n",
       "      <td>-0.028679</td>\n",
       "      <td>-0.057029</td>\n",
       "      <td>-0.057029</td>\n",
       "      <td>-0.057029</td>\n",
       "      <td>-0.057029</td>\n",
       "      <td>-0.262838</td>\n",
       "      <td>-0.262838</td>\n",
       "      <td>-0.262838</td>\n",
       "      <td>-0.262838</td>\n",
       "      <td>-0.284592</td>\n",
       "      <td>-0.284592</td>\n",
       "      <td>-0.284592</td>\n",
       "      <td>-0.284592</td>\n",
       "      <td>-0.044382</td>\n",
       "      <td>-0.044382</td>\n",
       "      <td>-0.044382</td>\n",
       "      <td>-0.044382</td>\n",
       "      <td>0.020050</td>\n",
       "      <td>0.020050</td>\n",
       "      <td>0.020050</td>\n",
       "      <td>0.020050</td>\n",
       "      <td>-0.040087</td>\n",
       "      <td>-0.040087</td>\n",
       "      <td>-0.040087</td>\n",
       "      <td>-0.040087</td>\n",
       "      <td>0.100911</td>\n",
       "      <td>0.100911</td>\n",
       "      <td>0.100911</td>\n",
       "      <td>0.100911</td>\n",
       "      <td>-0.062729</td>\n",
       "      <td>-0.062729</td>\n",
       "      <td>-0.062729</td>\n",
       "      <td>-0.062729</td>\n",
       "      <td>-0.012907</td>\n",
       "      <td>-0.012907</td>\n",
       "      <td>-0.012907</td>\n",
       "      <td>-0.012907</td>\n",
       "      <td>0.022131</td>\n",
       "      <td>0.022131</td>\n",
       "      <td>0.022131</td>\n",
       "      <td>0.022131</td>\n",
       "      <td>0.013461</td>\n",
       "      <td>0.013461</td>\n",
       "      <td>0.013461</td>\n",
       "      <td>0.013461</td>\n",
       "      <td>-0.008704</td>\n",
       "      <td>-0.008704</td>\n",
       "      <td>-0.008704</td>\n",
       "      <td>-0.008704</td>\n",
       "      <td>-0.157600</td>\n",
       "      <td>-0.157600</td>\n",
       "      <td>-0.157600</td>\n",
       "      <td>-0.157600</td>\n",
       "      <td>0.005613</td>\n",
       "      <td>0.005613</td>\n",
       "      <td>0.005613</td>\n",
       "      <td>0.005613</td>\n",
       "      <td>0.021687</td>\n",
       "      <td>0.021687</td>\n",
       "      <td>0.021687</td>\n",
       "      <td>0.021687</td>\n",
       "      <td>0.055833</td>\n",
       "      <td>0.055833</td>\n",
       "      <td>0.055833</td>\n",
       "      <td>0.055833</td>\n",
       "      <td>-0.083873</td>\n",
       "      <td>-0.083873</td>\n",
       "      <td>-0.083873</td>\n",
       "      <td>-0.083873</td>\n",
       "      <td>-0.007806</td>\n",
       "      <td>-0.007806</td>\n",
       "      <td>-0.007806</td>\n",
       "      <td>-0.007806</td>\n",
       "      <td>0.021203</td>\n",
       "      <td>0.021203</td>\n",
       "      <td>0.021203</td>\n",
       "      <td>0.021203</td>\n",
       "      <td>0.029643</td>\n",
       "      <td>0.029643</td>\n",
       "      <td>0.029643</td>\n",
       "      <td>0.029643</td>\n",
       "      <td>-0.071659</td>\n",
       "      <td>-0.071659</td>\n",
       "      <td>-0.071659</td>\n",
       "      <td>-0.071659</td>\n",
       "      <td>-0.151112</td>\n",
       "      <td>-0.151112</td>\n",
       "      <td>-0.151112</td>\n",
       "      <td>-0.151112</td>\n",
       "      <td>-0.020860</td>\n",
       "      <td>-0.020860</td>\n",
       "      <td>-0.020860</td>\n",
       "      <td>-0.020860</td>\n",
       "      <td>-0.150802</td>\n",
       "      <td>-0.150802</td>\n",
       "      <td>-0.150802</td>\n",
       "      <td>-0.150802</td>\n",
       "      <td>0.061197</td>\n",
       "      <td>0.061197</td>\n",
       "      <td>0.061197</td>\n",
       "      <td>0.061197</td>\n",
       "      <td>-0.135805</td>\n",
       "      <td>-0.108314</td>\n",
       "      <td>-0.017823</td>\n",
       "      <td>-0.067077</td>\n",
       "      <td>-0.099291</td>\n",
       "      <td>0.081194</td>\n",
       "      <td>-0.121897</td>\n",
       "      <td>-0.109377</td>\n",
       "      <td>-0.007538</td>\n",
       "      <td>-0.067162</td>\n",
       "      <td>-0.085804</td>\n",
       "      <td>0.081861</td>\n",
       "      <td>-0.121243</td>\n",
       "      <td>-0.095384</td>\n",
       "      <td>-0.032036</td>\n",
       "      <td>-0.042617</td>\n",
       "      <td>-0.077453</td>\n",
       "      <td>0.052013</td>\n",
       "      <td>-0.075901</td>\n",
       "      <td>-0.067003</td>\n",
       "      <td>-0.023389</td>\n",
       "      <td>-0.045960</td>\n",
       "      <td>-0.089460</td>\n",
       "      <td>0.098334</td>\n",
       "      <td>0.029582</td>\n",
       "      <td>0.019749</td>\n",
       "      <td>0.004793</td>\n",
       "      <td>-0.016041</td>\n",
       "      <td>-0.012094</td>\n",
       "      <td>-0.023678</td>\n",
       "      <td>0.028093</td>\n",
       "      <td>0.031469</td>\n",
       "      <td>-0.001420</td>\n",
       "      <td>-0.012289</td>\n",
       "      <td>-0.011126</td>\n",
       "      <td>-0.023587</td>\n",
       "      <td>-0.141105</td>\n",
       "      <td>0.078434</td>\n",
       "      <td>-0.043260</td>\n",
       "      <td>-0.080397</td>\n",
       "      <td>0.019707</td>\n",
       "      <td>-0.041619</td>\n",
       "      <td>0.007572</td>\n",
       "      <td>0.020262</td>\n",
       "      <td>0.033489</td>\n",
       "      <td>0.014367</td>\n",
       "      <td>-0.048219</td>\n",
       "      <td>0.017056</td>\n",
       "      <td>0.074544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DISEASE GROUPING 1</th>\n",
       "      <td>0.048391</td>\n",
       "      <td>0.257561</td>\n",
       "      <td>0.041055</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.153279</td>\n",
       "      <td>0.257670</td>\n",
       "      <td>0.032432</td>\n",
       "      <td>0.291214</td>\n",
       "      <td>0.205137</td>\n",
       "      <td>0.422407</td>\n",
       "      <td>0.170634</td>\n",
       "      <td>0.153668</td>\n",
       "      <td>0.021872</td>\n",
       "      <td>-0.084277</td>\n",
       "      <td>-0.084277</td>\n",
       "      <td>-0.084277</td>\n",
       "      <td>-0.084277</td>\n",
       "      <td>0.039354</td>\n",
       "      <td>0.039354</td>\n",
       "      <td>0.039354</td>\n",
       "      <td>0.039354</td>\n",
       "      <td>0.086341</td>\n",
       "      <td>0.086341</td>\n",
       "      <td>0.086341</td>\n",
       "      <td>0.086341</td>\n",
       "      <td>0.042084</td>\n",
       "      <td>0.042084</td>\n",
       "      <td>0.042084</td>\n",
       "      <td>0.042084</td>\n",
       "      <td>0.036110</td>\n",
       "      <td>0.036110</td>\n",
       "      <td>0.036110</td>\n",
       "      <td>0.036110</td>\n",
       "      <td>-0.007828</td>\n",
       "      <td>-0.007828</td>\n",
       "      <td>-0.007828</td>\n",
       "      <td>-0.007828</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>-0.061531</td>\n",
       "      <td>-0.061531</td>\n",
       "      <td>-0.061531</td>\n",
       "      <td>-0.061531</td>\n",
       "      <td>0.013314</td>\n",
       "      <td>0.013314</td>\n",
       "      <td>0.013314</td>\n",
       "      <td>0.013314</td>\n",
       "      <td>0.031945</td>\n",
       "      <td>0.031945</td>\n",
       "      <td>0.031945</td>\n",
       "      <td>0.031945</td>\n",
       "      <td>-0.041321</td>\n",
       "      <td>-0.041321</td>\n",
       "      <td>-0.041321</td>\n",
       "      <td>-0.041321</td>\n",
       "      <td>0.041195</td>\n",
       "      <td>0.041195</td>\n",
       "      <td>0.041195</td>\n",
       "      <td>0.041195</td>\n",
       "      <td>-0.079280</td>\n",
       "      <td>-0.079280</td>\n",
       "      <td>-0.079280</td>\n",
       "      <td>-0.079280</td>\n",
       "      <td>-0.096464</td>\n",
       "      <td>-0.096464</td>\n",
       "      <td>-0.096464</td>\n",
       "      <td>-0.096464</td>\n",
       "      <td>0.005325</td>\n",
       "      <td>0.005325</td>\n",
       "      <td>0.005325</td>\n",
       "      <td>0.005325</td>\n",
       "      <td>0.017985</td>\n",
       "      <td>0.017985</td>\n",
       "      <td>0.017985</td>\n",
       "      <td>0.017985</td>\n",
       "      <td>-0.013741</td>\n",
       "      <td>-0.013741</td>\n",
       "      <td>-0.013741</td>\n",
       "      <td>-0.013741</td>\n",
       "      <td>0.014131</td>\n",
       "      <td>0.014131</td>\n",
       "      <td>0.014131</td>\n",
       "      <td>0.014131</td>\n",
       "      <td>-0.020418</td>\n",
       "      <td>-0.020418</td>\n",
       "      <td>-0.020418</td>\n",
       "      <td>-0.020418</td>\n",
       "      <td>0.030372</td>\n",
       "      <td>0.030372</td>\n",
       "      <td>0.030372</td>\n",
       "      <td>0.030372</td>\n",
       "      <td>0.083903</td>\n",
       "      <td>0.083903</td>\n",
       "      <td>0.083903</td>\n",
       "      <td>0.083903</td>\n",
       "      <td>0.018078</td>\n",
       "      <td>0.018078</td>\n",
       "      <td>0.018078</td>\n",
       "      <td>0.018078</td>\n",
       "      <td>0.076969</td>\n",
       "      <td>0.076969</td>\n",
       "      <td>0.076969</td>\n",
       "      <td>0.076969</td>\n",
       "      <td>-0.015760</td>\n",
       "      <td>-0.015760</td>\n",
       "      <td>-0.015760</td>\n",
       "      <td>-0.015760</td>\n",
       "      <td>0.027992</td>\n",
       "      <td>0.027992</td>\n",
       "      <td>0.027992</td>\n",
       "      <td>0.027992</td>\n",
       "      <td>-0.064074</td>\n",
       "      <td>-0.064074</td>\n",
       "      <td>-0.064074</td>\n",
       "      <td>-0.064074</td>\n",
       "      <td>-0.065453</td>\n",
       "      <td>-0.065453</td>\n",
       "      <td>-0.065453</td>\n",
       "      <td>-0.065453</td>\n",
       "      <td>0.091198</td>\n",
       "      <td>0.091198</td>\n",
       "      <td>0.091198</td>\n",
       "      <td>0.091198</td>\n",
       "      <td>0.002053</td>\n",
       "      <td>0.002053</td>\n",
       "      <td>0.002053</td>\n",
       "      <td>0.002053</td>\n",
       "      <td>-0.020794</td>\n",
       "      <td>-0.020794</td>\n",
       "      <td>-0.020794</td>\n",
       "      <td>-0.020794</td>\n",
       "      <td>-0.024846</td>\n",
       "      <td>-0.024846</td>\n",
       "      <td>-0.024846</td>\n",
       "      <td>-0.024846</td>\n",
       "      <td>-0.038853</td>\n",
       "      <td>-0.038853</td>\n",
       "      <td>-0.038853</td>\n",
       "      <td>-0.038853</td>\n",
       "      <td>-0.082593</td>\n",
       "      <td>-0.082593</td>\n",
       "      <td>-0.082593</td>\n",
       "      <td>-0.082593</td>\n",
       "      <td>0.048705</td>\n",
       "      <td>0.048705</td>\n",
       "      <td>0.048705</td>\n",
       "      <td>0.048705</td>\n",
       "      <td>0.128472</td>\n",
       "      <td>0.128472</td>\n",
       "      <td>0.128472</td>\n",
       "      <td>0.128472</td>\n",
       "      <td>-0.000371</td>\n",
       "      <td>-0.000371</td>\n",
       "      <td>-0.000371</td>\n",
       "      <td>-0.000371</td>\n",
       "      <td>-0.136088</td>\n",
       "      <td>0.076260</td>\n",
       "      <td>0.005909</td>\n",
       "      <td>0.055500</td>\n",
       "      <td>-0.066551</td>\n",
       "      <td>0.051511</td>\n",
       "      <td>-0.130263</td>\n",
       "      <td>0.075492</td>\n",
       "      <td>0.012722</td>\n",
       "      <td>0.056832</td>\n",
       "      <td>-0.061240</td>\n",
       "      <td>0.049834</td>\n",
       "      <td>-0.107524</td>\n",
       "      <td>0.050363</td>\n",
       "      <td>-0.015845</td>\n",
       "      <td>0.046873</td>\n",
       "      <td>-0.067414</td>\n",
       "      <td>0.017839</td>\n",
       "      <td>-0.087373</td>\n",
       "      <td>0.081414</td>\n",
       "      <td>0.019381</td>\n",
       "      <td>0.039290</td>\n",
       "      <td>-0.037312</td>\n",
       "      <td>0.047763</td>\n",
       "      <td>0.009159</td>\n",
       "      <td>0.031381</td>\n",
       "      <td>0.030283</td>\n",
       "      <td>0.007681</td>\n",
       "      <td>0.022934</td>\n",
       "      <td>-0.004376</td>\n",
       "      <td>0.015410</td>\n",
       "      <td>0.030434</td>\n",
       "      <td>0.024897</td>\n",
       "      <td>0.004111</td>\n",
       "      <td>0.023840</td>\n",
       "      <td>-0.004512</td>\n",
       "      <td>-0.071114</td>\n",
       "      <td>0.036167</td>\n",
       "      <td>0.045145</td>\n",
       "      <td>-0.050952</td>\n",
       "      <td>-0.088650</td>\n",
       "      <td>-0.085571</td>\n",
       "      <td>-0.073674</td>\n",
       "      <td>-0.099316</td>\n",
       "      <td>-0.009246</td>\n",
       "      <td>0.076382</td>\n",
       "      <td>0.054505</td>\n",
       "      <td>0.103981</td>\n",
       "      <td>0.236776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DISEASE GROUPING 2</th>\n",
       "      <td>0.007865</td>\n",
       "      <td>0.057273</td>\n",
       "      <td>0.004516</td>\n",
       "      <td>0.153279</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.107308</td>\n",
       "      <td>0.101554</td>\n",
       "      <td>0.094671</td>\n",
       "      <td>-0.016866</td>\n",
       "      <td>0.147161</td>\n",
       "      <td>0.134960</td>\n",
       "      <td>0.072102</td>\n",
       "      <td>0.026797</td>\n",
       "      <td>-0.050383</td>\n",
       "      <td>-0.050383</td>\n",
       "      <td>-0.050383</td>\n",
       "      <td>-0.050383</td>\n",
       "      <td>0.117885</td>\n",
       "      <td>0.117885</td>\n",
       "      <td>0.117885</td>\n",
       "      <td>0.117885</td>\n",
       "      <td>0.047839</td>\n",
       "      <td>0.047839</td>\n",
       "      <td>0.047839</td>\n",
       "      <td>0.047839</td>\n",
       "      <td>0.084529</td>\n",
       "      <td>0.084529</td>\n",
       "      <td>0.084529</td>\n",
       "      <td>0.084529</td>\n",
       "      <td>0.007841</td>\n",
       "      <td>0.007841</td>\n",
       "      <td>0.007841</td>\n",
       "      <td>0.007841</td>\n",
       "      <td>-0.013127</td>\n",
       "      <td>-0.013127</td>\n",
       "      <td>-0.013127</td>\n",
       "      <td>-0.013127</td>\n",
       "      <td>-0.010037</td>\n",
       "      <td>-0.010037</td>\n",
       "      <td>-0.010037</td>\n",
       "      <td>-0.010037</td>\n",
       "      <td>-0.039541</td>\n",
       "      <td>-0.039541</td>\n",
       "      <td>-0.039541</td>\n",
       "      <td>-0.039541</td>\n",
       "      <td>0.207432</td>\n",
       "      <td>0.207432</td>\n",
       "      <td>0.207432</td>\n",
       "      <td>0.207432</td>\n",
       "      <td>0.041585</td>\n",
       "      <td>0.041585</td>\n",
       "      <td>0.041585</td>\n",
       "      <td>0.041585</td>\n",
       "      <td>0.012142</td>\n",
       "      <td>0.012142</td>\n",
       "      <td>0.012142</td>\n",
       "      <td>0.012142</td>\n",
       "      <td>0.098642</td>\n",
       "      <td>0.098642</td>\n",
       "      <td>0.098642</td>\n",
       "      <td>0.098642</td>\n",
       "      <td>-0.181133</td>\n",
       "      <td>-0.181133</td>\n",
       "      <td>-0.181133</td>\n",
       "      <td>-0.181133</td>\n",
       "      <td>-0.195834</td>\n",
       "      <td>-0.195834</td>\n",
       "      <td>-0.195834</td>\n",
       "      <td>-0.195834</td>\n",
       "      <td>0.055256</td>\n",
       "      <td>0.055256</td>\n",
       "      <td>0.055256</td>\n",
       "      <td>0.055256</td>\n",
       "      <td>-0.012148</td>\n",
       "      <td>-0.012148</td>\n",
       "      <td>-0.012148</td>\n",
       "      <td>-0.012148</td>\n",
       "      <td>0.016663</td>\n",
       "      <td>0.016663</td>\n",
       "      <td>0.016663</td>\n",
       "      <td>0.016663</td>\n",
       "      <td>-0.014079</td>\n",
       "      <td>-0.014079</td>\n",
       "      <td>-0.014079</td>\n",
       "      <td>-0.014079</td>\n",
       "      <td>0.021099</td>\n",
       "      <td>0.021099</td>\n",
       "      <td>0.021099</td>\n",
       "      <td>0.021099</td>\n",
       "      <td>0.008215</td>\n",
       "      <td>0.008215</td>\n",
       "      <td>0.008215</td>\n",
       "      <td>0.008215</td>\n",
       "      <td>0.004132</td>\n",
       "      <td>0.004132</td>\n",
       "      <td>0.004132</td>\n",
       "      <td>0.004132</td>\n",
       "      <td>0.037866</td>\n",
       "      <td>0.037866</td>\n",
       "      <td>0.037866</td>\n",
       "      <td>0.037866</td>\n",
       "      <td>0.015868</td>\n",
       "      <td>0.015868</td>\n",
       "      <td>0.015868</td>\n",
       "      <td>0.015868</td>\n",
       "      <td>0.008519</td>\n",
       "      <td>0.008519</td>\n",
       "      <td>0.008519</td>\n",
       "      <td>0.008519</td>\n",
       "      <td>0.042223</td>\n",
       "      <td>0.042223</td>\n",
       "      <td>0.042223</td>\n",
       "      <td>0.042223</td>\n",
       "      <td>-0.033436</td>\n",
       "      <td>-0.033436</td>\n",
       "      <td>-0.033436</td>\n",
       "      <td>-0.033436</td>\n",
       "      <td>-0.064459</td>\n",
       "      <td>-0.064459</td>\n",
       "      <td>-0.064459</td>\n",
       "      <td>-0.064459</td>\n",
       "      <td>0.058356</td>\n",
       "      <td>0.058356</td>\n",
       "      <td>0.058356</td>\n",
       "      <td>0.058356</td>\n",
       "      <td>-0.019772</td>\n",
       "      <td>-0.019772</td>\n",
       "      <td>-0.019772</td>\n",
       "      <td>-0.019772</td>\n",
       "      <td>-0.029251</td>\n",
       "      <td>-0.029251</td>\n",
       "      <td>-0.029251</td>\n",
       "      <td>-0.029251</td>\n",
       "      <td>-0.050164</td>\n",
       "      <td>-0.050164</td>\n",
       "      <td>-0.050164</td>\n",
       "      <td>-0.050164</td>\n",
       "      <td>0.001904</td>\n",
       "      <td>0.001904</td>\n",
       "      <td>0.001904</td>\n",
       "      <td>0.001904</td>\n",
       "      <td>-0.018881</td>\n",
       "      <td>-0.018881</td>\n",
       "      <td>-0.018881</td>\n",
       "      <td>-0.018881</td>\n",
       "      <td>-0.013773</td>\n",
       "      <td>-0.013773</td>\n",
       "      <td>-0.013773</td>\n",
       "      <td>-0.013773</td>\n",
       "      <td>0.170536</td>\n",
       "      <td>0.170536</td>\n",
       "      <td>0.170536</td>\n",
       "      <td>0.170536</td>\n",
       "      <td>0.046272</td>\n",
       "      <td>0.046272</td>\n",
       "      <td>0.046272</td>\n",
       "      <td>0.046272</td>\n",
       "      <td>-0.077085</td>\n",
       "      <td>0.038512</td>\n",
       "      <td>-0.013088</td>\n",
       "      <td>0.035687</td>\n",
       "      <td>0.002266</td>\n",
       "      <td>0.034880</td>\n",
       "      <td>-0.080438</td>\n",
       "      <td>0.033823</td>\n",
       "      <td>-0.014964</td>\n",
       "      <td>0.032226</td>\n",
       "      <td>0.002492</td>\n",
       "      <td>0.032520</td>\n",
       "      <td>-0.097790</td>\n",
       "      <td>-0.017487</td>\n",
       "      <td>-0.037816</td>\n",
       "      <td>-0.023823</td>\n",
       "      <td>-0.009899</td>\n",
       "      <td>-0.065886</td>\n",
       "      <td>-0.016980</td>\n",
       "      <td>0.089277</td>\n",
       "      <td>0.012436</td>\n",
       "      <td>0.091881</td>\n",
       "      <td>0.020381</td>\n",
       "      <td>0.057141</td>\n",
       "      <td>0.061518</td>\n",
       "      <td>0.095854</td>\n",
       "      <td>0.041773</td>\n",
       "      <td>0.095052</td>\n",
       "      <td>0.024704</td>\n",
       "      <td>0.078461</td>\n",
       "      <td>0.067419</td>\n",
       "      <td>0.083738</td>\n",
       "      <td>0.037625</td>\n",
       "      <td>0.093635</td>\n",
       "      <td>0.024797</td>\n",
       "      <td>0.079275</td>\n",
       "      <td>-0.042064</td>\n",
       "      <td>0.000150</td>\n",
       "      <td>0.082360</td>\n",
       "      <td>-0.057618</td>\n",
       "      <td>0.015524</td>\n",
       "      <td>0.009828</td>\n",
       "      <td>-0.017266</td>\n",
       "      <td>-0.039469</td>\n",
       "      <td>0.023101</td>\n",
       "      <td>-0.035589</td>\n",
       "      <td>0.004597</td>\n",
       "      <td>0.085243</td>\n",
       "      <td>0.030316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE_PERCENTIL_60th</th>\n",
       "      <td>-0.019118</td>\n",
       "      <td>0.342255</td>\n",
       "      <td>0.033489</td>\n",
       "      <td>-0.009246</td>\n",
       "      <td>0.023101</td>\n",
       "      <td>0.123109</td>\n",
       "      <td>-0.043004</td>\n",
       "      <td>0.020934</td>\n",
       "      <td>0.082095</td>\n",
       "      <td>0.094395</td>\n",
       "      <td>-0.003033</td>\n",
       "      <td>0.014520</td>\n",
       "      <td>0.046568</td>\n",
       "      <td>0.016828</td>\n",
       "      <td>0.016828</td>\n",
       "      <td>0.016828</td>\n",
       "      <td>0.016828</td>\n",
       "      <td>0.142160</td>\n",
       "      <td>0.142160</td>\n",
       "      <td>0.142160</td>\n",
       "      <td>0.142160</td>\n",
       "      <td>-0.013318</td>\n",
       "      <td>-0.013318</td>\n",
       "      <td>-0.013318</td>\n",
       "      <td>-0.013318</td>\n",
       "      <td>0.077164</td>\n",
       "      <td>0.077164</td>\n",
       "      <td>0.077164</td>\n",
       "      <td>0.077164</td>\n",
       "      <td>0.001785</td>\n",
       "      <td>0.001785</td>\n",
       "      <td>0.001785</td>\n",
       "      <td>0.001785</td>\n",
       "      <td>-0.004700</td>\n",
       "      <td>-0.004700</td>\n",
       "      <td>-0.004700</td>\n",
       "      <td>-0.004700</td>\n",
       "      <td>-0.020016</td>\n",
       "      <td>-0.020016</td>\n",
       "      <td>-0.020016</td>\n",
       "      <td>-0.020016</td>\n",
       "      <td>-0.045306</td>\n",
       "      <td>-0.045306</td>\n",
       "      <td>-0.045306</td>\n",
       "      <td>-0.045306</td>\n",
       "      <td>-0.042579</td>\n",
       "      <td>-0.042579</td>\n",
       "      <td>-0.042579</td>\n",
       "      <td>-0.042579</td>\n",
       "      <td>-0.029871</td>\n",
       "      <td>-0.029871</td>\n",
       "      <td>-0.029871</td>\n",
       "      <td>-0.029871</td>\n",
       "      <td>-0.043500</td>\n",
       "      <td>-0.043500</td>\n",
       "      <td>-0.043500</td>\n",
       "      <td>-0.043500</td>\n",
       "      <td>0.049038</td>\n",
       "      <td>0.049038</td>\n",
       "      <td>0.049038</td>\n",
       "      <td>0.049038</td>\n",
       "      <td>0.055083</td>\n",
       "      <td>0.055083</td>\n",
       "      <td>0.055083</td>\n",
       "      <td>0.055083</td>\n",
       "      <td>0.047545</td>\n",
       "      <td>0.047545</td>\n",
       "      <td>0.047545</td>\n",
       "      <td>0.047545</td>\n",
       "      <td>-0.024228</td>\n",
       "      <td>-0.024228</td>\n",
       "      <td>-0.024228</td>\n",
       "      <td>-0.024228</td>\n",
       "      <td>-0.060573</td>\n",
       "      <td>-0.060573</td>\n",
       "      <td>-0.060573</td>\n",
       "      <td>-0.060573</td>\n",
       "      <td>-0.046688</td>\n",
       "      <td>-0.046688</td>\n",
       "      <td>-0.046688</td>\n",
       "      <td>-0.046688</td>\n",
       "      <td>-0.040663</td>\n",
       "      <td>-0.040663</td>\n",
       "      <td>-0.040663</td>\n",
       "      <td>-0.040663</td>\n",
       "      <td>-0.035196</td>\n",
       "      <td>-0.035196</td>\n",
       "      <td>-0.035196</td>\n",
       "      <td>-0.035196</td>\n",
       "      <td>-0.084242</td>\n",
       "      <td>-0.084242</td>\n",
       "      <td>-0.084242</td>\n",
       "      <td>-0.084242</td>\n",
       "      <td>-0.049044</td>\n",
       "      <td>-0.049044</td>\n",
       "      <td>-0.049044</td>\n",
       "      <td>-0.049044</td>\n",
       "      <td>-0.031637</td>\n",
       "      <td>-0.031637</td>\n",
       "      <td>-0.031637</td>\n",
       "      <td>-0.031637</td>\n",
       "      <td>0.016289</td>\n",
       "      <td>0.016289</td>\n",
       "      <td>0.016289</td>\n",
       "      <td>0.016289</td>\n",
       "      <td>0.037892</td>\n",
       "      <td>0.037892</td>\n",
       "      <td>0.037892</td>\n",
       "      <td>0.037892</td>\n",
       "      <td>0.104581</td>\n",
       "      <td>0.104581</td>\n",
       "      <td>0.104581</td>\n",
       "      <td>0.104581</td>\n",
       "      <td>-0.024688</td>\n",
       "      <td>-0.024688</td>\n",
       "      <td>-0.024688</td>\n",
       "      <td>-0.024688</td>\n",
       "      <td>-0.014141</td>\n",
       "      <td>-0.014141</td>\n",
       "      <td>-0.014141</td>\n",
       "      <td>-0.014141</td>\n",
       "      <td>-0.007391</td>\n",
       "      <td>-0.007391</td>\n",
       "      <td>-0.007391</td>\n",
       "      <td>-0.007391</td>\n",
       "      <td>-0.126554</td>\n",
       "      <td>-0.126554</td>\n",
       "      <td>-0.126554</td>\n",
       "      <td>-0.126554</td>\n",
       "      <td>-0.069683</td>\n",
       "      <td>-0.069683</td>\n",
       "      <td>-0.069683</td>\n",
       "      <td>-0.069683</td>\n",
       "      <td>-0.040166</td>\n",
       "      <td>-0.040166</td>\n",
       "      <td>-0.040166</td>\n",
       "      <td>-0.040166</td>\n",
       "      <td>-0.025528</td>\n",
       "      <td>-0.025528</td>\n",
       "      <td>-0.025528</td>\n",
       "      <td>-0.025528</td>\n",
       "      <td>-0.051416</td>\n",
       "      <td>-0.051416</td>\n",
       "      <td>-0.051416</td>\n",
       "      <td>-0.051416</td>\n",
       "      <td>0.013201</td>\n",
       "      <td>0.013201</td>\n",
       "      <td>0.013201</td>\n",
       "      <td>0.013201</td>\n",
       "      <td>-0.029394</td>\n",
       "      <td>-0.029394</td>\n",
       "      <td>-0.029394</td>\n",
       "      <td>-0.029394</td>\n",
       "      <td>-0.022767</td>\n",
       "      <td>-0.022767</td>\n",
       "      <td>-0.022767</td>\n",
       "      <td>-0.022767</td>\n",
       "      <td>0.004654</td>\n",
       "      <td>0.005102</td>\n",
       "      <td>-0.032310</td>\n",
       "      <td>-0.002530</td>\n",
       "      <td>-0.036222</td>\n",
       "      <td>-0.056213</td>\n",
       "      <td>0.008357</td>\n",
       "      <td>0.006242</td>\n",
       "      <td>-0.036934</td>\n",
       "      <td>-0.012600</td>\n",
       "      <td>-0.027681</td>\n",
       "      <td>-0.060416</td>\n",
       "      <td>-0.000666</td>\n",
       "      <td>-0.013060</td>\n",
       "      <td>-0.036691</td>\n",
       "      <td>-0.023341</td>\n",
       "      <td>-0.042687</td>\n",
       "      <td>-0.087478</td>\n",
       "      <td>0.002533</td>\n",
       "      <td>0.036454</td>\n",
       "      <td>-0.029485</td>\n",
       "      <td>0.023515</td>\n",
       "      <td>-0.012056</td>\n",
       "      <td>-0.026558</td>\n",
       "      <td>0.002673</td>\n",
       "      <td>0.044142</td>\n",
       "      <td>0.003055</td>\n",
       "      <td>0.034289</td>\n",
       "      <td>0.024068</td>\n",
       "      <td>0.076853</td>\n",
       "      <td>0.004529</td>\n",
       "      <td>0.042464</td>\n",
       "      <td>0.004534</td>\n",
       "      <td>0.029657</td>\n",
       "      <td>0.022469</td>\n",
       "      <td>0.077005</td>\n",
       "      <td>0.005365</td>\n",
       "      <td>0.001576</td>\n",
       "      <td>-0.011763</td>\n",
       "      <td>-0.114910</td>\n",
       "      <td>-0.118730</td>\n",
       "      <td>-0.111377</td>\n",
       "      <td>-0.112443</td>\n",
       "      <td>-0.105958</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.099610</td>\n",
       "      <td>-0.102627</td>\n",
       "      <td>-0.086880</td>\n",
       "      <td>-0.092195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE_PERCENTIL_70th</th>\n",
       "      <td>-0.050190</td>\n",
       "      <td>0.369008</td>\n",
       "      <td>0.014367</td>\n",
       "      <td>0.076382</td>\n",
       "      <td>-0.035589</td>\n",
       "      <td>0.104599</td>\n",
       "      <td>0.136756</td>\n",
       "      <td>0.045413</td>\n",
       "      <td>0.029037</td>\n",
       "      <td>0.101622</td>\n",
       "      <td>0.126549</td>\n",
       "      <td>0.017414</td>\n",
       "      <td>-0.033222</td>\n",
       "      <td>0.006310</td>\n",
       "      <td>0.006310</td>\n",
       "      <td>0.006310</td>\n",
       "      <td>0.006310</td>\n",
       "      <td>-0.025228</td>\n",
       "      <td>-0.025228</td>\n",
       "      <td>-0.025228</td>\n",
       "      <td>-0.025228</td>\n",
       "      <td>0.073087</td>\n",
       "      <td>0.073087</td>\n",
       "      <td>0.073087</td>\n",
       "      <td>0.073087</td>\n",
       "      <td>-0.015201</td>\n",
       "      <td>-0.015201</td>\n",
       "      <td>-0.015201</td>\n",
       "      <td>-0.015201</td>\n",
       "      <td>0.063445</td>\n",
       "      <td>0.063445</td>\n",
       "      <td>0.063445</td>\n",
       "      <td>0.063445</td>\n",
       "      <td>0.020777</td>\n",
       "      <td>0.020777</td>\n",
       "      <td>0.020777</td>\n",
       "      <td>0.020777</td>\n",
       "      <td>-0.020249</td>\n",
       "      <td>-0.020249</td>\n",
       "      <td>-0.020249</td>\n",
       "      <td>-0.020249</td>\n",
       "      <td>-0.024664</td>\n",
       "      <td>-0.024664</td>\n",
       "      <td>-0.024664</td>\n",
       "      <td>-0.024664</td>\n",
       "      <td>0.022233</td>\n",
       "      <td>0.022233</td>\n",
       "      <td>0.022233</td>\n",
       "      <td>0.022233</td>\n",
       "      <td>-0.039609</td>\n",
       "      <td>-0.039609</td>\n",
       "      <td>-0.039609</td>\n",
       "      <td>-0.039609</td>\n",
       "      <td>-0.016080</td>\n",
       "      <td>-0.016080</td>\n",
       "      <td>-0.016080</td>\n",
       "      <td>-0.016080</td>\n",
       "      <td>-0.040436</td>\n",
       "      <td>-0.040436</td>\n",
       "      <td>-0.040436</td>\n",
       "      <td>-0.040436</td>\n",
       "      <td>-0.176395</td>\n",
       "      <td>-0.176395</td>\n",
       "      <td>-0.176395</td>\n",
       "      <td>-0.176395</td>\n",
       "      <td>-0.165395</td>\n",
       "      <td>-0.165395</td>\n",
       "      <td>-0.165395</td>\n",
       "      <td>-0.165395</td>\n",
       "      <td>0.067584</td>\n",
       "      <td>0.067584</td>\n",
       "      <td>0.067584</td>\n",
       "      <td>0.067584</td>\n",
       "      <td>0.019854</td>\n",
       "      <td>0.019854</td>\n",
       "      <td>0.019854</td>\n",
       "      <td>0.019854</td>\n",
       "      <td>-0.043233</td>\n",
       "      <td>-0.043233</td>\n",
       "      <td>-0.043233</td>\n",
       "      <td>-0.043233</td>\n",
       "      <td>-0.013579</td>\n",
       "      <td>-0.013579</td>\n",
       "      <td>-0.013579</td>\n",
       "      <td>-0.013579</td>\n",
       "      <td>-0.038577</td>\n",
       "      <td>-0.038577</td>\n",
       "      <td>-0.038577</td>\n",
       "      <td>-0.038577</td>\n",
       "      <td>-0.029993</td>\n",
       "      <td>-0.029993</td>\n",
       "      <td>-0.029993</td>\n",
       "      <td>-0.029993</td>\n",
       "      <td>-0.009304</td>\n",
       "      <td>-0.009304</td>\n",
       "      <td>-0.009304</td>\n",
       "      <td>-0.009304</td>\n",
       "      <td>0.009209</td>\n",
       "      <td>0.009209</td>\n",
       "      <td>0.009209</td>\n",
       "      <td>0.009209</td>\n",
       "      <td>0.003130</td>\n",
       "      <td>0.003130</td>\n",
       "      <td>0.003130</td>\n",
       "      <td>0.003130</td>\n",
       "      <td>0.024952</td>\n",
       "      <td>0.024952</td>\n",
       "      <td>0.024952</td>\n",
       "      <td>0.024952</td>\n",
       "      <td>-0.024698</td>\n",
       "      <td>-0.024698</td>\n",
       "      <td>-0.024698</td>\n",
       "      <td>-0.024698</td>\n",
       "      <td>0.047922</td>\n",
       "      <td>0.047922</td>\n",
       "      <td>0.047922</td>\n",
       "      <td>0.047922</td>\n",
       "      <td>-0.113782</td>\n",
       "      <td>-0.113782</td>\n",
       "      <td>-0.113782</td>\n",
       "      <td>-0.113782</td>\n",
       "      <td>0.027274</td>\n",
       "      <td>0.027274</td>\n",
       "      <td>0.027274</td>\n",
       "      <td>0.027274</td>\n",
       "      <td>0.003332</td>\n",
       "      <td>0.003332</td>\n",
       "      <td>0.003332</td>\n",
       "      <td>0.003332</td>\n",
       "      <td>-0.028409</td>\n",
       "      <td>-0.028409</td>\n",
       "      <td>-0.028409</td>\n",
       "      <td>-0.028409</td>\n",
       "      <td>-0.017394</td>\n",
       "      <td>-0.017394</td>\n",
       "      <td>-0.017394</td>\n",
       "      <td>-0.017394</td>\n",
       "      <td>0.013993</td>\n",
       "      <td>0.013993</td>\n",
       "      <td>0.013993</td>\n",
       "      <td>0.013993</td>\n",
       "      <td>0.011052</td>\n",
       "      <td>0.011052</td>\n",
       "      <td>0.011052</td>\n",
       "      <td>0.011052</td>\n",
       "      <td>0.019384</td>\n",
       "      <td>0.019384</td>\n",
       "      <td>0.019384</td>\n",
       "      <td>0.019384</td>\n",
       "      <td>0.037489</td>\n",
       "      <td>0.037489</td>\n",
       "      <td>0.037489</td>\n",
       "      <td>0.037489</td>\n",
       "      <td>0.039238</td>\n",
       "      <td>0.039238</td>\n",
       "      <td>0.039238</td>\n",
       "      <td>0.039238</td>\n",
       "      <td>-0.053111</td>\n",
       "      <td>0.060404</td>\n",
       "      <td>-0.119560</td>\n",
       "      <td>-0.012029</td>\n",
       "      <td>-0.084434</td>\n",
       "      <td>-0.019098</td>\n",
       "      <td>-0.049869</td>\n",
       "      <td>0.064265</td>\n",
       "      <td>-0.120775</td>\n",
       "      <td>-0.008186</td>\n",
       "      <td>-0.089068</td>\n",
       "      <td>-0.006775</td>\n",
       "      <td>-0.033194</td>\n",
       "      <td>0.055952</td>\n",
       "      <td>-0.099530</td>\n",
       "      <td>-0.008962</td>\n",
       "      <td>-0.053378</td>\n",
       "      <td>0.016494</td>\n",
       "      <td>-0.020567</td>\n",
       "      <td>0.040033</td>\n",
       "      <td>-0.091444</td>\n",
       "      <td>-0.024936</td>\n",
       "      <td>-0.077015</td>\n",
       "      <td>-0.009193</td>\n",
       "      <td>0.008280</td>\n",
       "      <td>-0.010923</td>\n",
       "      <td>-0.002047</td>\n",
       "      <td>-0.016884</td>\n",
       "      <td>-0.021009</td>\n",
       "      <td>-0.018279</td>\n",
       "      <td>0.007290</td>\n",
       "      <td>-0.014555</td>\n",
       "      <td>0.014513</td>\n",
       "      <td>-0.011849</td>\n",
       "      <td>-0.019324</td>\n",
       "      <td>-0.017674</td>\n",
       "      <td>-0.016100</td>\n",
       "      <td>0.022067</td>\n",
       "      <td>0.015032</td>\n",
       "      <td>-0.116247</td>\n",
       "      <td>-0.120113</td>\n",
       "      <td>-0.112674</td>\n",
       "      <td>-0.113752</td>\n",
       "      <td>-0.107192</td>\n",
       "      <td>-0.099610</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.103822</td>\n",
       "      <td>-0.087892</td>\n",
       "      <td>-0.093269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE_PERCENTIL_80th</th>\n",
       "      <td>-0.025630</td>\n",
       "      <td>0.380186</td>\n",
       "      <td>-0.048219</td>\n",
       "      <td>0.054505</td>\n",
       "      <td>0.004597</td>\n",
       "      <td>-0.029837</td>\n",
       "      <td>0.019158</td>\n",
       "      <td>0.170320</td>\n",
       "      <td>-0.035059</td>\n",
       "      <td>0.135018</td>\n",
       "      <td>0.010257</td>\n",
       "      <td>0.019204</td>\n",
       "      <td>0.021260</td>\n",
       "      <td>-0.056974</td>\n",
       "      <td>-0.056974</td>\n",
       "      <td>-0.056974</td>\n",
       "      <td>-0.056974</td>\n",
       "      <td>0.033329</td>\n",
       "      <td>0.033329</td>\n",
       "      <td>0.033329</td>\n",
       "      <td>0.033329</td>\n",
       "      <td>0.049741</td>\n",
       "      <td>0.049741</td>\n",
       "      <td>0.049741</td>\n",
       "      <td>0.049741</td>\n",
       "      <td>0.023138</td>\n",
       "      <td>0.023138</td>\n",
       "      <td>0.023138</td>\n",
       "      <td>0.023138</td>\n",
       "      <td>0.031943</td>\n",
       "      <td>0.031943</td>\n",
       "      <td>0.031943</td>\n",
       "      <td>0.031943</td>\n",
       "      <td>0.081762</td>\n",
       "      <td>0.081762</td>\n",
       "      <td>0.081762</td>\n",
       "      <td>0.081762</td>\n",
       "      <td>-0.020690</td>\n",
       "      <td>-0.020690</td>\n",
       "      <td>-0.020690</td>\n",
       "      <td>-0.020690</td>\n",
       "      <td>-0.030359</td>\n",
       "      <td>-0.030359</td>\n",
       "      <td>-0.030359</td>\n",
       "      <td>-0.030359</td>\n",
       "      <td>0.172717</td>\n",
       "      <td>0.172717</td>\n",
       "      <td>0.172717</td>\n",
       "      <td>0.172717</td>\n",
       "      <td>0.045239</td>\n",
       "      <td>0.045239</td>\n",
       "      <td>0.045239</td>\n",
       "      <td>0.045239</td>\n",
       "      <td>-0.026150</td>\n",
       "      <td>-0.026150</td>\n",
       "      <td>-0.026150</td>\n",
       "      <td>-0.026150</td>\n",
       "      <td>-0.014759</td>\n",
       "      <td>-0.014759</td>\n",
       "      <td>-0.014759</td>\n",
       "      <td>-0.014759</td>\n",
       "      <td>-0.073896</td>\n",
       "      <td>-0.073896</td>\n",
       "      <td>-0.073896</td>\n",
       "      <td>-0.073896</td>\n",
       "      <td>-0.075867</td>\n",
       "      <td>-0.075867</td>\n",
       "      <td>-0.075867</td>\n",
       "      <td>-0.075867</td>\n",
       "      <td>0.077855</td>\n",
       "      <td>0.077855</td>\n",
       "      <td>0.077855</td>\n",
       "      <td>0.077855</td>\n",
       "      <td>0.007808</td>\n",
       "      <td>0.007808</td>\n",
       "      <td>0.007808</td>\n",
       "      <td>0.007808</td>\n",
       "      <td>-0.040030</td>\n",
       "      <td>-0.040030</td>\n",
       "      <td>-0.040030</td>\n",
       "      <td>-0.040030</td>\n",
       "      <td>-0.102933</td>\n",
       "      <td>-0.102933</td>\n",
       "      <td>-0.102933</td>\n",
       "      <td>-0.102933</td>\n",
       "      <td>-0.015800</td>\n",
       "      <td>-0.015800</td>\n",
       "      <td>-0.015800</td>\n",
       "      <td>-0.015800</td>\n",
       "      <td>-0.028739</td>\n",
       "      <td>-0.028739</td>\n",
       "      <td>-0.028739</td>\n",
       "      <td>-0.028739</td>\n",
       "      <td>0.025307</td>\n",
       "      <td>0.025307</td>\n",
       "      <td>0.025307</td>\n",
       "      <td>0.025307</td>\n",
       "      <td>0.006548</td>\n",
       "      <td>0.006548</td>\n",
       "      <td>0.006548</td>\n",
       "      <td>0.006548</td>\n",
       "      <td>-0.033915</td>\n",
       "      <td>-0.033915</td>\n",
       "      <td>-0.033915</td>\n",
       "      <td>-0.033915</td>\n",
       "      <td>-0.018490</td>\n",
       "      <td>-0.018490</td>\n",
       "      <td>-0.018490</td>\n",
       "      <td>-0.018490</td>\n",
       "      <td>0.018032</td>\n",
       "      <td>0.018032</td>\n",
       "      <td>0.018032</td>\n",
       "      <td>0.018032</td>\n",
       "      <td>0.085857</td>\n",
       "      <td>0.085857</td>\n",
       "      <td>0.085857</td>\n",
       "      <td>0.085857</td>\n",
       "      <td>-0.078394</td>\n",
       "      <td>-0.078394</td>\n",
       "      <td>-0.078394</td>\n",
       "      <td>-0.078394</td>\n",
       "      <td>-0.060407</td>\n",
       "      <td>-0.060407</td>\n",
       "      <td>-0.060407</td>\n",
       "      <td>-0.060407</td>\n",
       "      <td>-0.014052</td>\n",
       "      <td>-0.014052</td>\n",
       "      <td>-0.014052</td>\n",
       "      <td>-0.014052</td>\n",
       "      <td>0.028209</td>\n",
       "      <td>0.028209</td>\n",
       "      <td>0.028209</td>\n",
       "      <td>0.028209</td>\n",
       "      <td>0.038117</td>\n",
       "      <td>0.038117</td>\n",
       "      <td>0.038117</td>\n",
       "      <td>0.038117</td>\n",
       "      <td>0.142807</td>\n",
       "      <td>0.142807</td>\n",
       "      <td>0.142807</td>\n",
       "      <td>0.142807</td>\n",
       "      <td>0.100054</td>\n",
       "      <td>0.100054</td>\n",
       "      <td>0.100054</td>\n",
       "      <td>0.100054</td>\n",
       "      <td>-0.000850</td>\n",
       "      <td>-0.000850</td>\n",
       "      <td>-0.000850</td>\n",
       "      <td>-0.000850</td>\n",
       "      <td>0.174140</td>\n",
       "      <td>0.174140</td>\n",
       "      <td>0.174140</td>\n",
       "      <td>0.174140</td>\n",
       "      <td>-0.011301</td>\n",
       "      <td>-0.011301</td>\n",
       "      <td>-0.011301</td>\n",
       "      <td>-0.011301</td>\n",
       "      <td>-0.052881</td>\n",
       "      <td>0.040960</td>\n",
       "      <td>-0.125725</td>\n",
       "      <td>0.023043</td>\n",
       "      <td>-0.029821</td>\n",
       "      <td>-0.051971</td>\n",
       "      <td>-0.052979</td>\n",
       "      <td>0.043003</td>\n",
       "      <td>-0.118066</td>\n",
       "      <td>0.020761</td>\n",
       "      <td>-0.037097</td>\n",
       "      <td>-0.038063</td>\n",
       "      <td>-0.051982</td>\n",
       "      <td>0.005482</td>\n",
       "      <td>-0.121007</td>\n",
       "      <td>-0.008251</td>\n",
       "      <td>-0.026693</td>\n",
       "      <td>-0.048422</td>\n",
       "      <td>-0.027230</td>\n",
       "      <td>0.045213</td>\n",
       "      <td>-0.075540</td>\n",
       "      <td>0.036039</td>\n",
       "      <td>-0.005385</td>\n",
       "      <td>-0.034433</td>\n",
       "      <td>0.017205</td>\n",
       "      <td>0.036429</td>\n",
       "      <td>0.029652</td>\n",
       "      <td>0.036651</td>\n",
       "      <td>0.016827</td>\n",
       "      <td>0.037278</td>\n",
       "      <td>0.025348</td>\n",
       "      <td>0.025148</td>\n",
       "      <td>0.040777</td>\n",
       "      <td>0.035368</td>\n",
       "      <td>0.017503</td>\n",
       "      <td>0.037763</td>\n",
       "      <td>-0.023326</td>\n",
       "      <td>-0.036897</td>\n",
       "      <td>0.058240</td>\n",
       "      <td>-0.119769</td>\n",
       "      <td>-0.123751</td>\n",
       "      <td>-0.116087</td>\n",
       "      <td>-0.117198</td>\n",
       "      <td>-0.110438</td>\n",
       "      <td>-0.102627</td>\n",
       "      <td>-0.103822</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.090554</td>\n",
       "      <td>-0.096094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE_PERCENTIL_90th</th>\n",
       "      <td>0.050998</td>\n",
       "      <td>0.321851</td>\n",
       "      <td>0.017056</td>\n",
       "      <td>0.103981</td>\n",
       "      <td>0.085243</td>\n",
       "      <td>0.048503</td>\n",
       "      <td>-0.037945</td>\n",
       "      <td>0.125779</td>\n",
       "      <td>-0.063243</td>\n",
       "      <td>0.120301</td>\n",
       "      <td>0.102126</td>\n",
       "      <td>0.055078</td>\n",
       "      <td>-0.033373</td>\n",
       "      <td>-0.046543</td>\n",
       "      <td>-0.046543</td>\n",
       "      <td>-0.046543</td>\n",
       "      <td>-0.046543</td>\n",
       "      <td>-0.013157</td>\n",
       "      <td>-0.013157</td>\n",
       "      <td>-0.013157</td>\n",
       "      <td>-0.013157</td>\n",
       "      <td>0.058076</td>\n",
       "      <td>0.058076</td>\n",
       "      <td>0.058076</td>\n",
       "      <td>0.058076</td>\n",
       "      <td>-0.029855</td>\n",
       "      <td>-0.029855</td>\n",
       "      <td>-0.029855</td>\n",
       "      <td>-0.029855</td>\n",
       "      <td>0.033372</td>\n",
       "      <td>0.033372</td>\n",
       "      <td>0.033372</td>\n",
       "      <td>0.033372</td>\n",
       "      <td>-0.006143</td>\n",
       "      <td>-0.006143</td>\n",
       "      <td>-0.006143</td>\n",
       "      <td>-0.006143</td>\n",
       "      <td>0.200138</td>\n",
       "      <td>0.200138</td>\n",
       "      <td>0.200138</td>\n",
       "      <td>0.200138</td>\n",
       "      <td>-0.036129</td>\n",
       "      <td>-0.036129</td>\n",
       "      <td>-0.036129</td>\n",
       "      <td>-0.036129</td>\n",
       "      <td>0.029219</td>\n",
       "      <td>0.029219</td>\n",
       "      <td>0.029219</td>\n",
       "      <td>0.029219</td>\n",
       "      <td>0.010954</td>\n",
       "      <td>0.010954</td>\n",
       "      <td>0.010954</td>\n",
       "      <td>0.010954</td>\n",
       "      <td>-0.034797</td>\n",
       "      <td>-0.034797</td>\n",
       "      <td>-0.034797</td>\n",
       "      <td>-0.034797</td>\n",
       "      <td>0.010359</td>\n",
       "      <td>0.010359</td>\n",
       "      <td>0.010359</td>\n",
       "      <td>0.010359</td>\n",
       "      <td>-0.081946</td>\n",
       "      <td>-0.081946</td>\n",
       "      <td>-0.081946</td>\n",
       "      <td>-0.081946</td>\n",
       "      <td>-0.095493</td>\n",
       "      <td>-0.095493</td>\n",
       "      <td>-0.095493</td>\n",
       "      <td>-0.095493</td>\n",
       "      <td>-0.009987</td>\n",
       "      <td>-0.009987</td>\n",
       "      <td>-0.009987</td>\n",
       "      <td>-0.009987</td>\n",
       "      <td>-0.058890</td>\n",
       "      <td>-0.058890</td>\n",
       "      <td>-0.058890</td>\n",
       "      <td>-0.058890</td>\n",
       "      <td>0.084550</td>\n",
       "      <td>0.084550</td>\n",
       "      <td>0.084550</td>\n",
       "      <td>0.084550</td>\n",
       "      <td>0.000526</td>\n",
       "      <td>0.000526</td>\n",
       "      <td>0.000526</td>\n",
       "      <td>0.000526</td>\n",
       "      <td>0.085105</td>\n",
       "      <td>0.085105</td>\n",
       "      <td>0.085105</td>\n",
       "      <td>0.085105</td>\n",
       "      <td>0.028710</td>\n",
       "      <td>0.028710</td>\n",
       "      <td>0.028710</td>\n",
       "      <td>0.028710</td>\n",
       "      <td>-0.018165</td>\n",
       "      <td>-0.018165</td>\n",
       "      <td>-0.018165</td>\n",
       "      <td>-0.018165</td>\n",
       "      <td>-0.022675</td>\n",
       "      <td>-0.022675</td>\n",
       "      <td>-0.022675</td>\n",
       "      <td>-0.022675</td>\n",
       "      <td>0.071827</td>\n",
       "      <td>0.071827</td>\n",
       "      <td>0.071827</td>\n",
       "      <td>0.071827</td>\n",
       "      <td>0.041640</td>\n",
       "      <td>0.041640</td>\n",
       "      <td>0.041640</td>\n",
       "      <td>0.041640</td>\n",
       "      <td>-0.013925</td>\n",
       "      <td>-0.013925</td>\n",
       "      <td>-0.013925</td>\n",
       "      <td>-0.013925</td>\n",
       "      <td>-0.046040</td>\n",
       "      <td>-0.046040</td>\n",
       "      <td>-0.046040</td>\n",
       "      <td>-0.046040</td>\n",
       "      <td>-0.012844</td>\n",
       "      <td>-0.012844</td>\n",
       "      <td>-0.012844</td>\n",
       "      <td>-0.012844</td>\n",
       "      <td>0.147246</td>\n",
       "      <td>0.147246</td>\n",
       "      <td>0.147246</td>\n",
       "      <td>0.147246</td>\n",
       "      <td>0.021959</td>\n",
       "      <td>0.021959</td>\n",
       "      <td>0.021959</td>\n",
       "      <td>0.021959</td>\n",
       "      <td>-0.053835</td>\n",
       "      <td>-0.053835</td>\n",
       "      <td>-0.053835</td>\n",
       "      <td>-0.053835</td>\n",
       "      <td>-0.058816</td>\n",
       "      <td>-0.058816</td>\n",
       "      <td>-0.058816</td>\n",
       "      <td>-0.058816</td>\n",
       "      <td>-0.018972</td>\n",
       "      <td>-0.018972</td>\n",
       "      <td>-0.018972</td>\n",
       "      <td>-0.018972</td>\n",
       "      <td>-0.039160</td>\n",
       "      <td>-0.039160</td>\n",
       "      <td>-0.039160</td>\n",
       "      <td>-0.039160</td>\n",
       "      <td>0.005786</td>\n",
       "      <td>0.005786</td>\n",
       "      <td>0.005786</td>\n",
       "      <td>0.005786</td>\n",
       "      <td>0.122963</td>\n",
       "      <td>0.122963</td>\n",
       "      <td>0.122963</td>\n",
       "      <td>0.122963</td>\n",
       "      <td>-0.009991</td>\n",
       "      <td>-0.009991</td>\n",
       "      <td>-0.009991</td>\n",
       "      <td>-0.009991</td>\n",
       "      <td>-0.004553</td>\n",
       "      <td>0.130305</td>\n",
       "      <td>-0.043693</td>\n",
       "      <td>-0.004108</td>\n",
       "      <td>-0.010255</td>\n",
       "      <td>-0.006510</td>\n",
       "      <td>-0.008900</td>\n",
       "      <td>0.128893</td>\n",
       "      <td>-0.039778</td>\n",
       "      <td>-0.006208</td>\n",
       "      <td>-0.004627</td>\n",
       "      <td>-0.006385</td>\n",
       "      <td>0.013375</td>\n",
       "      <td>0.120578</td>\n",
       "      <td>-0.004651</td>\n",
       "      <td>0.016454</td>\n",
       "      <td>-0.006508</td>\n",
       "      <td>0.006017</td>\n",
       "      <td>-0.009085</td>\n",
       "      <td>0.107423</td>\n",
       "      <td>-0.069407</td>\n",
       "      <td>-0.029551</td>\n",
       "      <td>-0.012878</td>\n",
       "      <td>-0.014940</td>\n",
       "      <td>-0.018124</td>\n",
       "      <td>-0.004330</td>\n",
       "      <td>-0.058839</td>\n",
       "      <td>-0.035650</td>\n",
       "      <td>-0.005440</td>\n",
       "      <td>-0.009758</td>\n",
       "      <td>-0.010704</td>\n",
       "      <td>-0.001351</td>\n",
       "      <td>-0.061165</td>\n",
       "      <td>-0.032367</td>\n",
       "      <td>-0.005087</td>\n",
       "      <td>-0.010137</td>\n",
       "      <td>0.046209</td>\n",
       "      <td>0.000704</td>\n",
       "      <td>0.068088</td>\n",
       "      <td>-0.101392</td>\n",
       "      <td>-0.104763</td>\n",
       "      <td>-0.098275</td>\n",
       "      <td>-0.099215</td>\n",
       "      <td>-0.093493</td>\n",
       "      <td>-0.086880</td>\n",
       "      <td>-0.087892</td>\n",
       "      <td>-0.090554</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.081349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE_PERCENTIL_Above 90th</th>\n",
       "      <td>0.012995</td>\n",
       "      <td>0.341540</td>\n",
       "      <td>0.074544</td>\n",
       "      <td>0.236776</td>\n",
       "      <td>0.030316</td>\n",
       "      <td>0.044506</td>\n",
       "      <td>-0.040267</td>\n",
       "      <td>0.202280</td>\n",
       "      <td>-0.012975</td>\n",
       "      <td>0.135833</td>\n",
       "      <td>0.051695</td>\n",
       "      <td>0.116023</td>\n",
       "      <td>-0.036759</td>\n",
       "      <td>-0.098744</td>\n",
       "      <td>-0.098744</td>\n",
       "      <td>-0.098744</td>\n",
       "      <td>-0.098744</td>\n",
       "      <td>-0.038525</td>\n",
       "      <td>-0.038525</td>\n",
       "      <td>-0.038525</td>\n",
       "      <td>-0.038525</td>\n",
       "      <td>0.061415</td>\n",
       "      <td>0.061415</td>\n",
       "      <td>0.061415</td>\n",
       "      <td>0.061415</td>\n",
       "      <td>-0.040201</td>\n",
       "      <td>-0.040201</td>\n",
       "      <td>-0.040201</td>\n",
       "      <td>-0.040201</td>\n",
       "      <td>-0.049593</td>\n",
       "      <td>-0.049593</td>\n",
       "      <td>-0.049593</td>\n",
       "      <td>-0.049593</td>\n",
       "      <td>-0.014451</td>\n",
       "      <td>-0.014451</td>\n",
       "      <td>-0.014451</td>\n",
       "      <td>-0.014451</td>\n",
       "      <td>-0.018742</td>\n",
       "      <td>-0.018742</td>\n",
       "      <td>-0.018742</td>\n",
       "      <td>-0.018742</td>\n",
       "      <td>-0.043129</td>\n",
       "      <td>-0.043129</td>\n",
       "      <td>-0.043129</td>\n",
       "      <td>-0.043129</td>\n",
       "      <td>0.009967</td>\n",
       "      <td>0.009967</td>\n",
       "      <td>0.009967</td>\n",
       "      <td>0.009967</td>\n",
       "      <td>-0.031458</td>\n",
       "      <td>-0.031458</td>\n",
       "      <td>-0.031458</td>\n",
       "      <td>-0.031458</td>\n",
       "      <td>-0.060255</td>\n",
       "      <td>-0.060255</td>\n",
       "      <td>-0.060255</td>\n",
       "      <td>-0.060255</td>\n",
       "      <td>0.061395</td>\n",
       "      <td>0.061395</td>\n",
       "      <td>0.061395</td>\n",
       "      <td>0.061395</td>\n",
       "      <td>-0.161441</td>\n",
       "      <td>-0.161441</td>\n",
       "      <td>-0.161441</td>\n",
       "      <td>-0.161441</td>\n",
       "      <td>-0.170020</td>\n",
       "      <td>-0.170020</td>\n",
       "      <td>-0.170020</td>\n",
       "      <td>-0.170020</td>\n",
       "      <td>-0.004503</td>\n",
       "      <td>-0.004503</td>\n",
       "      <td>-0.004503</td>\n",
       "      <td>-0.004503</td>\n",
       "      <td>0.022285</td>\n",
       "      <td>0.022285</td>\n",
       "      <td>0.022285</td>\n",
       "      <td>0.022285</td>\n",
       "      <td>0.048671</td>\n",
       "      <td>0.048671</td>\n",
       "      <td>0.048671</td>\n",
       "      <td>0.048671</td>\n",
       "      <td>-0.074187</td>\n",
       "      <td>-0.074187</td>\n",
       "      <td>-0.074187</td>\n",
       "      <td>-0.074187</td>\n",
       "      <td>0.060330</td>\n",
       "      <td>0.060330</td>\n",
       "      <td>0.060330</td>\n",
       "      <td>0.060330</td>\n",
       "      <td>-0.026356</td>\n",
       "      <td>-0.026356</td>\n",
       "      <td>-0.026356</td>\n",
       "      <td>-0.026356</td>\n",
       "      <td>0.094764</td>\n",
       "      <td>0.094764</td>\n",
       "      <td>0.094764</td>\n",
       "      <td>0.094764</td>\n",
       "      <td>0.030604</td>\n",
       "      <td>0.030604</td>\n",
       "      <td>0.030604</td>\n",
       "      <td>0.030604</td>\n",
       "      <td>-0.037962</td>\n",
       "      <td>-0.037962</td>\n",
       "      <td>-0.037962</td>\n",
       "      <td>-0.037962</td>\n",
       "      <td>0.002988</td>\n",
       "      <td>0.002988</td>\n",
       "      <td>0.002988</td>\n",
       "      <td>0.002988</td>\n",
       "      <td>-0.077255</td>\n",
       "      <td>-0.077255</td>\n",
       "      <td>-0.077255</td>\n",
       "      <td>-0.077255</td>\n",
       "      <td>-0.008700</td>\n",
       "      <td>-0.008700</td>\n",
       "      <td>-0.008700</td>\n",
       "      <td>-0.008700</td>\n",
       "      <td>-0.064051</td>\n",
       "      <td>-0.064051</td>\n",
       "      <td>-0.064051</td>\n",
       "      <td>-0.064051</td>\n",
       "      <td>0.102587</td>\n",
       "      <td>0.102587</td>\n",
       "      <td>0.102587</td>\n",
       "      <td>0.102587</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.016074</td>\n",
       "      <td>-0.016074</td>\n",
       "      <td>-0.016074</td>\n",
       "      <td>-0.016074</td>\n",
       "      <td>-0.098647</td>\n",
       "      <td>-0.098647</td>\n",
       "      <td>-0.098647</td>\n",
       "      <td>-0.098647</td>\n",
       "      <td>-0.031013</td>\n",
       "      <td>-0.031013</td>\n",
       "      <td>-0.031013</td>\n",
       "      <td>-0.031013</td>\n",
       "      <td>-0.114723</td>\n",
       "      <td>-0.114723</td>\n",
       "      <td>-0.114723</td>\n",
       "      <td>-0.114723</td>\n",
       "      <td>-0.006668</td>\n",
       "      <td>-0.006668</td>\n",
       "      <td>-0.006668</td>\n",
       "      <td>-0.006668</td>\n",
       "      <td>0.172317</td>\n",
       "      <td>0.172317</td>\n",
       "      <td>0.172317</td>\n",
       "      <td>0.172317</td>\n",
       "      <td>0.057064</td>\n",
       "      <td>0.057064</td>\n",
       "      <td>0.057064</td>\n",
       "      <td>0.057064</td>\n",
       "      <td>-0.084406</td>\n",
       "      <td>0.172745</td>\n",
       "      <td>-0.028540</td>\n",
       "      <td>0.113960</td>\n",
       "      <td>-0.013425</td>\n",
       "      <td>-0.043478</td>\n",
       "      <td>-0.085272</td>\n",
       "      <td>0.163772</td>\n",
       "      <td>-0.027114</td>\n",
       "      <td>0.112133</td>\n",
       "      <td>-0.017571</td>\n",
       "      <td>-0.046963</td>\n",
       "      <td>-0.051561</td>\n",
       "      <td>0.150544</td>\n",
       "      <td>-0.013137</td>\n",
       "      <td>0.090186</td>\n",
       "      <td>-0.021532</td>\n",
       "      <td>-0.002659</td>\n",
       "      <td>-0.063806</td>\n",
       "      <td>0.145631</td>\n",
       "      <td>-0.044079</td>\n",
       "      <td>0.084273</td>\n",
       "      <td>-0.003610</td>\n",
       "      <td>-0.044826</td>\n",
       "      <td>-0.014257</td>\n",
       "      <td>0.005048</td>\n",
       "      <td>-0.029139</td>\n",
       "      <td>0.022455</td>\n",
       "      <td>0.014180</td>\n",
       "      <td>-0.009406</td>\n",
       "      <td>-0.004670</td>\n",
       "      <td>-0.001542</td>\n",
       "      <td>-0.029639</td>\n",
       "      <td>0.019330</td>\n",
       "      <td>0.014956</td>\n",
       "      <td>-0.009044</td>\n",
       "      <td>0.003603</td>\n",
       "      <td>-0.033882</td>\n",
       "      <td>0.100623</td>\n",
       "      <td>-0.107594</td>\n",
       "      <td>-0.111172</td>\n",
       "      <td>-0.104287</td>\n",
       "      <td>-0.105285</td>\n",
       "      <td>-0.099212</td>\n",
       "      <td>-0.092195</td>\n",
       "      <td>-0.093269</td>\n",
       "      <td>-0.096094</td>\n",
       "      <td>-0.081349</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>206 rows × 206 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          PATIENT_VISIT_IDENTIFIER  AGE_ABOVE65    GENDER  \\\n",
       "PATIENT_VISIT_IDENTIFIER                  1.000000    -0.031265  0.074006   \n",
       "AGE_ABOVE65                              -0.031265     1.000000  0.040368   \n",
       "GENDER                                    0.074006     0.040368  1.000000   \n",
       "DISEASE GROUPING 1                        0.048391     0.257561  0.041055   \n",
       "DISEASE GROUPING 2                        0.007865     0.057273  0.004516   \n",
       "...                                            ...          ...       ...   \n",
       "AGE_PERCENTIL_60th                       -0.019118     0.342255  0.033489   \n",
       "AGE_PERCENTIL_70th                       -0.050190     0.369008  0.014367   \n",
       "AGE_PERCENTIL_80th                       -0.025630     0.380186 -0.048219   \n",
       "AGE_PERCENTIL_90th                        0.050998     0.321851  0.017056   \n",
       "AGE_PERCENTIL_Above 90th                  0.012995     0.341540  0.074544   \n",
       "\n",
       "                          DISEASE GROUPING 1  DISEASE GROUPING 2  \\\n",
       "PATIENT_VISIT_IDENTIFIER            0.048391            0.007865   \n",
       "AGE_ABOVE65                         0.257561            0.057273   \n",
       "GENDER                              0.041055            0.004516   \n",
       "DISEASE GROUPING 1                  1.000000            0.153279   \n",
       "DISEASE GROUPING 2                  0.153279            1.000000   \n",
       "...                                      ...                 ...   \n",
       "AGE_PERCENTIL_60th                 -0.009246            0.023101   \n",
       "AGE_PERCENTIL_70th                  0.076382           -0.035589   \n",
       "AGE_PERCENTIL_80th                  0.054505            0.004597   \n",
       "AGE_PERCENTIL_90th                  0.103981            0.085243   \n",
       "AGE_PERCENTIL_Above 90th            0.236776            0.030316   \n",
       "\n",
       "                          DISEASE GROUPING 3  DISEASE GROUPING 4  \\\n",
       "PATIENT_VISIT_IDENTIFIER            0.051399            0.005817   \n",
       "AGE_ABOVE65                         0.165942            0.025486   \n",
       "GENDER                             -0.041710           -0.039350   \n",
       "DISEASE GROUPING 1                  0.257670            0.032432   \n",
       "DISEASE GROUPING 2                  0.107308            0.101554   \n",
       "...                                      ...                 ...   \n",
       "AGE_PERCENTIL_60th                  0.123109           -0.043004   \n",
       "AGE_PERCENTIL_70th                  0.104599            0.136756   \n",
       "AGE_PERCENTIL_80th                 -0.029837            0.019158   \n",
       "AGE_PERCENTIL_90th                  0.048503           -0.037945   \n",
       "AGE_PERCENTIL_Above 90th            0.044506           -0.040267   \n",
       "\n",
       "                          DISEASE GROUPING 5  DISEASE GROUPING 6       HTN  \\\n",
       "PATIENT_VISIT_IDENTIFIER           -0.010689            0.033785  0.004840   \n",
       "AGE_ABOVE65                         0.318834            0.004895  0.334484   \n",
       "GENDER                             -0.015991           -0.022329 -0.014544   \n",
       "DISEASE GROUPING 1                  0.291214            0.205137  0.422407   \n",
       "DISEASE GROUPING 2                  0.094671           -0.016866  0.147161   \n",
       "...                                      ...                 ...       ...   \n",
       "AGE_PERCENTIL_60th                  0.020934            0.082095  0.094395   \n",
       "AGE_PERCENTIL_70th                  0.045413            0.029037  0.101622   \n",
       "AGE_PERCENTIL_80th                  0.170320           -0.035059  0.135018   \n",
       "AGE_PERCENTIL_90th                  0.125779           -0.063243  0.120301   \n",
       "AGE_PERCENTIL_Above 90th            0.202280           -0.012975  0.135833   \n",
       "\n",
       "                          IMMUNOCOMPROMISED     OTHER      GASO  \\\n",
       "PATIENT_VISIT_IDENTIFIER          -0.000715  0.057211  0.015054   \n",
       "AGE_ABOVE65                        0.162399  0.119200 -0.020136   \n",
       "GENDER                            -0.019953  0.044796 -0.058352   \n",
       "DISEASE GROUPING 1                 0.170634  0.153668  0.021872   \n",
       "DISEASE GROUPING 2                 0.134960  0.072102  0.026797   \n",
       "...                                     ...       ...       ...   \n",
       "AGE_PERCENTIL_60th                -0.003033  0.014520  0.046568   \n",
       "AGE_PERCENTIL_70th                 0.126549  0.017414 -0.033222   \n",
       "AGE_PERCENTIL_80th                 0.010257  0.019204  0.021260   \n",
       "AGE_PERCENTIL_90th                 0.102126  0.055078 -0.033373   \n",
       "AGE_PERCENTIL_Above 90th           0.051695  0.116023 -0.036759   \n",
       "\n",
       "                          ALBUMIN_MEDIAN  ALBUMIN_MEAN  ALBUMIN_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER        0.006279      0.006279     0.006279   \n",
       "AGE_ABOVE65                    -0.100775     -0.100775    -0.100775   \n",
       "GENDER                         -0.044106     -0.044106    -0.044106   \n",
       "DISEASE GROUPING 1             -0.084277     -0.084277    -0.084277   \n",
       "DISEASE GROUPING 2             -0.050383     -0.050383    -0.050383   \n",
       "...                                  ...           ...          ...   \n",
       "AGE_PERCENTIL_60th              0.016828      0.016828     0.016828   \n",
       "AGE_PERCENTIL_70th              0.006310      0.006310     0.006310   \n",
       "AGE_PERCENTIL_80th             -0.056974     -0.056974    -0.056974   \n",
       "AGE_PERCENTIL_90th             -0.046543     -0.046543    -0.046543   \n",
       "AGE_PERCENTIL_Above 90th       -0.098744     -0.098744    -0.098744   \n",
       "\n",
       "                          ALBUMIN_MAX  BE_ARTERIAL_MEDIAN  BE_ARTERIAL_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER     0.006279           -0.019203         -0.019203   \n",
       "AGE_ABOVE65                 -0.100775            0.060274          0.060274   \n",
       "GENDER                      -0.044106           -0.030622         -0.030622   \n",
       "DISEASE GROUPING 1          -0.084277            0.039354          0.039354   \n",
       "DISEASE GROUPING 2          -0.050383            0.117885          0.117885   \n",
       "...                               ...                 ...               ...   \n",
       "AGE_PERCENTIL_60th           0.016828            0.142160          0.142160   \n",
       "AGE_PERCENTIL_70th           0.006310           -0.025228         -0.025228   \n",
       "AGE_PERCENTIL_80th          -0.056974            0.033329          0.033329   \n",
       "AGE_PERCENTIL_90th          -0.046543           -0.013157         -0.013157   \n",
       "AGE_PERCENTIL_Above 90th    -0.098744           -0.038525         -0.038525   \n",
       "\n",
       "                          BE_ARTERIAL_MIN  BE_ARTERIAL_MAX  BE_VENOUS_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER        -0.019203        -0.019203          0.034085   \n",
       "AGE_ABOVE65                      0.060274         0.060274          0.125534   \n",
       "GENDER                          -0.030622        -0.030622          0.022976   \n",
       "DISEASE GROUPING 1               0.039354         0.039354          0.086341   \n",
       "DISEASE GROUPING 2               0.117885         0.117885          0.047839   \n",
       "...                                   ...              ...               ...   \n",
       "AGE_PERCENTIL_60th               0.142160         0.142160         -0.013318   \n",
       "AGE_PERCENTIL_70th              -0.025228        -0.025228          0.073087   \n",
       "AGE_PERCENTIL_80th               0.033329         0.033329          0.049741   \n",
       "AGE_PERCENTIL_90th              -0.013157        -0.013157          0.058076   \n",
       "AGE_PERCENTIL_Above 90th        -0.038525        -0.038525          0.061415   \n",
       "\n",
       "                          BE_VENOUS_MEAN  BE_VENOUS_MIN  BE_VENOUS_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER        0.034085       0.034085       0.034085   \n",
       "AGE_ABOVE65                     0.125534       0.125534       0.125534   \n",
       "GENDER                          0.022976       0.022976       0.022976   \n",
       "DISEASE GROUPING 1              0.086341       0.086341       0.086341   \n",
       "DISEASE GROUPING 2              0.047839       0.047839       0.047839   \n",
       "...                                  ...            ...            ...   \n",
       "AGE_PERCENTIL_60th             -0.013318      -0.013318      -0.013318   \n",
       "AGE_PERCENTIL_70th              0.073087       0.073087       0.073087   \n",
       "AGE_PERCENTIL_80th              0.049741       0.049741       0.049741   \n",
       "AGE_PERCENTIL_90th              0.058076       0.058076       0.058076   \n",
       "AGE_PERCENTIL_Above 90th        0.061415       0.061415       0.061415   \n",
       "\n",
       "                          BIC_ARTERIAL_MEDIAN  BIC_ARTERIAL_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER             0.011486           0.011486   \n",
       "AGE_ABOVE65                          0.012287           0.012287   \n",
       "GENDER                               0.009726           0.009726   \n",
       "DISEASE GROUPING 1                   0.042084           0.042084   \n",
       "DISEASE GROUPING 2                   0.084529           0.084529   \n",
       "...                                       ...                ...   \n",
       "AGE_PERCENTIL_60th                   0.077164           0.077164   \n",
       "AGE_PERCENTIL_70th                  -0.015201          -0.015201   \n",
       "AGE_PERCENTIL_80th                   0.023138           0.023138   \n",
       "AGE_PERCENTIL_90th                  -0.029855          -0.029855   \n",
       "AGE_PERCENTIL_Above 90th            -0.040201          -0.040201   \n",
       "\n",
       "                          BIC_ARTERIAL_MIN  BIC_ARTERIAL_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER          0.011486          0.011486   \n",
       "AGE_ABOVE65                       0.012287          0.012287   \n",
       "GENDER                            0.009726          0.009726   \n",
       "DISEASE GROUPING 1                0.042084          0.042084   \n",
       "DISEASE GROUPING 2                0.084529          0.084529   \n",
       "...                                    ...               ...   \n",
       "AGE_PERCENTIL_60th                0.077164          0.077164   \n",
       "AGE_PERCENTIL_70th               -0.015201         -0.015201   \n",
       "AGE_PERCENTIL_80th                0.023138          0.023138   \n",
       "AGE_PERCENTIL_90th               -0.029855         -0.029855   \n",
       "AGE_PERCENTIL_Above 90th         -0.040201         -0.040201   \n",
       "\n",
       "                          BIC_VENOUS_MEDIAN  BIC_VENOUS_MEAN  BIC_VENOUS_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER           0.055256         0.055256        0.055256   \n",
       "AGE_ABOVE65                        0.044444         0.044444        0.044444   \n",
       "GENDER                             0.022764         0.022764        0.022764   \n",
       "DISEASE GROUPING 1                 0.036110         0.036110        0.036110   \n",
       "DISEASE GROUPING 2                 0.007841         0.007841        0.007841   \n",
       "...                                     ...              ...             ...   \n",
       "AGE_PERCENTIL_60th                 0.001785         0.001785        0.001785   \n",
       "AGE_PERCENTIL_70th                 0.063445         0.063445        0.063445   \n",
       "AGE_PERCENTIL_80th                 0.031943         0.031943        0.031943   \n",
       "AGE_PERCENTIL_90th                 0.033372         0.033372        0.033372   \n",
       "AGE_PERCENTIL_Above 90th          -0.049593        -0.049593       -0.049593   \n",
       "\n",
       "                          BIC_VENOUS_MAX  BILLIRUBIN_MEDIAN  BILLIRUBIN_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER        0.055256           0.001862         0.001862   \n",
       "AGE_ABOVE65                     0.044444           0.049565         0.049565   \n",
       "GENDER                          0.022764          -0.058487        -0.058487   \n",
       "DISEASE GROUPING 1              0.036110          -0.007828        -0.007828   \n",
       "DISEASE GROUPING 2              0.007841          -0.013127        -0.013127   \n",
       "...                                  ...                ...              ...   \n",
       "AGE_PERCENTIL_60th              0.001785          -0.004700        -0.004700   \n",
       "AGE_PERCENTIL_70th              0.063445           0.020777         0.020777   \n",
       "AGE_PERCENTIL_80th              0.031943           0.081762         0.081762   \n",
       "AGE_PERCENTIL_90th              0.033372          -0.006143        -0.006143   \n",
       "AGE_PERCENTIL_Above 90th       -0.049593          -0.014451        -0.014451   \n",
       "\n",
       "                          BILLIRUBIN_MIN  BILLIRUBIN_MAX  BLAST_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER        0.001862        0.001862      0.014950   \n",
       "AGE_ABOVE65                     0.049565        0.049565      0.058519   \n",
       "GENDER                         -0.058487       -0.058487     -0.050024   \n",
       "DISEASE GROUPING 1             -0.007828       -0.007828     -0.021390   \n",
       "DISEASE GROUPING 2             -0.013127       -0.013127     -0.010037   \n",
       "...                                  ...             ...           ...   \n",
       "AGE_PERCENTIL_60th             -0.004700       -0.004700     -0.020016   \n",
       "AGE_PERCENTIL_70th              0.020777        0.020777     -0.020249   \n",
       "AGE_PERCENTIL_80th              0.081762        0.081762     -0.020690   \n",
       "AGE_PERCENTIL_90th             -0.006143       -0.006143      0.200138   \n",
       "AGE_PERCENTIL_Above 90th       -0.014451       -0.014451     -0.018742   \n",
       "\n",
       "                          BLAST_MEAN  BLAST_MIN  BLAST_MAX  CALCIUM_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER    0.014950   0.014950   0.014950        0.030832   \n",
       "AGE_ABOVE65                 0.058519   0.058519   0.058519       -0.106386   \n",
       "GENDER                     -0.050024  -0.050024  -0.050024        0.011806   \n",
       "DISEASE GROUPING 1         -0.021390  -0.021390  -0.021390       -0.061531   \n",
       "DISEASE GROUPING 2         -0.010037  -0.010037  -0.010037       -0.039541   \n",
       "...                              ...        ...        ...             ...   \n",
       "AGE_PERCENTIL_60th         -0.020016  -0.020016  -0.020016       -0.045306   \n",
       "AGE_PERCENTIL_70th         -0.020249  -0.020249  -0.020249       -0.024664   \n",
       "AGE_PERCENTIL_80th         -0.020690  -0.020690  -0.020690       -0.030359   \n",
       "AGE_PERCENTIL_90th          0.200138   0.200138   0.200138       -0.036129   \n",
       "AGE_PERCENTIL_Above 90th   -0.018742  -0.018742  -0.018742       -0.043129   \n",
       "\n",
       "                          CALCIUM_MEAN  CALCIUM_MIN  CALCIUM_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER      0.030832     0.030832     0.030832   \n",
       "AGE_ABOVE65                  -0.106386    -0.106386    -0.106386   \n",
       "GENDER                        0.011806     0.011806     0.011806   \n",
       "DISEASE GROUPING 1           -0.061531    -0.061531    -0.061531   \n",
       "DISEASE GROUPING 2           -0.039541    -0.039541    -0.039541   \n",
       "...                                ...          ...          ...   \n",
       "AGE_PERCENTIL_60th           -0.045306    -0.045306    -0.045306   \n",
       "AGE_PERCENTIL_70th           -0.024664    -0.024664    -0.024664   \n",
       "AGE_PERCENTIL_80th           -0.030359    -0.030359    -0.030359   \n",
       "AGE_PERCENTIL_90th           -0.036129    -0.036129    -0.036129   \n",
       "AGE_PERCENTIL_Above 90th     -0.043129    -0.043129    -0.043129   \n",
       "\n",
       "                          CREATININ_MEDIAN  CREATININ_MEAN  CREATININ_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER          0.038332        0.038332       0.038332   \n",
       "AGE_ABOVE65                       0.113914        0.113914       0.113914   \n",
       "GENDER                           -0.192830       -0.192830      -0.192830   \n",
       "DISEASE GROUPING 1                0.013314        0.013314       0.013314   \n",
       "DISEASE GROUPING 2                0.207432        0.207432       0.207432   \n",
       "...                                    ...             ...            ...   \n",
       "AGE_PERCENTIL_60th               -0.042579       -0.042579      -0.042579   \n",
       "AGE_PERCENTIL_70th                0.022233        0.022233       0.022233   \n",
       "AGE_PERCENTIL_80th                0.172717        0.172717       0.172717   \n",
       "AGE_PERCENTIL_90th                0.029219        0.029219       0.029219   \n",
       "AGE_PERCENTIL_Above 90th          0.009967        0.009967       0.009967   \n",
       "\n",
       "                          CREATININ_MAX  FFA_MEDIAN  FFA_MEAN   FFA_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER       0.038332   -0.021351 -0.021351 -0.021351   \n",
       "AGE_ABOVE65                    0.113914   -0.024290 -0.024290 -0.024290   \n",
       "GENDER                        -0.192830    0.011162  0.011162  0.011162   \n",
       "DISEASE GROUPING 1             0.013314    0.031945  0.031945  0.031945   \n",
       "DISEASE GROUPING 2             0.207432    0.041585  0.041585  0.041585   \n",
       "...                                 ...         ...       ...       ...   \n",
       "AGE_PERCENTIL_60th            -0.042579   -0.029871 -0.029871 -0.029871   \n",
       "AGE_PERCENTIL_70th             0.022233   -0.039609 -0.039609 -0.039609   \n",
       "AGE_PERCENTIL_80th             0.172717    0.045239  0.045239  0.045239   \n",
       "AGE_PERCENTIL_90th             0.029219    0.010954  0.010954  0.010954   \n",
       "AGE_PERCENTIL_Above 90th       0.009967   -0.031458 -0.031458 -0.031458   \n",
       "\n",
       "                           FFA_MAX  GGT_MEDIAN  GGT_MEAN   GGT_MIN   GGT_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER -0.021351   -0.053070 -0.053070 -0.053070 -0.053070   \n",
       "AGE_ABOVE65              -0.024290   -0.099784 -0.099784 -0.099784 -0.099784   \n",
       "GENDER                    0.011162   -0.028679 -0.028679 -0.028679 -0.028679   \n",
       "DISEASE GROUPING 1        0.031945   -0.041321 -0.041321 -0.041321 -0.041321   \n",
       "DISEASE GROUPING 2        0.041585    0.012142  0.012142  0.012142  0.012142   \n",
       "...                            ...         ...       ...       ...       ...   \n",
       "AGE_PERCENTIL_60th       -0.029871   -0.043500 -0.043500 -0.043500 -0.043500   \n",
       "AGE_PERCENTIL_70th       -0.039609   -0.016080 -0.016080 -0.016080 -0.016080   \n",
       "AGE_PERCENTIL_80th        0.045239   -0.026150 -0.026150 -0.026150 -0.026150   \n",
       "AGE_PERCENTIL_90th        0.010954   -0.034797 -0.034797 -0.034797 -0.034797   \n",
       "AGE_PERCENTIL_Above 90th -0.031458   -0.060255 -0.060255 -0.060255 -0.060255   \n",
       "\n",
       "                          GLUCOSE_MEDIAN  GLUCOSE_MEAN  GLUCOSE_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER        0.032138      0.032138     0.032138   \n",
       "AGE_ABOVE65                     0.035220      0.035220     0.035220   \n",
       "GENDER                         -0.057029     -0.057029    -0.057029   \n",
       "DISEASE GROUPING 1              0.041195      0.041195     0.041195   \n",
       "DISEASE GROUPING 2              0.098642      0.098642     0.098642   \n",
       "...                                  ...           ...          ...   \n",
       "AGE_PERCENTIL_60th              0.049038      0.049038     0.049038   \n",
       "AGE_PERCENTIL_70th             -0.040436     -0.040436    -0.040436   \n",
       "AGE_PERCENTIL_80th             -0.014759     -0.014759    -0.014759   \n",
       "AGE_PERCENTIL_90th              0.010359      0.010359     0.010359   \n",
       "AGE_PERCENTIL_Above 90th        0.061395      0.061395     0.061395   \n",
       "\n",
       "                          GLUCOSE_MAX  HEMATOCRITE_MEDIAN  HEMATOCRITE_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER     0.032138           -0.013189         -0.013189   \n",
       "AGE_ABOVE65                  0.035220           -0.244813         -0.244813   \n",
       "GENDER                      -0.057029           -0.262838         -0.262838   \n",
       "DISEASE GROUPING 1           0.041195           -0.079280         -0.079280   \n",
       "DISEASE GROUPING 2           0.098642           -0.181133         -0.181133   \n",
       "...                               ...                 ...               ...   \n",
       "AGE_PERCENTIL_60th           0.049038            0.055083          0.055083   \n",
       "AGE_PERCENTIL_70th          -0.040436           -0.176395         -0.176395   \n",
       "AGE_PERCENTIL_80th          -0.014759           -0.073896         -0.073896   \n",
       "AGE_PERCENTIL_90th           0.010359           -0.081946         -0.081946   \n",
       "AGE_PERCENTIL_Above 90th     0.061395           -0.161441         -0.161441   \n",
       "\n",
       "                          HEMATOCRITE_MIN  HEMATOCRITE_MAX  HEMOGLOBIN_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER        -0.013189        -0.013189          -0.027437   \n",
       "AGE_ABOVE65                     -0.244813        -0.244813          -0.255381   \n",
       "GENDER                          -0.262838        -0.262838          -0.284592   \n",
       "DISEASE GROUPING 1              -0.079280        -0.079280          -0.096464   \n",
       "DISEASE GROUPING 2              -0.181133        -0.181133          -0.195834   \n",
       "...                                   ...              ...                ...   \n",
       "AGE_PERCENTIL_60th               0.055083         0.055083           0.047545   \n",
       "AGE_PERCENTIL_70th              -0.176395        -0.176395          -0.165395   \n",
       "AGE_PERCENTIL_80th              -0.073896        -0.073896          -0.075867   \n",
       "AGE_PERCENTIL_90th              -0.081946        -0.081946          -0.095493   \n",
       "AGE_PERCENTIL_Above 90th        -0.161441        -0.161441          -0.170020   \n",
       "\n",
       "                          HEMOGLOBIN_MEAN  HEMOGLOBIN_MIN  HEMOGLOBIN_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER        -0.027437       -0.027437       -0.027437   \n",
       "AGE_ABOVE65                     -0.255381       -0.255381       -0.255381   \n",
       "GENDER                          -0.284592       -0.284592       -0.284592   \n",
       "DISEASE GROUPING 1              -0.096464       -0.096464       -0.096464   \n",
       "DISEASE GROUPING 2              -0.195834       -0.195834       -0.195834   \n",
       "...                                   ...             ...             ...   \n",
       "AGE_PERCENTIL_60th               0.047545        0.047545        0.047545   \n",
       "AGE_PERCENTIL_70th              -0.165395       -0.165395       -0.165395   \n",
       "AGE_PERCENTIL_80th              -0.075867       -0.075867       -0.075867   \n",
       "AGE_PERCENTIL_90th              -0.095493       -0.095493       -0.095493   \n",
       "AGE_PERCENTIL_Above 90th        -0.170020       -0.170020       -0.170020   \n",
       "\n",
       "                          INR_MEDIAN  INR_MEAN   INR_MIN   INR_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER   -0.056623 -0.056623 -0.056623 -0.056623   \n",
       "AGE_ABOVE65                 0.066448  0.066448  0.066448  0.066448   \n",
       "GENDER                     -0.044382 -0.044382 -0.044382 -0.044382   \n",
       "DISEASE GROUPING 1          0.005325  0.005325  0.005325  0.005325   \n",
       "DISEASE GROUPING 2          0.055256  0.055256  0.055256  0.055256   \n",
       "...                              ...       ...       ...       ...   \n",
       "AGE_PERCENTIL_60th         -0.024228 -0.024228 -0.024228 -0.024228   \n",
       "AGE_PERCENTIL_70th          0.067584  0.067584  0.067584  0.067584   \n",
       "AGE_PERCENTIL_80th          0.077855  0.077855  0.077855  0.077855   \n",
       "AGE_PERCENTIL_90th         -0.009987 -0.009987 -0.009987 -0.009987   \n",
       "AGE_PERCENTIL_Above 90th   -0.004503 -0.004503 -0.004503 -0.004503   \n",
       "\n",
       "                          LACTATE_MEDIAN  LACTATE_MEAN  LACTATE_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER        0.018460      0.018460     0.018460   \n",
       "AGE_ABOVE65                    -0.040969     -0.040969    -0.040969   \n",
       "GENDER                          0.020050      0.020050     0.020050   \n",
       "DISEASE GROUPING 1              0.017985      0.017985     0.017985   \n",
       "DISEASE GROUPING 2             -0.012148     -0.012148    -0.012148   \n",
       "...                                  ...           ...          ...   \n",
       "AGE_PERCENTIL_60th             -0.060573     -0.060573    -0.060573   \n",
       "AGE_PERCENTIL_70th              0.019854      0.019854     0.019854   \n",
       "AGE_PERCENTIL_80th              0.007808      0.007808     0.007808   \n",
       "AGE_PERCENTIL_90th             -0.058890     -0.058890    -0.058890   \n",
       "AGE_PERCENTIL_Above 90th        0.022285      0.022285     0.022285   \n",
       "\n",
       "                          LACTATE_MAX  LEUKOCYTES_MEDIAN  LEUKOCYTES_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER     0.018460           0.006118         0.006118   \n",
       "AGE_ABOVE65                 -0.040969          -0.001383        -0.001383   \n",
       "GENDER                       0.020050          -0.040087        -0.040087   \n",
       "DISEASE GROUPING 1           0.017985          -0.013741        -0.013741   \n",
       "DISEASE GROUPING 2          -0.012148           0.016663         0.016663   \n",
       "...                               ...                ...              ...   \n",
       "AGE_PERCENTIL_60th          -0.060573          -0.046688        -0.046688   \n",
       "AGE_PERCENTIL_70th           0.019854          -0.043233        -0.043233   \n",
       "AGE_PERCENTIL_80th           0.007808          -0.040030        -0.040030   \n",
       "AGE_PERCENTIL_90th          -0.058890           0.084550         0.084550   \n",
       "AGE_PERCENTIL_Above 90th     0.022285           0.048671         0.048671   \n",
       "\n",
       "                          LEUKOCYTES_MIN  LEUKOCYTES_MAX  LINFOCITOS_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER        0.006118        0.006118           0.038331   \n",
       "AGE_ABOVE65                    -0.001383       -0.001383          -0.139216   \n",
       "GENDER                         -0.040087       -0.040087           0.100911   \n",
       "DISEASE GROUPING 1             -0.013741       -0.013741           0.014131   \n",
       "DISEASE GROUPING 2              0.016663        0.016663          -0.014079   \n",
       "...                                  ...             ...                ...   \n",
       "AGE_PERCENTIL_60th             -0.046688       -0.046688          -0.040663   \n",
       "AGE_PERCENTIL_70th             -0.043233       -0.043233          -0.013579   \n",
       "AGE_PERCENTIL_80th             -0.040030       -0.040030          -0.102933   \n",
       "AGE_PERCENTIL_90th              0.084550        0.084550           0.000526   \n",
       "AGE_PERCENTIL_Above 90th        0.048671        0.048671          -0.074187   \n",
       "\n",
       "                          LINFOCITOS_MEAN  LINFOCITOS_MIN  LINFOCITOS_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER         0.038331        0.038331        0.038331   \n",
       "AGE_ABOVE65                     -0.139216       -0.139216       -0.139216   \n",
       "GENDER                           0.100911        0.100911        0.100911   \n",
       "DISEASE GROUPING 1               0.014131        0.014131        0.014131   \n",
       "DISEASE GROUPING 2              -0.014079       -0.014079       -0.014079   \n",
       "...                                   ...             ...             ...   \n",
       "AGE_PERCENTIL_60th              -0.040663       -0.040663       -0.040663   \n",
       "AGE_PERCENTIL_70th              -0.013579       -0.013579       -0.013579   \n",
       "AGE_PERCENTIL_80th              -0.102933       -0.102933       -0.102933   \n",
       "AGE_PERCENTIL_90th               0.000526        0.000526        0.000526   \n",
       "AGE_PERCENTIL_Above 90th        -0.074187       -0.074187       -0.074187   \n",
       "\n",
       "                          NEUTROPHILES_MEDIAN  NEUTROPHILES_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER            -0.008212          -0.008212   \n",
       "AGE_ABOVE65                          0.030810           0.030810   \n",
       "GENDER                              -0.062729          -0.062729   \n",
       "DISEASE GROUPING 1                  -0.020418          -0.020418   \n",
       "DISEASE GROUPING 2                   0.021099           0.021099   \n",
       "...                                       ...                ...   \n",
       "AGE_PERCENTIL_60th                  -0.035196          -0.035196   \n",
       "AGE_PERCENTIL_70th                  -0.038577          -0.038577   \n",
       "AGE_PERCENTIL_80th                  -0.015800          -0.015800   \n",
       "AGE_PERCENTIL_90th                   0.085105           0.085105   \n",
       "AGE_PERCENTIL_Above 90th             0.060330           0.060330   \n",
       "\n",
       "                          NEUTROPHILES_MIN  NEUTROPHILES_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER         -0.008212         -0.008212   \n",
       "AGE_ABOVE65                       0.030810          0.030810   \n",
       "GENDER                           -0.062729         -0.062729   \n",
       "DISEASE GROUPING 1               -0.020418         -0.020418   \n",
       "DISEASE GROUPING 2                0.021099          0.021099   \n",
       "...                                    ...               ...   \n",
       "AGE_PERCENTIL_60th               -0.035196         -0.035196   \n",
       "AGE_PERCENTIL_70th               -0.038577         -0.038577   \n",
       "AGE_PERCENTIL_80th               -0.015800         -0.015800   \n",
       "AGE_PERCENTIL_90th                0.085105          0.085105   \n",
       "AGE_PERCENTIL_Above 90th          0.060330          0.060330   \n",
       "\n",
       "                          P02_ARTERIAL_MEDIAN  P02_ARTERIAL_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER            -0.012394          -0.012394   \n",
       "AGE_ABOVE65                         -0.083229          -0.083229   \n",
       "GENDER                              -0.012907          -0.012907   \n",
       "DISEASE GROUPING 1                   0.030372           0.030372   \n",
       "DISEASE GROUPING 2                   0.008215           0.008215   \n",
       "...                                       ...                ...   \n",
       "AGE_PERCENTIL_60th                  -0.084242          -0.084242   \n",
       "AGE_PERCENTIL_70th                  -0.029993          -0.029993   \n",
       "AGE_PERCENTIL_80th                  -0.028739          -0.028739   \n",
       "AGE_PERCENTIL_90th                   0.028710           0.028710   \n",
       "AGE_PERCENTIL_Above 90th            -0.026356          -0.026356   \n",
       "\n",
       "                          P02_ARTERIAL_MIN  P02_ARTERIAL_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER         -0.012394         -0.012394   \n",
       "AGE_ABOVE65                      -0.083229         -0.083229   \n",
       "GENDER                           -0.012907         -0.012907   \n",
       "DISEASE GROUPING 1                0.030372          0.030372   \n",
       "DISEASE GROUPING 2                0.008215          0.008215   \n",
       "...                                    ...               ...   \n",
       "AGE_PERCENTIL_60th               -0.084242         -0.084242   \n",
       "AGE_PERCENTIL_70th               -0.029993         -0.029993   \n",
       "AGE_PERCENTIL_80th               -0.028739         -0.028739   \n",
       "AGE_PERCENTIL_90th                0.028710          0.028710   \n",
       "AGE_PERCENTIL_Above 90th         -0.026356         -0.026356   \n",
       "\n",
       "                          P02_VENOUS_MEDIAN  P02_VENOUS_MEAN  P02_VENOUS_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER          -0.077576        -0.077576       -0.077576   \n",
       "AGE_ABOVE65                        0.025996         0.025996        0.025996   \n",
       "GENDER                             0.022131         0.022131        0.022131   \n",
       "DISEASE GROUPING 1                 0.083903         0.083903        0.083903   \n",
       "DISEASE GROUPING 2                 0.004132         0.004132        0.004132   \n",
       "...                                     ...              ...             ...   \n",
       "AGE_PERCENTIL_60th                -0.049044        -0.049044       -0.049044   \n",
       "AGE_PERCENTIL_70th                -0.009304        -0.009304       -0.009304   \n",
       "AGE_PERCENTIL_80th                 0.025307         0.025307        0.025307   \n",
       "AGE_PERCENTIL_90th                -0.018165        -0.018165       -0.018165   \n",
       "AGE_PERCENTIL_Above 90th           0.094764         0.094764        0.094764   \n",
       "\n",
       "                          P02_VENOUS_MAX  PC02_ARTERIAL_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER       -0.077576              0.030214   \n",
       "AGE_ABOVE65                     0.025996             -0.004333   \n",
       "GENDER                          0.022131              0.013461   \n",
       "DISEASE GROUPING 1              0.083903              0.018078   \n",
       "DISEASE GROUPING 2              0.004132              0.037866   \n",
       "...                                  ...                   ...   \n",
       "AGE_PERCENTIL_60th             -0.049044             -0.031637   \n",
       "AGE_PERCENTIL_70th             -0.009304              0.009209   \n",
       "AGE_PERCENTIL_80th              0.025307              0.006548   \n",
       "AGE_PERCENTIL_90th             -0.018165             -0.022675   \n",
       "AGE_PERCENTIL_Above 90th        0.094764              0.030604   \n",
       "\n",
       "                          PC02_ARTERIAL_MEAN  PC02_ARTERIAL_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER            0.030214           0.030214   \n",
       "AGE_ABOVE65                        -0.004333          -0.004333   \n",
       "GENDER                              0.013461           0.013461   \n",
       "DISEASE GROUPING 1                  0.018078           0.018078   \n",
       "DISEASE GROUPING 2                  0.037866           0.037866   \n",
       "...                                      ...                ...   \n",
       "AGE_PERCENTIL_60th                 -0.031637          -0.031637   \n",
       "AGE_PERCENTIL_70th                  0.009209           0.009209   \n",
       "AGE_PERCENTIL_80th                  0.006548           0.006548   \n",
       "AGE_PERCENTIL_90th                 -0.022675          -0.022675   \n",
       "AGE_PERCENTIL_Above 90th            0.030604           0.030604   \n",
       "\n",
       "                          PC02_ARTERIAL_MAX  PC02_VENOUS_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER           0.030214            0.072683   \n",
       "AGE_ABOVE65                       -0.004333            0.006415   \n",
       "GENDER                             0.013461           -0.008704   \n",
       "DISEASE GROUPING 1                 0.018078            0.076969   \n",
       "DISEASE GROUPING 2                 0.037866            0.015868   \n",
       "...                                     ...                 ...   \n",
       "AGE_PERCENTIL_60th                -0.031637            0.016289   \n",
       "AGE_PERCENTIL_70th                 0.009209            0.003130   \n",
       "AGE_PERCENTIL_80th                 0.006548           -0.033915   \n",
       "AGE_PERCENTIL_90th                -0.022675            0.071827   \n",
       "AGE_PERCENTIL_Above 90th           0.030604           -0.037962   \n",
       "\n",
       "                          PC02_VENOUS_MEAN  PC02_VENOUS_MIN  PC02_VENOUS_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER          0.072683         0.072683         0.072683   \n",
       "AGE_ABOVE65                       0.006415         0.006415         0.006415   \n",
       "GENDER                           -0.008704        -0.008704        -0.008704   \n",
       "DISEASE GROUPING 1                0.076969         0.076969         0.076969   \n",
       "DISEASE GROUPING 2                0.015868         0.015868         0.015868   \n",
       "...                                    ...              ...              ...   \n",
       "AGE_PERCENTIL_60th                0.016289         0.016289         0.016289   \n",
       "AGE_PERCENTIL_70th                0.003130         0.003130         0.003130   \n",
       "AGE_PERCENTIL_80th               -0.033915        -0.033915        -0.033915   \n",
       "AGE_PERCENTIL_90th                0.071827         0.071827         0.071827   \n",
       "AGE_PERCENTIL_Above 90th         -0.037962        -0.037962        -0.037962   \n",
       "\n",
       "                          PCR_MEDIAN  PCR_MEAN   PCR_MIN   PCR_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER   -0.049710 -0.049710 -0.049710 -0.049710   \n",
       "AGE_ABOVE65                 0.050356  0.050356  0.050356  0.050356   \n",
       "GENDER                     -0.157600 -0.157600 -0.157600 -0.157600   \n",
       "DISEASE GROUPING 1         -0.015760 -0.015760 -0.015760 -0.015760   \n",
       "DISEASE GROUPING 2          0.008519  0.008519  0.008519  0.008519   \n",
       "...                              ...       ...       ...       ...   \n",
       "AGE_PERCENTIL_60th          0.037892  0.037892  0.037892  0.037892   \n",
       "AGE_PERCENTIL_70th          0.024952  0.024952  0.024952  0.024952   \n",
       "AGE_PERCENTIL_80th         -0.018490 -0.018490 -0.018490 -0.018490   \n",
       "AGE_PERCENTIL_90th          0.041640  0.041640  0.041640  0.041640   \n",
       "AGE_PERCENTIL_Above 90th    0.002988  0.002988  0.002988  0.002988   \n",
       "\n",
       "                          PH_ARTERIAL_MEDIAN  PH_ARTERIAL_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER           -0.017123         -0.017123   \n",
       "AGE_ABOVE65                         0.007758          0.007758   \n",
       "GENDER                              0.005613          0.005613   \n",
       "DISEASE GROUPING 1                  0.027992          0.027992   \n",
       "DISEASE GROUPING 2                  0.042223          0.042223   \n",
       "...                                      ...               ...   \n",
       "AGE_PERCENTIL_60th                  0.104581          0.104581   \n",
       "AGE_PERCENTIL_70th                 -0.024698         -0.024698   \n",
       "AGE_PERCENTIL_80th                  0.018032          0.018032   \n",
       "AGE_PERCENTIL_90th                 -0.013925         -0.013925   \n",
       "AGE_PERCENTIL_Above 90th           -0.077255         -0.077255   \n",
       "\n",
       "                          PH_ARTERIAL_MIN  PH_ARTERIAL_MAX  PH_VENOUS_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER        -0.017123        -0.017123         -0.062787   \n",
       "AGE_ABOVE65                      0.007758         0.007758          0.035135   \n",
       "GENDER                           0.005613         0.005613          0.021687   \n",
       "DISEASE GROUPING 1               0.027992         0.027992         -0.064074   \n",
       "DISEASE GROUPING 2               0.042223         0.042223         -0.033436   \n",
       "...                                   ...              ...               ...   \n",
       "AGE_PERCENTIL_60th               0.104581         0.104581         -0.024688   \n",
       "AGE_PERCENTIL_70th              -0.024698        -0.024698          0.047922   \n",
       "AGE_PERCENTIL_80th               0.018032         0.018032          0.085857   \n",
       "AGE_PERCENTIL_90th              -0.013925        -0.013925         -0.046040   \n",
       "AGE_PERCENTIL_Above 90th        -0.077255        -0.077255         -0.008700   \n",
       "\n",
       "                          PH_VENOUS_MEAN  PH_VENOUS_MIN  PH_VENOUS_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER       -0.062787      -0.062787      -0.062787   \n",
       "AGE_ABOVE65                     0.035135       0.035135       0.035135   \n",
       "GENDER                          0.021687       0.021687       0.021687   \n",
       "DISEASE GROUPING 1             -0.064074      -0.064074      -0.064074   \n",
       "DISEASE GROUPING 2             -0.033436      -0.033436      -0.033436   \n",
       "...                                  ...            ...            ...   \n",
       "AGE_PERCENTIL_60th             -0.024688      -0.024688      -0.024688   \n",
       "AGE_PERCENTIL_70th              0.047922       0.047922       0.047922   \n",
       "AGE_PERCENTIL_80th              0.085857       0.085857       0.085857   \n",
       "AGE_PERCENTIL_90th             -0.046040      -0.046040      -0.046040   \n",
       "AGE_PERCENTIL_Above 90th       -0.008700      -0.008700      -0.008700   \n",
       "\n",
       "                          PLATELETS_MEDIAN  PLATELETS_MEAN  PLATELETS_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER          0.023905        0.023905       0.023905   \n",
       "AGE_ABOVE65                      -0.163665       -0.163665      -0.163665   \n",
       "GENDER                            0.055833        0.055833       0.055833   \n",
       "DISEASE GROUPING 1               -0.065453       -0.065453      -0.065453   \n",
       "DISEASE GROUPING 2               -0.064459       -0.064459      -0.064459   \n",
       "...                                    ...             ...            ...   \n",
       "AGE_PERCENTIL_60th               -0.014141       -0.014141      -0.014141   \n",
       "AGE_PERCENTIL_70th               -0.113782       -0.113782      -0.113782   \n",
       "AGE_PERCENTIL_80th               -0.078394       -0.078394      -0.078394   \n",
       "AGE_PERCENTIL_90th               -0.012844       -0.012844      -0.012844   \n",
       "AGE_PERCENTIL_Above 90th         -0.064051       -0.064051      -0.064051   \n",
       "\n",
       "                          PLATELETS_MAX  POTASSIUM_MEDIAN  POTASSIUM_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER       0.023905          0.097040        0.097040   \n",
       "AGE_ABOVE65                   -0.163665          0.115473        0.115473   \n",
       "GENDER                         0.055833         -0.083873       -0.083873   \n",
       "DISEASE GROUPING 1            -0.065453          0.091198        0.091198   \n",
       "DISEASE GROUPING 2            -0.064459          0.058356        0.058356   \n",
       "...                                 ...               ...             ...   \n",
       "AGE_PERCENTIL_60th            -0.014141         -0.007391       -0.007391   \n",
       "AGE_PERCENTIL_70th            -0.113782          0.027274        0.027274   \n",
       "AGE_PERCENTIL_80th            -0.078394         -0.060407       -0.060407   \n",
       "AGE_PERCENTIL_90th            -0.012844          0.147246        0.147246   \n",
       "AGE_PERCENTIL_Above 90th      -0.064051          0.102587        0.102587   \n",
       "\n",
       "                          POTASSIUM_MIN  POTASSIUM_MAX  SAT02_ARTERIAL_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER       0.097040       0.097040               0.021630   \n",
       "AGE_ABOVE65                    0.115473       0.115473              -0.077803   \n",
       "GENDER                        -0.083873      -0.083873              -0.007806   \n",
       "DISEASE GROUPING 1             0.091198       0.091198               0.002053   \n",
       "DISEASE GROUPING 2             0.058356       0.058356              -0.019772   \n",
       "...                                 ...            ...                    ...   \n",
       "AGE_PERCENTIL_60th            -0.007391      -0.007391              -0.126554   \n",
       "AGE_PERCENTIL_70th             0.027274       0.027274               0.003332   \n",
       "AGE_PERCENTIL_80th            -0.060407      -0.060407              -0.014052   \n",
       "AGE_PERCENTIL_90th             0.147246       0.147246               0.021959   \n",
       "AGE_PERCENTIL_Above 90th       0.102587       0.102587              -0.016353   \n",
       "\n",
       "                          SAT02_ARTERIAL_MEAN  SAT02_ARTERIAL_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER             0.021630            0.021630   \n",
       "AGE_ABOVE65                         -0.077803           -0.077803   \n",
       "GENDER                              -0.007806           -0.007806   \n",
       "DISEASE GROUPING 1                   0.002053            0.002053   \n",
       "DISEASE GROUPING 2                  -0.019772           -0.019772   \n",
       "...                                       ...                 ...   \n",
       "AGE_PERCENTIL_60th                  -0.126554           -0.126554   \n",
       "AGE_PERCENTIL_70th                   0.003332            0.003332   \n",
       "AGE_PERCENTIL_80th                  -0.014052           -0.014052   \n",
       "AGE_PERCENTIL_90th                   0.021959            0.021959   \n",
       "AGE_PERCENTIL_Above 90th            -0.016353           -0.016353   \n",
       "\n",
       "                          SAT02_ARTERIAL_MAX  SAT02_VENOUS_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER            0.021630            -0.051289   \n",
       "AGE_ABOVE65                        -0.077803            -0.074362   \n",
       "GENDER                             -0.007806             0.021203   \n",
       "DISEASE GROUPING 1                  0.002053            -0.020794   \n",
       "DISEASE GROUPING 2                 -0.019772            -0.029251   \n",
       "...                                      ...                  ...   \n",
       "AGE_PERCENTIL_60th                 -0.126554            -0.069683   \n",
       "AGE_PERCENTIL_70th                  0.003332            -0.028409   \n",
       "AGE_PERCENTIL_80th                 -0.014052             0.028209   \n",
       "AGE_PERCENTIL_90th                  0.021959            -0.053835   \n",
       "AGE_PERCENTIL_Above 90th           -0.016353            -0.016074   \n",
       "\n",
       "                          SAT02_VENOUS_MEAN  SAT02_VENOUS_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER          -0.051289         -0.051289   \n",
       "AGE_ABOVE65                       -0.074362         -0.074362   \n",
       "GENDER                             0.021203          0.021203   \n",
       "DISEASE GROUPING 1                -0.020794         -0.020794   \n",
       "DISEASE GROUPING 2                -0.029251         -0.029251   \n",
       "...                                     ...               ...   \n",
       "AGE_PERCENTIL_60th                -0.069683         -0.069683   \n",
       "AGE_PERCENTIL_70th                -0.028409         -0.028409   \n",
       "AGE_PERCENTIL_80th                 0.028209          0.028209   \n",
       "AGE_PERCENTIL_90th                -0.053835         -0.053835   \n",
       "AGE_PERCENTIL_Above 90th          -0.016074         -0.016074   \n",
       "\n",
       "                          SAT02_VENOUS_MAX  SODIUM_MEDIAN  SODIUM_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER         -0.051289       0.002493     0.002493   \n",
       "AGE_ABOVE65                      -0.074362      -0.096616    -0.096616   \n",
       "GENDER                            0.021203       0.029643     0.029643   \n",
       "DISEASE GROUPING 1               -0.020794      -0.024846    -0.024846   \n",
       "DISEASE GROUPING 2               -0.029251      -0.050164    -0.050164   \n",
       "...                                    ...            ...          ...   \n",
       "AGE_PERCENTIL_60th               -0.069683      -0.040166    -0.040166   \n",
       "AGE_PERCENTIL_70th               -0.028409      -0.017394    -0.017394   \n",
       "AGE_PERCENTIL_80th                0.028209       0.038117     0.038117   \n",
       "AGE_PERCENTIL_90th               -0.053835      -0.058816    -0.058816   \n",
       "AGE_PERCENTIL_Above 90th         -0.016074      -0.098647    -0.098647   \n",
       "\n",
       "                          SODIUM_MIN  SODIUM_MAX  TGO_MEDIAN  TGO_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER    0.002493    0.002493    0.029332  0.029332   \n",
       "AGE_ABOVE65                -0.096616   -0.096616    0.052032  0.052032   \n",
       "GENDER                      0.029643    0.029643   -0.071659 -0.071659   \n",
       "DISEASE GROUPING 1         -0.024846   -0.024846   -0.038853 -0.038853   \n",
       "DISEASE GROUPING 2         -0.050164   -0.050164    0.001904  0.001904   \n",
       "...                              ...         ...         ...       ...   \n",
       "AGE_PERCENTIL_60th         -0.040166   -0.040166   -0.025528 -0.025528   \n",
       "AGE_PERCENTIL_70th         -0.017394   -0.017394    0.013993  0.013993   \n",
       "AGE_PERCENTIL_80th          0.038117    0.038117    0.142807  0.142807   \n",
       "AGE_PERCENTIL_90th         -0.058816   -0.058816   -0.018972 -0.018972   \n",
       "AGE_PERCENTIL_Above 90th   -0.098647   -0.098647   -0.031013 -0.031013   \n",
       "\n",
       "                           TGO_MIN   TGO_MAX  TGP_MEDIAN  TGP_MEAN   TGP_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER  0.029332  0.029332    0.038154  0.038154  0.038154   \n",
       "AGE_ABOVE65               0.052032  0.052032   -0.046748 -0.046748 -0.046748   \n",
       "GENDER                   -0.071659 -0.071659   -0.151112 -0.151112 -0.151112   \n",
       "DISEASE GROUPING 1       -0.038853 -0.038853   -0.082593 -0.082593 -0.082593   \n",
       "DISEASE GROUPING 2        0.001904  0.001904   -0.018881 -0.018881 -0.018881   \n",
       "...                            ...       ...         ...       ...       ...   \n",
       "AGE_PERCENTIL_60th       -0.025528 -0.025528   -0.051416 -0.051416 -0.051416   \n",
       "AGE_PERCENTIL_70th        0.013993  0.013993    0.011052  0.011052  0.011052   \n",
       "AGE_PERCENTIL_80th        0.142807  0.142807    0.100054  0.100054  0.100054   \n",
       "AGE_PERCENTIL_90th       -0.018972 -0.018972   -0.039160 -0.039160 -0.039160   \n",
       "AGE_PERCENTIL_Above 90th -0.031013 -0.031013   -0.114723 -0.114723 -0.114723   \n",
       "\n",
       "                           TGP_MAX  TTPA_MEDIAN  TTPA_MEAN  TTPA_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER  0.038154     0.016988   0.016988  0.016988   \n",
       "AGE_ABOVE65              -0.046748     0.019146   0.019146  0.019146   \n",
       "GENDER                   -0.151112    -0.020860  -0.020860 -0.020860   \n",
       "DISEASE GROUPING 1       -0.082593     0.048705   0.048705  0.048705   \n",
       "DISEASE GROUPING 2       -0.018881    -0.013773  -0.013773 -0.013773   \n",
       "...                            ...          ...        ...       ...   \n",
       "AGE_PERCENTIL_60th       -0.051416     0.013201   0.013201  0.013201   \n",
       "AGE_PERCENTIL_70th        0.011052     0.019384   0.019384  0.019384   \n",
       "AGE_PERCENTIL_80th        0.100054    -0.000850  -0.000850 -0.000850   \n",
       "AGE_PERCENTIL_90th       -0.039160     0.005786   0.005786  0.005786   \n",
       "AGE_PERCENTIL_Above 90th -0.114723    -0.006668  -0.006668 -0.006668   \n",
       "\n",
       "                          TTPA_MAX  UREA_MEDIAN  UREA_MEAN  UREA_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER  0.016988     0.024557   0.024557  0.024557   \n",
       "AGE_ABOVE65               0.019146     0.268288   0.268288  0.268288   \n",
       "GENDER                   -0.020860    -0.150802  -0.150802 -0.150802   \n",
       "DISEASE GROUPING 1        0.048705     0.128472   0.128472  0.128472   \n",
       "DISEASE GROUPING 2       -0.013773     0.170536   0.170536  0.170536   \n",
       "...                            ...          ...        ...       ...   \n",
       "AGE_PERCENTIL_60th        0.013201    -0.029394  -0.029394 -0.029394   \n",
       "AGE_PERCENTIL_70th        0.019384     0.037489   0.037489  0.037489   \n",
       "AGE_PERCENTIL_80th       -0.000850     0.174140   0.174140  0.174140   \n",
       "AGE_PERCENTIL_90th        0.005786     0.122963   0.122963  0.122963   \n",
       "AGE_PERCENTIL_Above 90th -0.006668     0.172317   0.172317  0.172317   \n",
       "\n",
       "                          UREA_MAX  DIMER_MEDIAN  DIMER_MEAN  DIMER_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER  0.024557     -0.037059   -0.037059  -0.037059   \n",
       "AGE_ABOVE65               0.268288      0.030132    0.030132   0.030132   \n",
       "GENDER                   -0.150802      0.061197    0.061197   0.061197   \n",
       "DISEASE GROUPING 1        0.128472     -0.000371   -0.000371  -0.000371   \n",
       "DISEASE GROUPING 2        0.170536      0.046272    0.046272   0.046272   \n",
       "...                            ...           ...         ...        ...   \n",
       "AGE_PERCENTIL_60th       -0.029394     -0.022767   -0.022767  -0.022767   \n",
       "AGE_PERCENTIL_70th        0.037489      0.039238    0.039238   0.039238   \n",
       "AGE_PERCENTIL_80th        0.174140     -0.011301   -0.011301  -0.011301   \n",
       "AGE_PERCENTIL_90th        0.122963     -0.009991   -0.009991  -0.009991   \n",
       "AGE_PERCENTIL_Above 90th  0.172317      0.057064    0.057064   0.057064   \n",
       "\n",
       "                          DIMER_MAX  BLOODPRESSURE_DIASTOLIC_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER  -0.037059                      0.084111   \n",
       "AGE_ABOVE65                0.030132                     -0.110035   \n",
       "GENDER                     0.061197                     -0.135805   \n",
       "DISEASE GROUPING 1        -0.000371                     -0.136088   \n",
       "DISEASE GROUPING 2         0.046272                     -0.077085   \n",
       "...                             ...                           ...   \n",
       "AGE_PERCENTIL_60th        -0.022767                      0.004654   \n",
       "AGE_PERCENTIL_70th         0.039238                     -0.053111   \n",
       "AGE_PERCENTIL_80th        -0.011301                     -0.052881   \n",
       "AGE_PERCENTIL_90th        -0.009991                     -0.004553   \n",
       "AGE_PERCENTIL_Above 90th   0.057064                     -0.084406   \n",
       "\n",
       "                          BLOODPRESSURE_SISTOLIC_MEAN  HEART_RATE_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER                     0.058097         0.087693   \n",
       "AGE_ABOVE65                                  0.228852        -0.200581   \n",
       "GENDER                                      -0.108314        -0.017823   \n",
       "DISEASE GROUPING 1                           0.076260         0.005909   \n",
       "DISEASE GROUPING 2                           0.038512        -0.013088   \n",
       "...                                               ...              ...   \n",
       "AGE_PERCENTIL_60th                           0.005102        -0.032310   \n",
       "AGE_PERCENTIL_70th                           0.060404        -0.119560   \n",
       "AGE_PERCENTIL_80th                           0.040960        -0.125725   \n",
       "AGE_PERCENTIL_90th                           0.130305        -0.043693   \n",
       "AGE_PERCENTIL_Above 90th                     0.172745        -0.028540   \n",
       "\n",
       "                          RESPIRATORY_RATE_MEAN  TEMPERATURE_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER               0.028978         -0.027485   \n",
       "AGE_ABOVE65                            0.068900         -0.097945   \n",
       "GENDER                                -0.067077         -0.099291   \n",
       "DISEASE GROUPING 1                     0.055500         -0.066551   \n",
       "DISEASE GROUPING 2                     0.035687          0.002266   \n",
       "...                                         ...               ...   \n",
       "AGE_PERCENTIL_60th                    -0.002530         -0.036222   \n",
       "AGE_PERCENTIL_70th                    -0.012029         -0.084434   \n",
       "AGE_PERCENTIL_80th                     0.023043         -0.029821   \n",
       "AGE_PERCENTIL_90th                    -0.004108         -0.010255   \n",
       "AGE_PERCENTIL_Above 90th               0.113960         -0.013425   \n",
       "\n",
       "                          OXYGEN_SATURATION_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER               -0.029245   \n",
       "AGE_ABOVE65                            -0.102686   \n",
       "GENDER                                  0.081194   \n",
       "DISEASE GROUPING 1                      0.051511   \n",
       "DISEASE GROUPING 2                      0.034880   \n",
       "...                                          ...   \n",
       "AGE_PERCENTIL_60th                     -0.056213   \n",
       "AGE_PERCENTIL_70th                     -0.019098   \n",
       "AGE_PERCENTIL_80th                     -0.051971   \n",
       "AGE_PERCENTIL_90th                     -0.006510   \n",
       "AGE_PERCENTIL_Above 90th               -0.043478   \n",
       "\n",
       "                          BLOODPRESSURE_DIASTOLIC_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER                        0.079540   \n",
       "AGE_ABOVE65                                    -0.108749   \n",
       "GENDER                                         -0.121897   \n",
       "DISEASE GROUPING 1                             -0.130263   \n",
       "DISEASE GROUPING 2                             -0.080438   \n",
       "...                                                  ...   \n",
       "AGE_PERCENTIL_60th                              0.008357   \n",
       "AGE_PERCENTIL_70th                             -0.049869   \n",
       "AGE_PERCENTIL_80th                             -0.052979   \n",
       "AGE_PERCENTIL_90th                             -0.008900   \n",
       "AGE_PERCENTIL_Above 90th                       -0.085272   \n",
       "\n",
       "                          BLOODPRESSURE_SISTOLIC_MEDIAN  HEART_RATE_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER                       0.051120           0.087046   \n",
       "AGE_ABOVE65                                    0.227439          -0.196400   \n",
       "GENDER                                        -0.109377          -0.007538   \n",
       "DISEASE GROUPING 1                             0.075492           0.012722   \n",
       "DISEASE GROUPING 2                             0.033823          -0.014964   \n",
       "...                                                 ...                ...   \n",
       "AGE_PERCENTIL_60th                             0.006242          -0.036934   \n",
       "AGE_PERCENTIL_70th                             0.064265          -0.120775   \n",
       "AGE_PERCENTIL_80th                             0.043003          -0.118066   \n",
       "AGE_PERCENTIL_90th                             0.128893          -0.039778   \n",
       "AGE_PERCENTIL_Above 90th                       0.163772          -0.027114   \n",
       "\n",
       "                          RESPIRATORY_RATE_MEDIAN  TEMPERATURE_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER                 0.019975           -0.032546   \n",
       "AGE_ABOVE65                              0.060995           -0.099888   \n",
       "GENDER                                  -0.067162           -0.085804   \n",
       "DISEASE GROUPING 1                       0.056832           -0.061240   \n",
       "DISEASE GROUPING 2                       0.032226            0.002492   \n",
       "...                                           ...                 ...   \n",
       "AGE_PERCENTIL_60th                      -0.012600           -0.027681   \n",
       "AGE_PERCENTIL_70th                      -0.008186           -0.089068   \n",
       "AGE_PERCENTIL_80th                       0.020761           -0.037097   \n",
       "AGE_PERCENTIL_90th                      -0.006208           -0.004627   \n",
       "AGE_PERCENTIL_Above 90th                 0.112133           -0.017571   \n",
       "\n",
       "                          OXYGEN_SATURATION_MEDIAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER                 -0.037103   \n",
       "AGE_ABOVE65                              -0.091496   \n",
       "GENDER                                    0.081861   \n",
       "DISEASE GROUPING 1                        0.049834   \n",
       "DISEASE GROUPING 2                        0.032520   \n",
       "...                                            ...   \n",
       "AGE_PERCENTIL_60th                       -0.060416   \n",
       "AGE_PERCENTIL_70th                       -0.006775   \n",
       "AGE_PERCENTIL_80th                       -0.038063   \n",
       "AGE_PERCENTIL_90th                       -0.006385   \n",
       "AGE_PERCENTIL_Above 90th                 -0.046963   \n",
       "\n",
       "                          BLOODPRESSURE_DIASTOLIC_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER                     0.053537   \n",
       "AGE_ABOVE65                                 -0.075535   \n",
       "GENDER                                      -0.121243   \n",
       "DISEASE GROUPING 1                          -0.107524   \n",
       "DISEASE GROUPING 2                          -0.097790   \n",
       "...                                               ...   \n",
       "AGE_PERCENTIL_60th                          -0.000666   \n",
       "AGE_PERCENTIL_70th                          -0.033194   \n",
       "AGE_PERCENTIL_80th                          -0.051982   \n",
       "AGE_PERCENTIL_90th                           0.013375   \n",
       "AGE_PERCENTIL_Above 90th                    -0.051561   \n",
       "\n",
       "                          BLOODPRESSURE_SISTOLIC_MIN  HEART_RATE_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER                    0.053562        0.073602   \n",
       "AGE_ABOVE65                                 0.175373       -0.161583   \n",
       "GENDER                                     -0.095384       -0.032036   \n",
       "DISEASE GROUPING 1                          0.050363       -0.015845   \n",
       "DISEASE GROUPING 2                         -0.017487       -0.037816   \n",
       "...                                              ...             ...   \n",
       "AGE_PERCENTIL_60th                         -0.013060       -0.036691   \n",
       "AGE_PERCENTIL_70th                          0.055952       -0.099530   \n",
       "AGE_PERCENTIL_80th                          0.005482       -0.121007   \n",
       "AGE_PERCENTIL_90th                          0.120578       -0.004651   \n",
       "AGE_PERCENTIL_Above 90th                    0.150544       -0.013137   \n",
       "\n",
       "                          RESPIRATORY_RATE_MIN  TEMPERATURE_MIN  \\\n",
       "PATIENT_VISIT_IDENTIFIER              0.020976        -0.022254   \n",
       "AGE_ABOVE65                           0.036929        -0.086033   \n",
       "GENDER                               -0.042617        -0.077453   \n",
       "DISEASE GROUPING 1                    0.046873        -0.067414   \n",
       "DISEASE GROUPING 2                   -0.023823        -0.009899   \n",
       "...                                        ...              ...   \n",
       "AGE_PERCENTIL_60th                   -0.023341        -0.042687   \n",
       "AGE_PERCENTIL_70th                   -0.008962        -0.053378   \n",
       "AGE_PERCENTIL_80th                   -0.008251        -0.026693   \n",
       "AGE_PERCENTIL_90th                    0.016454        -0.006508   \n",
       "AGE_PERCENTIL_Above 90th              0.090186        -0.021532   \n",
       "\n",
       "                          OXYGEN_SATURATION_MIN  BLOODPRESSURE_DIASTOLIC_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER               0.004223                     0.076183   \n",
       "AGE_ABOVE65                           -0.069702                    -0.065501   \n",
       "GENDER                                 0.052013                    -0.075901   \n",
       "DISEASE GROUPING 1                     0.017839                    -0.087373   \n",
       "DISEASE GROUPING 2                    -0.065886                    -0.016980   \n",
       "...                                         ...                          ...   \n",
       "AGE_PERCENTIL_60th                    -0.087478                     0.002533   \n",
       "AGE_PERCENTIL_70th                     0.016494                    -0.020567   \n",
       "AGE_PERCENTIL_80th                    -0.048422                    -0.027230   \n",
       "AGE_PERCENTIL_90th                     0.006017                    -0.009085   \n",
       "AGE_PERCENTIL_Above 90th              -0.002659                    -0.063806   \n",
       "\n",
       "                          BLOODPRESSURE_SISTOLIC_MAX  HEART_RATE_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER                    0.061159        0.058760   \n",
       "AGE_ABOVE65                                 0.211603       -0.172953   \n",
       "GENDER                                     -0.067003       -0.023389   \n",
       "DISEASE GROUPING 1                          0.081414        0.019381   \n",
       "DISEASE GROUPING 2                          0.089277        0.012436   \n",
       "...                                              ...             ...   \n",
       "AGE_PERCENTIL_60th                          0.036454       -0.029485   \n",
       "AGE_PERCENTIL_70th                          0.040033       -0.091444   \n",
       "AGE_PERCENTIL_80th                          0.045213       -0.075540   \n",
       "AGE_PERCENTIL_90th                          0.107423       -0.069407   \n",
       "AGE_PERCENTIL_Above 90th                    0.145631       -0.044079   \n",
       "\n",
       "                          RESPIRATORY_RATE_MAX  TEMPERATURE_MAX  \\\n",
       "PATIENT_VISIT_IDENTIFIER              0.010442        -0.002016   \n",
       "AGE_ABOVE65                           0.054965        -0.060190   \n",
       "GENDER                               -0.045960        -0.089460   \n",
       "DISEASE GROUPING 1                    0.039290        -0.037312   \n",
       "DISEASE GROUPING 2                    0.091881         0.020381   \n",
       "...                                        ...              ...   \n",
       "AGE_PERCENTIL_60th                    0.023515        -0.012056   \n",
       "AGE_PERCENTIL_70th                   -0.024936        -0.077015   \n",
       "AGE_PERCENTIL_80th                    0.036039        -0.005385   \n",
       "AGE_PERCENTIL_90th                   -0.029551        -0.012878   \n",
       "AGE_PERCENTIL_Above 90th              0.084273        -0.003610   \n",
       "\n",
       "                          OXYGEN_SATURATION_MAX  BLOODPRESSURE_DIASTOLIC_DIFF  \\\n",
       "PATIENT_VISIT_IDENTIFIER              -0.036654                      0.023258   \n",
       "AGE_ABOVE65                           -0.073072                      0.002925   \n",
       "GENDER                                 0.098334                      0.029582   \n",
       "DISEASE GROUPING 1                     0.047763                      0.009159   \n",
       "DISEASE GROUPING 2                     0.057141                      0.061518   \n",
       "...                                         ...                           ...   \n",
       "AGE_PERCENTIL_60th                    -0.026558                      0.002673   \n",
       "AGE_PERCENTIL_70th                    -0.009193                      0.008280   \n",
       "AGE_PERCENTIL_80th                    -0.034433                      0.017205   \n",
       "AGE_PERCENTIL_90th                    -0.014940                     -0.018124   \n",
       "AGE_PERCENTIL_Above 90th              -0.044826                     -0.014257   \n",
       "\n",
       "                          BLOODPRESSURE_SISTOLIC_DIFF  HEART_RATE_DIFF  \\\n",
       "PATIENT_VISIT_IDENTIFIER                     0.010283        -0.006479   \n",
       "AGE_ABOVE65                                  0.043980        -0.025417   \n",
       "GENDER                                       0.019749         0.004793   \n",
       "DISEASE GROUPING 1                           0.031381         0.030283   \n",
       "DISEASE GROUPING 2                           0.095854         0.041773   \n",
       "...                                               ...              ...   \n",
       "AGE_PERCENTIL_60th                           0.044142         0.003055   \n",
       "AGE_PERCENTIL_70th                          -0.010923        -0.002047   \n",
       "AGE_PERCENTIL_80th                           0.036429         0.029652   \n",
       "AGE_PERCENTIL_90th                          -0.004330        -0.058839   \n",
       "AGE_PERCENTIL_Above 90th                     0.005048        -0.029139   \n",
       "\n",
       "                          RESPIRATORY_RATE_DIFF  TEMPERATURE_DIFF  \\\n",
       "PATIENT_VISIT_IDENTIFIER              -0.002880          0.016071   \n",
       "AGE_ABOVE65                            0.027294          0.018894   \n",
       "GENDER                                -0.016041         -0.012094   \n",
       "DISEASE GROUPING 1                     0.007681          0.022934   \n",
       "DISEASE GROUPING 2                     0.095052          0.024704   \n",
       "...                                         ...               ...   \n",
       "AGE_PERCENTIL_60th                     0.034289          0.024068   \n",
       "AGE_PERCENTIL_70th                    -0.016884         -0.021009   \n",
       "AGE_PERCENTIL_80th                     0.036651          0.016827   \n",
       "AGE_PERCENTIL_90th                    -0.035650         -0.005440   \n",
       "AGE_PERCENTIL_Above 90th               0.022455          0.014180   \n",
       "\n",
       "                          OXYGEN_SATURATION_DIFF  \\\n",
       "PATIENT_VISIT_IDENTIFIER               -0.013829   \n",
       "AGE_ABOVE65                             0.047390   \n",
       "GENDER                                 -0.023678   \n",
       "DISEASE GROUPING 1                     -0.004376   \n",
       "DISEASE GROUPING 2                      0.078461   \n",
       "...                                          ...   \n",
       "AGE_PERCENTIL_60th                      0.076853   \n",
       "AGE_PERCENTIL_70th                     -0.018279   \n",
       "AGE_PERCENTIL_80th                      0.037278   \n",
       "AGE_PERCENTIL_90th                     -0.009758   \n",
       "AGE_PERCENTIL_Above 90th               -0.009406   \n",
       "\n",
       "                          BLOODPRESSURE_DIASTOLIC_DIFF_REL  \\\n",
       "PATIENT_VISIT_IDENTIFIER                          0.014737   \n",
       "AGE_ABOVE65                                       0.017290   \n",
       "GENDER                                            0.028093   \n",
       "DISEASE GROUPING 1                                0.015410   \n",
       "DISEASE GROUPING 2                                0.067419   \n",
       "...                                                    ...   \n",
       "AGE_PERCENTIL_60th                                0.004529   \n",
       "AGE_PERCENTIL_70th                                0.007290   \n",
       "AGE_PERCENTIL_80th                                0.025348   \n",
       "AGE_PERCENTIL_90th                               -0.010704   \n",
       "AGE_PERCENTIL_Above 90th                         -0.004670   \n",
       "\n",
       "                          BLOODPRESSURE_SISTOLIC_DIFF_REL  \\\n",
       "PATIENT_VISIT_IDENTIFIER                         0.010439   \n",
       "AGE_ABOVE65                                      0.031833   \n",
       "GENDER                                           0.031469   \n",
       "DISEASE GROUPING 1                               0.030434   \n",
       "DISEASE GROUPING 2                               0.083738   \n",
       "...                                                   ...   \n",
       "AGE_PERCENTIL_60th                               0.042464   \n",
       "AGE_PERCENTIL_70th                              -0.014555   \n",
       "AGE_PERCENTIL_80th                               0.025148   \n",
       "AGE_PERCENTIL_90th                              -0.001351   \n",
       "AGE_PERCENTIL_Above 90th                        -0.001542   \n",
       "\n",
       "                          HEART_RATE_DIFF_REL  RESPIRATORY_RATE_DIFF_REL  \\\n",
       "PATIENT_VISIT_IDENTIFIER            -0.020332                   0.002510   \n",
       "AGE_ABOVE65                         -0.009802                   0.026774   \n",
       "GENDER                              -0.001420                  -0.012289   \n",
       "DISEASE GROUPING 1                   0.024897                   0.004111   \n",
       "DISEASE GROUPING 2                   0.037625                   0.093635   \n",
       "...                                       ...                        ...   \n",
       "AGE_PERCENTIL_60th                   0.004534                   0.029657   \n",
       "AGE_PERCENTIL_70th                   0.014513                  -0.011849   \n",
       "AGE_PERCENTIL_80th                   0.040777                   0.035368   \n",
       "AGE_PERCENTIL_90th                  -0.061165                  -0.032367   \n",
       "AGE_PERCENTIL_Above 90th            -0.029639                   0.019330   \n",
       "\n",
       "                          TEMPERATURE_DIFF_REL  OXYGEN_SATURATION_DIFF_REL  \\\n",
       "PATIENT_VISIT_IDENTIFIER              0.016640                   -0.013892   \n",
       "AGE_ABOVE65                           0.019965                    0.048119   \n",
       "GENDER                               -0.011126                   -0.023587   \n",
       "DISEASE GROUPING 1                    0.023840                   -0.004512   \n",
       "DISEASE GROUPING 2                    0.024797                    0.079275   \n",
       "...                                        ...                         ...   \n",
       "AGE_PERCENTIL_60th                    0.022469                    0.077005   \n",
       "AGE_PERCENTIL_70th                   -0.019324                   -0.017674   \n",
       "AGE_PERCENTIL_80th                    0.017503                    0.037763   \n",
       "AGE_PERCENTIL_90th                   -0.005087                   -0.010137   \n",
       "AGE_PERCENTIL_Above 90th              0.014956                   -0.009044   \n",
       "\n",
       "                          BLOODPRESSURE_ARTERIAL_MEAN  \\\n",
       "PATIENT_VISIT_IDENTIFIER                     0.083976   \n",
       "AGE_ABOVE65                                  0.006087   \n",
       "GENDER                                      -0.141105   \n",
       "DISEASE GROUPING 1                          -0.071114   \n",
       "DISEASE GROUPING 2                          -0.042064   \n",
       "...                                               ...   \n",
       "AGE_PERCENTIL_60th                           0.005365   \n",
       "AGE_PERCENTIL_70th                          -0.016100   \n",
       "AGE_PERCENTIL_80th                          -0.023326   \n",
       "AGE_PERCENTIL_90th                           0.046209   \n",
       "AGE_PERCENTIL_Above 90th                     0.003603   \n",
       "\n",
       "                          NEUTROPHILES/LINFOCITOS       ICU  \\\n",
       "PATIENT_VISIT_IDENTIFIER                 0.115270 -0.020097   \n",
       "AGE_ABOVE65                             -0.030171  0.129427   \n",
       "GENDER                                   0.078434 -0.043260   \n",
       "DISEASE GROUPING 1                       0.036167  0.045145   \n",
       "DISEASE GROUPING 2                       0.000150  0.082360   \n",
       "...                                           ...       ...   \n",
       "AGE_PERCENTIL_60th                       0.001576 -0.011763   \n",
       "AGE_PERCENTIL_70th                       0.022067  0.015032   \n",
       "AGE_PERCENTIL_80th                      -0.036897  0.058240   \n",
       "AGE_PERCENTIL_90th                       0.000704  0.068088   \n",
       "AGE_PERCENTIL_Above 90th                -0.033882  0.100623   \n",
       "\n",
       "                          AGE_PERCENTIL_10th  AGE_PERCENTIL_20th  \\\n",
       "PATIENT_VISIT_IDENTIFIER           -0.009140           -0.030883   \n",
       "AGE_ABOVE65                        -0.315026           -0.325501   \n",
       "GENDER                             -0.080397            0.019707   \n",
       "DISEASE GROUPING 1                 -0.050952           -0.088650   \n",
       "DISEASE GROUPING 2                 -0.057618            0.015524   \n",
       "...                                      ...                 ...   \n",
       "AGE_PERCENTIL_60th                 -0.114910           -0.118730   \n",
       "AGE_PERCENTIL_70th                 -0.116247           -0.120113   \n",
       "AGE_PERCENTIL_80th                 -0.119769           -0.123751   \n",
       "AGE_PERCENTIL_90th                 -0.101392           -0.104763   \n",
       "AGE_PERCENTIL_Above 90th           -0.107594           -0.111172   \n",
       "\n",
       "                          AGE_PERCENTIL_30th  AGE_PERCENTIL_40th  \\\n",
       "PATIENT_VISIT_IDENTIFIER           -0.079288            0.144888   \n",
       "AGE_ABOVE65                        -0.305342           -0.308265   \n",
       "GENDER                             -0.041619            0.007572   \n",
       "DISEASE GROUPING 1                 -0.085571           -0.073674   \n",
       "DISEASE GROUPING 2                  0.009828           -0.017266   \n",
       "...                                      ...                 ...   \n",
       "AGE_PERCENTIL_60th                 -0.111377           -0.112443   \n",
       "AGE_PERCENTIL_70th                 -0.112674           -0.113752   \n",
       "AGE_PERCENTIL_80th                 -0.116087           -0.117198   \n",
       "AGE_PERCENTIL_90th                 -0.098275           -0.099215   \n",
       "AGE_PERCENTIL_Above 90th           -0.104287           -0.105285   \n",
       "\n",
       "                          AGE_PERCENTIL_50th  AGE_PERCENTIL_60th  \\\n",
       "PATIENT_VISIT_IDENTIFIER            0.010010           -0.019118   \n",
       "AGE_ABOVE65                        -0.290485            0.342255   \n",
       "GENDER                              0.020262            0.033489   \n",
       "DISEASE GROUPING 1                 -0.099316           -0.009246   \n",
       "DISEASE GROUPING 2                 -0.039469            0.023101   \n",
       "...                                      ...                 ...   \n",
       "AGE_PERCENTIL_60th                 -0.105958            1.000000   \n",
       "AGE_PERCENTIL_70th                 -0.107192           -0.099610   \n",
       "AGE_PERCENTIL_80th                 -0.110438           -0.102627   \n",
       "AGE_PERCENTIL_90th                 -0.093493           -0.086880   \n",
       "AGE_PERCENTIL_Above 90th           -0.099212           -0.092195   \n",
       "\n",
       "                          AGE_PERCENTIL_70th  AGE_PERCENTIL_80th  \\\n",
       "PATIENT_VISIT_IDENTIFIER           -0.050190           -0.025630   \n",
       "AGE_ABOVE65                         0.369008            0.380186   \n",
       "GENDER                              0.014367           -0.048219   \n",
       "DISEASE GROUPING 1                  0.076382            0.054505   \n",
       "DISEASE GROUPING 2                 -0.035589            0.004597   \n",
       "...                                      ...                 ...   \n",
       "AGE_PERCENTIL_60th                 -0.099610           -0.102627   \n",
       "AGE_PERCENTIL_70th                  1.000000           -0.103822   \n",
       "AGE_PERCENTIL_80th                 -0.103822            1.000000   \n",
       "AGE_PERCENTIL_90th                 -0.087892           -0.090554   \n",
       "AGE_PERCENTIL_Above 90th           -0.093269           -0.096094   \n",
       "\n",
       "                          AGE_PERCENTIL_90th  AGE_PERCENTIL_Above 90th  \n",
       "PATIENT_VISIT_IDENTIFIER            0.050998                  0.012995  \n",
       "AGE_ABOVE65                         0.321851                  0.341540  \n",
       "GENDER                              0.017056                  0.074544  \n",
       "DISEASE GROUPING 1                  0.103981                  0.236776  \n",
       "DISEASE GROUPING 2                  0.085243                  0.030316  \n",
       "...                                      ...                       ...  \n",
       "AGE_PERCENTIL_60th                 -0.086880                 -0.092195  \n",
       "AGE_PERCENTIL_70th                 -0.087892                 -0.093269  \n",
       "AGE_PERCENTIL_80th                 -0.090554                 -0.096094  \n",
       "AGE_PERCENTIL_90th                  1.000000                 -0.081349  \n",
       "AGE_PERCENTIL_Above 90th           -0.081349                  1.000000  \n",
       "\n",
       "[206 rows x 206 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# highly or perfectly correlated features should be removed. In order to do that, I checked tbe number of times a feature had a correlation of 1 with another one. Then I removed N-1 oif those features.\n",
    "\n",
    "correlation_mat = df_concat.corr()\n",
    "correlation_mat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:51.600352Z",
     "iopub.status.busy": "2021-03-11T23:17:51.598633Z",
     "iopub.status.idle": "2021-03-11T23:17:51.696989Z",
     "shell.execute_reply": "2021-03-11T23:17:51.697494Z"
    },
    "papermill": {
     "duration": 0.201387,
     "end_time": "2021-03-11T23:17:51.697682",
     "exception": false,
     "start_time": "2021-03-11T23:17:51.496295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# checking which features have a perfect correlation more than once, which implies it is perfectly correlated with other features\n",
    "drop_columns_repeated = []\n",
    "for x in correlation_mat.columns:\n",
    "    sum_perfect_correlation = correlation_mat[x].value_counts()[1]\n",
    "    if sum_perfect_correlation>1:\n",
    "        drop_columns_repeated.append(x)\n",
    "    else:\n",
    "        pass\n",
    "\n",
    "# since there are 144 features that fall into that category, a list will be created in order to pick only one of those for features in order for it to remain\n",
    "feature_reduction = np.arange(0, 143, 4)\n",
    "feature_reduction = feature_reduction.tolist()\n",
    "\n",
    "keep_features_list = []\n",
    "for x in feature_reduction:\n",
    "    keep_feature_index = drop_columns_repeated[x]\n",
    "    keep_features_list.append(keep_feature_index)\n",
    "    \n",
    "repeated_columns_drop = [x for x in drop_columns_repeated if x not in keep_features_list]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:51.894334Z",
     "iopub.status.busy": "2021-03-11T23:17:51.893645Z",
     "iopub.status.idle": "2021-03-11T23:17:51.901886Z",
     "shell.execute_reply": "2021-03-11T23:17:51.901327Z"
    },
    "papermill": {
     "duration": 0.108541,
     "end_time": "2021-03-11T23:17:51.902025",
     "exception": false,
     "start_time": "2021-03-11T23:17:51.793484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1573, 99)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_concat_clean = df_concat.copy()\n",
    "df_concat_clean = df_concat_clean.drop(columns=repeated_columns_drop)\n",
    "df_concat_clean.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:52.101431Z",
     "iopub.status.busy": "2021-03-11T23:17:52.100540Z",
     "iopub.status.idle": "2021-03-11T23:17:52.191833Z",
     "shell.execute_reply": "2021-03-11T23:17:52.191179Z"
    },
    "papermill": {
     "duration": 0.194346,
     "end_time": "2021-03-11T23:17:52.191978",
     "exception": false,
     "start_time": "2021-03-11T23:17:51.997632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking if there are still perfectly correlated features\n",
    "correlation_mat_clean = df_concat_clean.corr()\n",
    "\n",
    "drop_columns_repeated_clean = []\n",
    "for x in correlation_mat_clean.columns:\n",
    "    sum_perfect_correlation = correlation_mat_clean[x].value_counts()[1]\n",
    "    if sum_perfect_correlation>1:\n",
    "        drop_columns_repeated_clean.append(x)\n",
    "    else:\n",
    "        pass\n",
    "\n",
    "len(drop_columns_repeated_clean)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.095257,
     "end_time": "2021-03-11T23:17:52.382835",
     "exception": false,
     "start_time": "2021-03-11T23:17:52.287578",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In order to have the best features in the model, features with low correlation to the target or with a correlation too high will be removed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:52.583553Z",
     "iopub.status.busy": "2021-03-11T23:17:52.582907Z",
     "iopub.status.idle": "2021-03-11T23:17:52.585993Z",
     "shell.execute_reply": "2021-03-11T23:17:52.585511Z"
    },
    "papermill": {
     "duration": 0.107563,
     "end_time": "2021-03-11T23:17:52.586134",
     "exception": false,
     "start_time": "2021-03-11T23:17:52.478571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "min_threshold = 0.05\n",
    "max_threshold = 0.90\n",
    "\n",
    "keep_features = correlation_mat_clean[((correlation_mat_clean['ICU']>=min_threshold) & (correlation_mat_clean['ICU']<=max_threshold)) | ((correlation_mat_clean['ICU']<=-min_threshold)) & (correlation_mat_clean['ICU']>=-max_threshold)]['ICU'].index.to_list()\n",
    "add_icu_window = ['WINDOW','ICU']\n",
    "add_patient_id = ['PATIENT_VISIT_IDENTIFIER']\n",
    "keep_features = add_patient_id + keep_features + add_icu_window"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:52.784765Z",
     "iopub.status.busy": "2021-03-11T23:17:52.784091Z",
     "iopub.status.idle": "2021-03-11T23:17:52.790184Z",
     "shell.execute_reply": "2021-03-11T23:17:52.790758Z"
    },
    "papermill": {
     "duration": 0.108081,
     "end_time": "2021-03-11T23:17:52.790926",
     "exception": false,
     "start_time": "2021-03-11T23:17:52.682845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1573, 68)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_best_features = df_concat_clean.copy()\n",
    "df_best_features = df_best_features[keep_features]\n",
    "df_best_features.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:52.986530Z",
     "iopub.status.busy": "2021-03-11T23:17:52.985883Z",
     "iopub.status.idle": "2021-03-11T23:17:56.560738Z",
     "shell.execute_reply": "2021-03-11T23:17:56.561244Z"
    },
    "papermill": {
     "duration": 3.673948,
     "end_time": "2021-03-11T23:17:56.561432",
     "exception": false,
     "start_time": "2021-03-11T23:17:52.887484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1008 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# with a clean database, we can plot the correlation heatmap\n",
    "plt.figure(figsize=(20,14))\n",
    "correlation_mat = df_best_features.corr()\n",
    "\n",
    "sns.heatmap(correlation_mat)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.102361,
     "end_time": "2021-03-11T23:17:56.766403",
     "exception": false,
     "start_time": "2021-03-11T23:17:56.664042",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "With a clean dataset, Window focused dataframes can be created, in order to study each window separately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:17:56.978710Z",
     "iopub.status.busy": "2021-03-11T23:17:56.976831Z",
     "iopub.status.idle": "2021-03-11T23:18:07.852499Z",
     "shell.execute_reply": "2021-03-11T23:18:07.851792Z"
    },
    "papermill": {
     "duration": 10.983295,
     "end_time": "2021-03-11T23:18:07.852648",
     "exception": false,
     "start_time": "2021-03-11T23:17:56.869353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:13: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  del sys.path[0]\n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:45: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:114: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:183: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n"
     ]
    }
   ],
   "source": [
    "# creating dataframes for each window, with a feature indicating whether the Patient was sent to the ICU on the next window\n",
    "df_first_window,df_second_window,df_third_window,df_fourth_window = window_df_creation(df_best_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:08.068550Z",
     "iopub.status.busy": "2021-03-11T23:18:08.067588Z",
     "iopub.status.idle": "2021-03-11T23:18:08.071470Z",
     "shell.execute_reply": "2021-03-11T23:18:08.070926Z"
    },
    "papermill": {
     "duration": 0.115763,
     "end_time": "2021-03-11T23:18:08.071612",
     "exception": false,
     "start_time": "2021-03-11T23:18:07.955849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    326\n",
      "1     27\n",
      "Name: next_period_ICU, dtype: int64\n",
      "\n",
      "Shape (353, 66)\n"
     ]
    }
   ],
   "source": [
    "print(df_first_window['next_period_ICU'].value_counts())\n",
    "print(f\"\\nShape {df_first_window.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:08.286826Z",
     "iopub.status.busy": "2021-03-11T23:18:08.286103Z",
     "iopub.status.idle": "2021-03-11T23:18:08.290458Z",
     "shell.execute_reply": "2021-03-11T23:18:08.289801Z"
    },
    "papermill": {
     "duration": 0.115121,
     "end_time": "2021-03-11T23:18:08.290604",
     "exception": false,
     "start_time": "2021-03-11T23:18:08.175483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    286\n",
      "1     40\n",
      "Name: next_period_ICU, dtype: int64\n",
      "\n",
      "Shape (326, 122)\n"
     ]
    }
   ],
   "source": [
    "print(df_second_window['next_period_ICU'].value_counts())\n",
    "print(f\"\\nShape {df_second_window.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:08.505599Z",
     "iopub.status.busy": "2021-03-11T23:18:08.504954Z",
     "iopub.status.idle": "2021-03-11T23:18:08.508551Z",
     "shell.execute_reply": "2021-03-11T23:18:08.509120Z"
    },
    "papermill": {
     "duration": 0.114518,
     "end_time": "2021-03-11T23:18:08.509311",
     "exception": false,
     "start_time": "2021-03-11T23:18:08.394793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    255\n",
      "1     31\n",
      "Name: next_period_ICU, dtype: int64\n",
      "\n",
      "Shape (286, 176)\n"
     ]
    }
   ],
   "source": [
    "print(df_third_window['next_period_ICU'].value_counts())\n",
    "print(f\"\\nShape {df_third_window.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:08.723777Z",
     "iopub.status.busy": "2021-03-11T23:18:08.723072Z",
     "iopub.status.idle": "2021-03-11T23:18:08.726546Z",
     "shell.execute_reply": "2021-03-11T23:18:08.725924Z"
    },
    "papermill": {
     "duration": 0.113601,
     "end_time": "2021-03-11T23:18:08.726702",
     "exception": false,
     "start_time": "2021-03-11T23:18:08.613101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    190\n",
      "1     65\n",
      "Name: next_period_ICU, dtype: int64\n",
      "\n",
      "Shape (255, 230)\n"
     ]
    }
   ],
   "source": [
    "print(df_fourth_window['next_period_ICU'].value_counts())\n",
    "print(f\"\\nShape {df_fourth_window.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.104167,
     "end_time": "2021-03-11T23:18:08.936372",
     "exception": false,
     "start_time": "2021-03-11T23:18:08.832205",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Analysing wich model to use for the first window ICU analysis**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.104569,
     "end_time": "2021-03-11T23:18:09.147251",
     "exception": false,
     "start_time": "2021-03-11T23:18:09.042682",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Next Window ICU Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.104273,
     "end_time": "2021-03-11T23:18:09.355927",
     "exception": false,
     "start_time": "2021-03-11T23:18:09.251654",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "After running the Hyperoptimization once, and finding the best hyperparameters, that section of the code was commented, due to it taking long to run, and the model being already stable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.108252,
     "end_time": "2021-03-11T23:18:09.569563",
     "exception": false,
     "start_time": "2021-03-11T23:18:09.461311",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* # Window (0-2 hours)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:09.789312Z",
     "iopub.status.busy": "2021-03-11T23:18:09.786942Z",
     "iopub.status.idle": "2021-03-11T23:18:09.795723Z",
     "shell.execute_reply": "2021-03-11T23:18:09.796394Z"
    },
    "papermill": {
     "duration": 0.12121,
     "end_time": "2021-03-11T23:18:09.796572",
     "exception": false,
     "start_time": "2021-03-11T23:18:09.675362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#     train test split\n",
    "_, _, _, _, x_full, y_full = train_test(df_first_window)  \n",
    "\n",
    "\n",
    "\n",
    "###############     Logistic Regression     ###############\n",
    "\n",
    "# init_time = time.time()\n",
    "\n",
    "# ###### Hyperoptimization ###### --> after discovering the best hyperparameters, we do not need to keep executing that part of the code\n",
    "# lr_params = {\n",
    "#     'C': np.random.uniform(low=0.0, high=1.0, size=1000),\n",
    "#     'penalty': ['l1', 'l2'],\n",
    "#     'max_iter': np.random.uniform(low=2000, high=10000, size=1000),\n",
    "# }\n",
    "\n",
    "# lr_random_search_model = RandomizedSearchCV(\n",
    "#     estimator=LogisticRegression(\n",
    "#         fit_intercept=True,\n",
    "#         class_weight='balanced',\n",
    "#         random_state=42\n",
    "#     ), \n",
    "#     param_distributions=lr_params,\n",
    "#     scoring='f1',\n",
    "#     cv=4,\n",
    "#     n_iter=2000,\n",
    "#     n_jobs=-1,\n",
    "#     random_state=42\n",
    "# )\n",
    "\n",
    "# lr_random_search_model.fit(x_full, y_full)\n",
    "# lr_best_model = lr_random_search_model.best_estimator_\n",
    "\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             lr_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=4,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# lr_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# lr_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# lr_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# lr_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"Logistic Regression\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train_cv,\n",
    "#                 recall_train_cv,\n",
    "#                 auc_score_train_cv,\n",
    "#                 avg_prec_train_cv,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 lr_f1_score_test,\n",
    "#                 lr_recall_test,\n",
    "#                 lr_auc_score_test,\n",
    "#                 lr_avg_prec_test,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# lr_fit_time = round((end_time - init_time),2)\n",
    "\n",
    "# print(f\"Logistic Regression done in {lr_fit_time} seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:10.010799Z",
     "iopub.status.busy": "2021-03-11T23:18:10.010059Z",
     "iopub.status.idle": "2021-03-11T23:18:10.013585Z",
     "shell.execute_reply": "2021-03-11T23:18:10.014080Z"
    },
    "papermill": {
     "duration": 0.113254,
     "end_time": "2021-03-11T23:18:10.014250",
     "exception": false,
     "start_time": "2021-03-11T23:18:09.900996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# -------------------  --------  ------  -----  -------------\n",
    "# Logistic Regression  F1 Score  Recall  AUC    Avg Precision\n",
    "# Hyperopt Train       0.433     0.814   0.897  0.469\n",
    "# Hyperopt Test        0.309     0.619   0.675  0.245\n",
    "# -------------------  --------  ------  -----  -------------\n",
    "# Logistic Regression done in 271.84 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:10.228240Z",
     "iopub.status.busy": "2021-03-11T23:18:10.227548Z",
     "iopub.status.idle": "2021-03-11T23:18:10.466363Z",
     "shell.execute_reply": "2021-03-11T23:18:10.467246Z"
    },
    "papermill": {
     "duration": 0.347348,
     "end_time": "2021-03-11T23:18:10.467540",
     "exception": false,
     "start_time": "2021-03-11T23:18:10.120192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "###############     Logistic Regression     ###############\n",
    "\n",
    "lr_best_model = LogisticRegression(C=0.2133298308566437, class_weight='balanced',\n",
    "                   max_iter=8461.978386670755, random_state=42)\n",
    "\n",
    "lr_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = lr_best_model.predict(x_full)\n",
    "y_prob_test = lr_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "lr_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "lr_f1_score_test = round(f1_score_test[1],4)\n",
    "lr_recall_test = round(recall_test[1],4)\n",
    "\n",
    "lr_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:10.764311Z",
     "iopub.status.busy": "2021-03-11T23:18:10.763539Z",
     "iopub.status.idle": "2021-03-11T23:18:10.766053Z",
     "shell.execute_reply": "2021-03-11T23:18:10.766537Z"
    },
    "papermill": {
     "duration": 0.120921,
     "end_time": "2021-03-11T23:18:10.766784",
     "exception": false,
     "start_time": "2021-03-11T23:18:10.645863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ###############     Extra Trees     ############### \n",
    "    \n",
    "# init_time = time.time()\n",
    "\n",
    "\n",
    "# # Hyperparameter grid\n",
    "# param_grid = {\n",
    "#     'n_estimators': np.linspace(1500, 3000).astype(int),\n",
    "#     'max_depth': list(np.linspace(2, 4).astype(int)),\n",
    "#     'max_features': ['auto', 'sqrt'],\n",
    "#     'max_samples': list(np.arange(0.5, 1, 0.1)),\n",
    "#     'min_samples_split': [5, 10, 20],\n",
    "#     'bootstrap': [True, False]\n",
    "# }\n",
    "\n",
    "# # Estimator for use in random search\n",
    "# estimator = ExtraTreesClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "# # Create the random search model\n",
    "# xtrees_model = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "#                         scoring = 'f1', cv = 3, \n",
    "#                         n_iter = 100, verbose = 0,\n",
    "#                         random_state=42)\n",
    "\n",
    "# # Fit \n",
    "# xtrees_model.fit(x_full, y_full)\n",
    "# xt_best_model = xtrees_model.best_estimator_\n",
    "\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             xt_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=4,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# xt_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# xt_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# xt_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# xt_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"Extra Trees\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train,\n",
    "#                 recall_train,\n",
    "#                 auc_score_train,\n",
    "#                 avg_prec_train,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 xt_f1_score_test_cv,\n",
    "#                 xt_recall_test_cv,\n",
    "#                 xt_auc_score_test_cv,\n",
    "#                 xt_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# xt_fit_time = round((end_time - init_time),2)\n",
    "# print(f\"Extra Trees done in {xt_fit_time} seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:10.980511Z",
     "iopub.status.busy": "2021-03-11T23:18:10.979847Z",
     "iopub.status.idle": "2021-03-11T23:18:10.982899Z",
     "shell.execute_reply": "2021-03-11T23:18:10.983386Z"
    },
    "papermill": {
     "duration": 0.111668,
     "end_time": "2021-03-11T23:18:10.983562",
     "exception": false,
     "start_time": "2021-03-11T23:18:10.871894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# --------------  --------  ------  -----  -------------\n",
    "# Extra Trees     F1 Score  Recall  AUC    Avg Precision\n",
    "# Hyperopt Train  0.8734    0.8961  0.969  0.7984\n",
    "# Hyperopt Test   0.273     0.292   0.7    0.263\n",
    "# --------------  --------  ------  -----  -------------\n",
    "# Extra Trees done in 475.69 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:11.200908Z",
     "iopub.status.busy": "2021-03-11T23:18:11.200144Z",
     "iopub.status.idle": "2021-03-11T23:18:13.774119Z",
     "shell.execute_reply": "2021-03-11T23:18:13.774665Z"
    },
    "papermill": {
     "duration": 2.68349,
     "end_time": "2021-03-11T23:18:13.774857",
     "exception": false,
     "start_time": "2021-03-11T23:18:11.091367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "###############     Extra Trees     ###############\n",
    "\n",
    "xt_best_model = ExtraTreesClassifier(class_weight='balanced', max_depth=4, max_features='sqrt',\n",
    "                     max_samples=0.6, min_samples_split=20, n_estimators=1591,\n",
    "                     random_state=42)\n",
    "\n",
    "xt_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = xt_best_model.predict(x_full)\n",
    "y_prob_test = xt_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "xt_auc_score_test_1 = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "xt_f1_score_test_1 = round(f1_score_test[1],4)\n",
    "xt_recall_test_1 = round(recall_test[1],4)\n",
    "\n",
    "xt_avg_prec_test_1 = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:13.996068Z",
     "iopub.status.busy": "2021-03-11T23:18:13.995308Z",
     "iopub.status.idle": "2021-03-11T23:18:13.999773Z",
     "shell.execute_reply": "2021-03-11T23:18:14.000234Z"
    },
    "papermill": {
     "duration": 0.118859,
     "end_time": "2021-03-11T23:18:14.000446",
     "exception": false,
     "start_time": "2021-03-11T23:18:13.881587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# init_time = time.time()\n",
    "\n",
    "\n",
    "# # Hyperparameter grid\n",
    "# param_grid = {\"n_estimators\": np.linspace(2, 5).astype(int),\n",
    "#               \"boosting_type\": [\"gbdt\",\"dart\",\"goss\"],\n",
    "#               \"subsample\": list(np.arange(0.5, 1, 0.2)),\n",
    "#               \"colsample_bytree\": list(np.arange(0.5, 0.8, 0.1)),\n",
    "#               \"objective\": [\"binary\",\"multiclass\"],\n",
    "#               \"alpha\": list(np.arange(0, 0.6, 0.2)),\n",
    "#               \"max_depth\": [2,3,4,5,6]\n",
    "#              }\n",
    "\n",
    "# # Estimator for use in random search\n",
    "# estimator = LGBMClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "# # Create the random search model\n",
    "# lgbm = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "#                         scoring = 'f1', cv = 5, \n",
    "#                         n_iter = 100, verbose = 0,\n",
    "#                         random_state=42)\n",
    "\n",
    "# # Fit \n",
    "# lgbm.fit(x_full, y_full)\n",
    "# lgbm_best_model = lgbm.best_estimator_\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             lr_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=5,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# lgbm_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# lgbm_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# lgbm_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# lgbm_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train,\n",
    "#                 recall_train,\n",
    "#                 auc_score_train,\n",
    "#                 avg_prec_train,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 lgbm_f1_score_test_cv,\n",
    "#                 lgbm_recall_test_cv,\n",
    "#                 lgbm_auc_score_test_cv,\n",
    "#                 lgbm_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# lgbm_fit_time = round(end_time - init_time,3)\n",
    "# print(f\"LGBM done in {lgbm_fit_time} seconds\")\n",
    "# print(lgbm_best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:14.218783Z",
     "iopub.status.busy": "2021-03-11T23:18:14.218016Z",
     "iopub.status.idle": "2021-03-11T23:18:14.221092Z",
     "shell.execute_reply": "2021-03-11T23:18:14.221614Z"
    },
    "papermill": {
     "duration": 0.11283,
     "end_time": "2021-03-11T23:18:14.221801",
     "exception": false,
     "start_time": "2021-03-11T23:18:14.108971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# --------------  --------  ------  -----  -------------\n",
    "#                 F1 Score  Recall  AUC    Avg Precision\n",
    "# Hyperopt Train  0.8734    0.8961  0.969  0.7984\n",
    "# Hyperopt Test   0.313     0.593   0.729  0.33\n",
    "# --------------  --------  ------  -----  -------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:14.437036Z",
     "iopub.status.busy": "2021-03-11T23:18:14.436365Z",
     "iopub.status.idle": "2021-03-11T23:18:14.505392Z",
     "shell.execute_reply": "2021-03-11T23:18:14.506277Z"
    },
    "papermill": {
     "duration": 0.178639,
     "end_time": "2021-03-11T23:18:14.506515",
     "exception": false,
     "start_time": "2021-03-11T23:18:14.327876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n"
     ]
    }
   ],
   "source": [
    "lgbm_best_model = LGBMClassifier(alpha=0.4, class_weight='balanced',\n",
    "               colsample_bytree=0.7999999999999999, max_depth=5, n_estimators=4,\n",
    "               objective='binary', random_state=42,\n",
    "               subsample=0.8999999999999999)\n",
    "\n",
    "lgbm_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = lgbm_best_model.predict(x_full)\n",
    "y_prob_test = lgbm_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "lgbm_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "lgbm_f1_score_test = round(f1_score_test[1],4)\n",
    "lgbm_recall_test = round(recall_test[1],4)\n",
    "\n",
    "lgbm_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:14.733967Z",
     "iopub.status.busy": "2021-03-11T23:18:14.733239Z",
     "iopub.status.idle": "2021-03-11T23:18:14.742668Z",
     "shell.execute_reply": "2021-03-11T23:18:14.743145Z"
    },
    "papermill": {
     "duration": 0.123643,
     "end_time": "2021-03-11T23:18:14.743350",
     "exception": false,
     "start_time": "2021-03-11T23:18:14.619707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------  --------  ------  ------  -------------\n",
      "Model                F1-score  Recall  AUC     Avg Precision\n",
      "Logistic Regression  0.3846    0.7407  0.886   0.2122\n",
      "Extra Trees          0.6154    0.7407  0.9655  0.4097\n",
      "LGBM                 0.4538    1.0     0.9402  0.2935\n",
      "-------------------  --------  ------  ------  -------------\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "ExtraTreesClassifier(class_weight='balanced', max_depth=4, max_features='sqrt',\n",
       "                     max_samples=0.6, min_samples_split=20, n_estimators=1591,\n",
       "                     random_state=42)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###############     Model comparison table     ###############\n",
    "\n",
    "\n",
    "print(\n",
    "    tabulate(\n",
    "        [\n",
    "            [\"Model\", \"F1-score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "            [\n",
    "                \"Logistic Regression\",\n",
    "                lr_f1_score_test,\n",
    "                lr_recall_test,\n",
    "                lr_auc_score_test,\n",
    "                lr_avg_prec_test,          \n",
    "            ],\n",
    "            [\n",
    "                \"Extra Trees\",\n",
    "                xt_f1_score_test_1,\n",
    "                xt_recall_test_1,\n",
    "                xt_auc_score_test_1,\n",
    "                xt_avg_prec_test_1,\n",
    "            ],\n",
    "            [\n",
    "                \"LGBM\",\n",
    "                lgbm_f1_score_test,\n",
    "                lgbm_recall_test,\n",
    "                lgbm_auc_score_test,\n",
    "                lgbm_avg_prec_test\n",
    "            ],\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "\n",
    "best_model_1 = xt_best_model\n",
    "best_model_1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.109085,
     "end_time": "2021-03-11T23:18:14.960803",
     "exception": false,
     "start_time": "2021-03-11T23:18:14.851718",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "All metrics were used to determine the best Model, but a model with balanced metrics would have preference before one that excelled in a  specific metric, such as AUC."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.107027,
     "end_time": "2021-03-11T23:18:15.176995",
     "exception": false,
     "start_time": "2021-03-11T23:18:15.069968",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* # Window (2-4 hours)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:15.403344Z",
     "iopub.status.busy": "2021-03-11T23:18:15.400792Z",
     "iopub.status.idle": "2021-03-11T23:18:15.405657Z",
     "shell.execute_reply": "2021-03-11T23:18:15.406139Z"
    },
    "papermill": {
     "duration": 0.122167,
     "end_time": "2021-03-11T23:18:15.406338",
     "exception": false,
     "start_time": "2021-03-11T23:18:15.284171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#     train test split\n",
    "_, _, _, _, x_full, y_full = train_test(df_second_window)  \n",
    "\n",
    "\n",
    "\n",
    "# ###############     Logistic Regression     ###############\n",
    "\n",
    "# init_time = time.time()\n",
    "\n",
    "# ###### Hyperoptimization ###### --> after discovering the best hyperparameters, we do not need to keep executing that part of the code\n",
    "# lr_params = {\n",
    "#     'C': np.random.uniform(low=0.0, high=1.0, size=1000),\n",
    "#     'penalty': ['l1', 'l2'],\n",
    "#     'max_iter': np.random.uniform(low=2000, high=10000, size=1000),\n",
    "# }\n",
    "\n",
    "# lr_random_search_model = RandomizedSearchCV(\n",
    "#     estimator=LogisticRegression(\n",
    "#         fit_intercept=True,\n",
    "#         class_weight='balanced',\n",
    "#         random_state=42\n",
    "#     ), \n",
    "#     param_distributions=lr_params,\n",
    "#     scoring='f1',\n",
    "#     cv=4,\n",
    "#     n_iter=2000,\n",
    "#     n_jobs=-1,\n",
    "#     random_state=42\n",
    "# )\n",
    "\n",
    "# lr_random_search_model.fit(x_full, y_full)\n",
    "# lr_best_model = lr_random_search_model.best_estimator_\n",
    "\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             lr_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=4,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# lr_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# lr_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# lr_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# lr_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"Logistic Regression\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train_cv,\n",
    "#                 recall_train_cv,\n",
    "#                 auc_score_train_cv,\n",
    "#                 avg_prec_train_cv,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 lr_f1_score_test_cv,\n",
    "#                 lr_recall_test_cv,\n",
    "#                 lr_auc_score_test_cv,\n",
    "#                 lr_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# lr_fit_time = round((end_time - init_time),2)\n",
    "\n",
    "# print(f\"Logistic Regression done in {lr_fit_time} seconds\")\n",
    "# print(lr_best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:15.625370Z",
     "iopub.status.busy": "2021-03-11T23:18:15.624702Z",
     "iopub.status.idle": "2021-03-11T23:18:15.627745Z",
     "shell.execute_reply": "2021-03-11T23:18:15.628292Z"
    },
    "papermill": {
     "duration": 0.114405,
     "end_time": "2021-03-11T23:18:15.628464",
     "exception": false,
     "start_time": "2021-03-11T23:18:15.514059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# -------------------  --------  ------  -----  -------------\n",
    "# Logistic Regression  F1 Score  Recall  AUC    Avg Precision\n",
    "# Hyperopt Train       0.592     0.883   0.93   0.716\n",
    "# Hyperopt Test        0.393     0.6     0.792  0.452\n",
    "# -------------------  --------  ------  -----  -------------\n",
    "# Logistic Regression done in 187.67 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:15.847564Z",
     "iopub.status.busy": "2021-03-11T23:18:15.846891Z",
     "iopub.status.idle": "2021-03-11T23:18:16.088372Z",
     "shell.execute_reply": "2021-03-11T23:18:16.089213Z"
    },
    "papermill": {
     "duration": 0.353318,
     "end_time": "2021-03-11T23:18:16.089521",
     "exception": false,
     "start_time": "2021-03-11T23:18:15.736203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lr_best_model = LogisticRegression(C=0.8343348698861569, class_weight='balanced',\n",
    "                   max_iter=4431.907052952959, random_state=42)\n",
    "\n",
    "lr_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = lr_best_model.predict(x_full)\n",
    "y_prob_test = lr_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "lr_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "lr_f1_score_test = round(f1_score_test[1],4)\n",
    "lr_recall_test = round(recall_test[1],4)\n",
    "\n",
    "lr_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:16.360741Z",
     "iopub.status.busy": "2021-03-11T23:18:16.359944Z",
     "iopub.status.idle": "2021-03-11T23:18:16.362563Z",
     "shell.execute_reply": "2021-03-11T23:18:16.363054Z"
    },
    "papermill": {
     "duration": 0.118574,
     "end_time": "2021-03-11T23:18:16.363297",
     "exception": false,
     "start_time": "2021-03-11T23:18:16.244723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ###############     Extra Trees     ############### \n",
    "    \n",
    "# init_time = time.time()\n",
    "\n",
    "\n",
    "# # Hyperparameter grid\n",
    "# param_grid = {\n",
    "#     'n_estimators': np.linspace(1500, 3000).astype(int),\n",
    "#     'max_depth': list(np.linspace(2, 4).astype(int)),\n",
    "#     'max_features': ['auto', 'sqrt'],\n",
    "#     'max_samples': list(np.arange(0.5, 1, 0.1)),\n",
    "#     'min_samples_split': [5, 10, 20],\n",
    "#     'bootstrap': [True, False]\n",
    "# }\n",
    "\n",
    "# # Estimator for use in random search\n",
    "# estimator = ExtraTreesClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "# # Create the random search model\n",
    "# xtrees_model = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "#                         scoring = 'f1', cv = 3, \n",
    "#                         n_iter = 100, verbose = 0,\n",
    "#                         random_state=42)\n",
    "\n",
    "# # Fit \n",
    "# xtrees_model.fit(x_full, y_full)\n",
    "# xt_best_model = xtrees_model.best_estimator_\n",
    "\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             xt_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=4,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# xt_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# xt_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# xt_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# xt_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"Extra Trees\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train,\n",
    "#                 recall_train,\n",
    "#                 auc_score_train,\n",
    "#                 avg_prec_train,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 xt_f1_score_test_cv,\n",
    "#                 xt_recall_test_cv,\n",
    "#                 xt_auc_score_test_cv,\n",
    "#                 xt_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# xt_fit_time = round((end_time - init_time),2)\n",
    "# print(f\"Extra Trees done in {xt_fit_time} seconds\")\n",
    "# print(xt_best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:16.586057Z",
     "iopub.status.busy": "2021-03-11T23:18:16.585383Z",
     "iopub.status.idle": "2021-03-11T23:18:16.587560Z",
     "shell.execute_reply": "2021-03-11T23:18:16.588071Z"
    },
    "papermill": {
     "duration": 0.115881,
     "end_time": "2021-03-11T23:18:16.588247",
     "exception": false,
     "start_time": "2021-03-11T23:18:16.472366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results \n",
    "\n",
    "# --------------  --------  ------  ------  -------------\n",
    "# Extra Trees     F1 Score  Recall  AUC     Avg Precision\n",
    "# Hyperopt Train  0.6154    0.7407  0.9655  0.4097\n",
    "# Hyperopt Test   0.288     0.2     0.804   0.461\n",
    "# --------------  --------  ------  ------  -------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:16.816361Z",
     "iopub.status.busy": "2021-03-11T23:18:16.814134Z",
     "iopub.status.idle": "2021-03-11T23:18:20.150436Z",
     "shell.execute_reply": "2021-03-11T23:18:20.149897Z"
    },
    "papermill": {
     "duration": 3.45384,
     "end_time": "2021-03-11T23:18:20.150594",
     "exception": false,
     "start_time": "2021-03-11T23:18:16.696754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "###############     Extra Trees     ###############\n",
    "\n",
    "xt_best_model = ExtraTreesClassifier(bootstrap=True, class_weight='balanced', max_depth=3,\n",
    "                     max_samples=0.5, min_samples_split=5, n_estimators=1653,\n",
    "                     random_state=42)\n",
    "\n",
    "xt_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = xt_best_model.predict(x_full)\n",
    "y_prob_test = xt_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "xt_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "xt_f1_score_test = round(f1_score_test[1],4)\n",
    "xt_recall_test = round(recall_test[1],4)\n",
    "\n",
    "xt_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:20.375577Z",
     "iopub.status.busy": "2021-03-11T23:18:20.374464Z",
     "iopub.status.idle": "2021-03-11T23:18:20.377510Z",
     "shell.execute_reply": "2021-03-11T23:18:20.376870Z"
    },
    "papermill": {
     "duration": 0.118516,
     "end_time": "2021-03-11T23:18:20.377654",
     "exception": false,
     "start_time": "2021-03-11T23:18:20.259138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ##############     LGBM     ###############\n",
    "\n",
    "# init_time = time.time()\n",
    "\n",
    "\n",
    "# # Hyperparameter grid\n",
    "# param_grid = {\"n_estimators\": np.linspace(2, 5).astype(int),\n",
    "#               \"boosting_type\": [\"gbdt\",\"dart\",\"goss\"],\n",
    "#               \"subsample\": list(np.arange(0.5, 1, 0.2)),\n",
    "#               \"colsample_bytree\": list(np.arange(0.5, 0.8, 0.1)),\n",
    "#               \"objective\": [\"binary\",\"multiclass\"],\n",
    "#               \"alpha\": list(np.arange(0, 0.6, 0.2)),\n",
    "#               \"max_depth\": [2,3,4,5,6],\n",
    "#               \"num_leaves\": np.linspace(20, 40).astype(int),\n",
    "#              }\n",
    "\n",
    "# # Estimator for use in random search\n",
    "# estimator = LGBMClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "# # Create the random search model\n",
    "# lgbm = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "#                         scoring = 'f1', cv = 5, \n",
    "#                         n_iter = 100, verbose = 0,\n",
    "#                         random_state=42)\n",
    "\n",
    "# # Fit \n",
    "# lgbm.fit(x_full, y_full)\n",
    "# lgbm_best_model = lgbm.best_estimator_\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             lr_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=5,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# lgbm_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# lgbm_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# lgbm_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# lgbm_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train,\n",
    "#                 recall_train,\n",
    "#                 auc_score_train,\n",
    "#                 avg_prec_train,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 lgbm_f1_score_test_cv,\n",
    "#                 lgbm_recall_test_cv,\n",
    "#                 lgbm_auc_score_test_cv,\n",
    "#                 lgbm_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# lgbm_fit_time = round(end_time - init_time,3)\n",
    "# print(f\"LGBM done in {lgbm_fit_time} seconds\")\n",
    "# print(lgbm_best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:20.599160Z",
     "iopub.status.busy": "2021-03-11T23:18:20.598168Z",
     "iopub.status.idle": "2021-03-11T23:18:20.601887Z",
     "shell.execute_reply": "2021-03-11T23:18:20.602490Z"
    },
    "papermill": {
     "duration": 0.116361,
     "end_time": "2021-03-11T23:18:20.602665",
     "exception": false,
     "start_time": "2021-03-11T23:18:20.486304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# --------------  --------  ------  ------  -------------\n",
    "#                 F1 Score  Recall  AUC     Avg Precision\n",
    "# Hyperopt Train  0.6154    0.7407  0.9655  0.4097\n",
    "# Hyperopt Test   0.339     0.525   0.758   0.447\n",
    "# --------------  --------  ------  ------  -------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:20.825441Z",
     "iopub.status.busy": "2021-03-11T23:18:20.824443Z",
     "iopub.status.idle": "2021-03-11T23:18:20.967015Z",
     "shell.execute_reply": "2021-03-11T23:18:20.967618Z"
    },
    "papermill": {
     "duration": 0.256965,
     "end_time": "2021-03-11T23:18:20.967833",
     "exception": false,
     "start_time": "2021-03-11T23:18:20.710868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "###############     LGBM     ###############\n",
    "\n",
    "lgbm_best_model = LGBMClassifier(alpha=0.4, class_weight='balanced', colsample_bytree=0.5,\n",
    "               max_depth=6, n_estimators=4, num_leaves=28, objective='binary',\n",
    "               random_state=42, subsample=0.8999999999999999)\n",
    "\n",
    "lgbm_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = lgbm_best_model.predict(x_full)\n",
    "y_prob_test = lgbm_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "lgbm_auc_score_test_2 = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "lgbm_f1_score_test_2 = round(f1_score_test[1],4)\n",
    "lgbm_recall_test_2 = round(recall_test[1],4)\n",
    "\n",
    "lgbm_avg_prec_test_2 = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:21.197565Z",
     "iopub.status.busy": "2021-03-11T23:18:21.196613Z",
     "iopub.status.idle": "2021-03-11T23:18:21.201431Z",
     "shell.execute_reply": "2021-03-11T23:18:21.201930Z"
    },
    "papermill": {
     "duration": 0.123274,
     "end_time": "2021-03-11T23:18:21.202098",
     "exception": false,
     "start_time": "2021-03-11T23:18:21.078824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------  --------  ------  ------  -------------\n",
      "Model                F1-score  Recall  AUC     Avg Precision\n",
      "Logistic Regression  0.5645    0.875   0.9178  0.3799\n",
      "Extra Trees          0.5937    0.475   0.9503  0.4405\n",
      "LGBM                 0.6897    1.0     0.9884  0.5263\n",
      "-------------------  --------  ------  ------  -------------\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LGBMClassifier(alpha=0.4, class_weight='balanced', colsample_bytree=0.5,\n",
       "               max_depth=6, n_estimators=4, num_leaves=28, objective='binary',\n",
       "               random_state=42, subsample=0.8999999999999999)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###############     Model comparison table     ###############\n",
    "\n",
    "\n",
    "print(\n",
    "    tabulate(\n",
    "        [\n",
    "            [\"Model\", \"F1-score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "            [\n",
    "                \"Logistic Regression\",\n",
    "                lr_f1_score_test,\n",
    "                lr_recall_test,\n",
    "                lr_auc_score_test,\n",
    "                lr_avg_prec_test,          \n",
    "            ],\n",
    "            [\n",
    "                \"Extra Trees\",\n",
    "                xt_f1_score_test,\n",
    "                xt_recall_test,\n",
    "                xt_auc_score_test,\n",
    "                xt_avg_prec_test,\n",
    "            ],\n",
    "            [\n",
    "                \"LGBM\",\n",
    "                lgbm_f1_score_test_2,\n",
    "                lgbm_recall_test_2,\n",
    "                lgbm_auc_score_test_2,\n",
    "                lgbm_avg_prec_test_2\n",
    "            ],\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "\n",
    "\n",
    "best_model_2 = lgbm_best_model\n",
    "best_model_2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.109354,
     "end_time": "2021-03-11T23:18:21.420805",
     "exception": false,
     "start_time": "2021-03-11T23:18:21.311451",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* # Window (4-6 hours)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:21.681143Z",
     "iopub.status.busy": "2021-03-11T23:18:21.680370Z",
     "iopub.status.idle": "2021-03-11T23:18:21.683056Z",
     "shell.execute_reply": "2021-03-11T23:18:21.683744Z"
    },
    "papermill": {
     "duration": 0.153266,
     "end_time": "2021-03-11T23:18:21.683990",
     "exception": false,
     "start_time": "2021-03-11T23:18:21.530724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#     train test split\n",
    "_, _, _, _, x_full, y_full = train_test(df_third_window)  \n",
    "\n",
    "\n",
    "\n",
    "# ###############     Logistic Regression     ###############\n",
    "\n",
    "# init_time = time.time()\n",
    "\n",
    "# ###### Hyperoptimization ###### --> after discovering the best hyperparameters, we do not need to keep executing that part of the code\n",
    "# lr_params = {\n",
    "#     'C': np.random.uniform(low=0.0, high=1.0, size=1000),\n",
    "#     'penalty': ['l1', 'l2'],\n",
    "#     'max_iter': np.random.uniform(low=2000, high=10000, size=1000),\n",
    "# }\n",
    "\n",
    "# lr_random_search_model = RandomizedSearchCV(\n",
    "#     estimator=LogisticRegression(\n",
    "#         fit_intercept=True,\n",
    "#         class_weight='balanced',\n",
    "#         random_state=42\n",
    "#     ), \n",
    "#     param_distributions=lr_params,\n",
    "#     scoring='f1',\n",
    "#     cv=4,\n",
    "#     n_iter=2000,\n",
    "#     n_jobs=-1,\n",
    "#     random_state=42\n",
    "# )\n",
    "\n",
    "# lr_random_search_model.fit(x_full, y_full)\n",
    "# lr_best_model = lr_random_search_model.best_estimator_\n",
    "\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             lr_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=4,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# lr_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# lr_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# lr_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# lr_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"Logistic Regression\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train_cv,\n",
    "#                 recall_train_cv,\n",
    "#                 auc_score_train_cv,\n",
    "#                 avg_prec_train_cv,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 lr_f1_score_test_cv,\n",
    "#                 lr_recall_test_cv,\n",
    "#                 lr_auc_score_test_cv,\n",
    "#                 lr_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# lr_fit_time = round((end_time - init_time),2)\n",
    "\n",
    "# print(f\"Logistic Regression done in {lr_fit_time} seconds\")\n",
    "# print(lr_best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:21.911553Z",
     "iopub.status.busy": "2021-03-11T23:18:21.910901Z",
     "iopub.status.idle": "2021-03-11T23:18:21.914343Z",
     "shell.execute_reply": "2021-03-11T23:18:21.914852Z"
    },
    "papermill": {
     "duration": 0.117616,
     "end_time": "2021-03-11T23:18:21.915033",
     "exception": false,
     "start_time": "2021-03-11T23:18:21.797417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#  crossval results\n",
    "\n",
    "# -------------------  --------  ------  -----  -------------\n",
    "# Logistic Regression  F1 Score  Recall  AUC    Avg Precision\n",
    "# Hyperopt Train       0.285     0.666   0.711  0.25\n",
    "# Hyperopt Test        0.282     0.647   0.734  0.427\n",
    "# -------------------  --------  ------  -----  -------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:22.148137Z",
     "iopub.status.busy": "2021-03-11T23:18:22.147475Z",
     "iopub.status.idle": "2021-03-11T23:18:22.303714Z",
     "shell.execute_reply": "2021-03-11T23:18:22.304549Z"
    },
    "papermill": {
     "duration": 0.279352,
     "end_time": "2021-03-11T23:18:22.304816",
     "exception": false,
     "start_time": "2021-03-11T23:18:22.025464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lr_best_model = LogisticRegression(C=0.009174855205852595, class_weight='balanced',\n",
    "                   max_iter=7681.345742769994, random_state=42)\n",
    "\n",
    "lr_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt ######\n",
    "y_pred_test = lr_best_model.predict(x_full)\n",
    "y_prob_test = lr_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "lr_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "lr_f1_score_test = round(f1_score_test[1],4)\n",
    "lr_recall_test = round(recall_test[1],4)\n",
    "\n",
    "lr_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:22.629158Z",
     "iopub.status.busy": "2021-03-11T23:18:22.628229Z",
     "iopub.status.idle": "2021-03-11T23:18:22.631561Z",
     "shell.execute_reply": "2021-03-11T23:18:22.632140Z"
    },
    "papermill": {
     "duration": 0.129241,
     "end_time": "2021-03-11T23:18:22.632359",
     "exception": false,
     "start_time": "2021-03-11T23:18:22.503118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ###############     Extra Trees     ############### \n",
    "    \n",
    "# init_time = time.time()\n",
    "\n",
    "\n",
    "# # Hyperparameter grid\n",
    "# param_grid = {\n",
    "#     'n_estimators': np.linspace(1500, 3000).astype(int),\n",
    "#     'max_depth': list(np.linspace(2, 4).astype(int)),\n",
    "#     'max_features': ['auto', 'sqrt'],\n",
    "#     'max_samples': list(np.arange(0.5, 1, 0.1)),\n",
    "#     'min_samples_split': [5, 10, 20],\n",
    "#     'bootstrap': [True, False]\n",
    "# }\n",
    "\n",
    "# # Estimator for use in random search\n",
    "# estimator = ExtraTreesClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "# # Create the random search model\n",
    "# xtrees_model = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "#                         scoring = 'f1', cv = 3, \n",
    "#                         n_iter = 100, verbose = 0,\n",
    "#                         random_state=42)\n",
    "\n",
    "# # Fit \n",
    "# xtrees_model.fit(x_full, y_full)\n",
    "# xt_best_model = xtrees_model.best_estimator_\n",
    "\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             xt_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=4,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# xt_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# xt_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# xt_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# xt_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"Extra Trees\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train,\n",
    "#                 recall_train,\n",
    "#                 auc_score_train,\n",
    "#                 avg_prec_train,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 xt_f1_score_test_cv,\n",
    "#                 xt_recall_test_cv,\n",
    "#                 xt_auc_score_test_cv,\n",
    "#                 xt_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# xt_fit_time = round((end_time - init_time),2)\n",
    "# print(f\"Extra Trees done in {xt_fit_time} seconds\")\n",
    "# print(xt_best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:22.862234Z",
     "iopub.status.busy": "2021-03-11T23:18:22.861283Z",
     "iopub.status.idle": "2021-03-11T23:18:22.865129Z",
     "shell.execute_reply": "2021-03-11T23:18:22.865763Z"
    },
    "papermill": {
     "duration": 0.121597,
     "end_time": "2021-03-11T23:18:22.865937",
     "exception": false,
     "start_time": "2021-03-11T23:18:22.744340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# --------------  --------  ------  ------  -------------\n",
    "# Extra Trees     F1 Score  Recall  AUC     Avg Precision\n",
    "# Hyperopt Train  0.6154    0.7407  0.9655  0.4097\n",
    "# Hyperopt Test   0.466     0.643   0.811   0.375\n",
    "# --------------  --------  ------  ------  -------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:23.098166Z",
     "iopub.status.busy": "2021-03-11T23:18:23.097186Z",
     "iopub.status.idle": "2021-03-11T23:18:27.302330Z",
     "shell.execute_reply": "2021-03-11T23:18:27.302856Z"
    },
    "papermill": {
     "duration": 4.323495,
     "end_time": "2021-03-11T23:18:27.303034",
     "exception": false,
     "start_time": "2021-03-11T23:18:22.979539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "###############     Extra Trees     ###############\n",
    "\n",
    "xt_best_model = ExtraTreesClassifier(class_weight='balanced', max_depth=3, max_features='sqrt',\n",
    "                     max_samples=0.5, min_samples_split=10, n_estimators=2632,\n",
    "                     random_state=42)\n",
    "\n",
    "xt_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = xt_best_model.predict(x_full)\n",
    "y_prob_test = xt_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "xt_auc_score_test_3 = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "xt_f1_score_test_3 = round(f1_score_test[1],4)\n",
    "xt_recall_test_3 = round(recall_test[1],4)\n",
    "\n",
    "xt_avg_prec_test_3 = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:27.526612Z",
     "iopub.status.busy": "2021-03-11T23:18:27.525623Z",
     "iopub.status.idle": "2021-03-11T23:18:27.532821Z",
     "shell.execute_reply": "2021-03-11T23:18:27.532139Z"
    },
    "papermill": {
     "duration": 0.120619,
     "end_time": "2021-03-11T23:18:27.532971",
     "exception": false,
     "start_time": "2021-03-11T23:18:27.412352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ##############     LGBM     ###############\n",
    "\n",
    "# init_time = time.time()\n",
    "\n",
    "\n",
    "# # Hyperparameter grid\n",
    "# param_grid = {\"n_estimators\": np.linspace(2, 5).astype(int),\n",
    "#               \"boosting_type\": [\"gbdt\",\"dart\",\"goss\"],\n",
    "#               \"subsample\": list(np.arange(0.5, 1, 0.2)),\n",
    "#               \"colsample_bytree\": list(np.arange(0.5, 0.8, 0.1)),\n",
    "#               \"objective\": [\"binary\",\"multiclass\"],\n",
    "#               \"alpha\": list(np.arange(0, 0.6, 0.2)),\n",
    "#               \"max_depth\": [2,3,4,5,6],\n",
    "#               \"num_leaves\": np.linspace(20, 40).astype(int),\n",
    "#              }\n",
    "\n",
    "# # Estimator for use in random search\n",
    "# estimator = LGBMClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "# # Create the random search model\n",
    "# lgbm = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "#                         scoring = 'f1', cv = 5, \n",
    "#                         n_iter = 100, verbose = 0,\n",
    "#                         random_state=42)\n",
    "\n",
    "# # Fit \n",
    "# lgbm.fit(x_full, y_full)\n",
    "# lgbm_best_model = lgbm.best_estimator_\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             lr_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=5,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# lgbm_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# lgbm_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# lgbm_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# lgbm_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train,\n",
    "#                 recall_train,\n",
    "#                 auc_score_train,\n",
    "#                 avg_prec_train,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 lgbm_f1_score_test_cv,\n",
    "#                 lgbm_recall_test_cv,\n",
    "#                 lgbm_auc_score_test_cv,\n",
    "#                 lgbm_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# lgbm_fit_time = round(end_time - init_time,3)\n",
    "# print(f\"LGBM done in {lgbm_fit_time} seconds\")\n",
    "# print(lgbm_best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:27.759410Z",
     "iopub.status.busy": "2021-03-11T23:18:27.758438Z",
     "iopub.status.idle": "2021-03-11T23:18:27.762065Z",
     "shell.execute_reply": "2021-03-11T23:18:27.761558Z"
    },
    "papermill": {
     "duration": 0.118275,
     "end_time": "2021-03-11T23:18:27.762210",
     "exception": false,
     "start_time": "2021-03-11T23:18:27.643935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# --------------  --------  ------  ------  -------------\n",
    "#                 F1 Score  Recall  AUC     Avg Precision\n",
    "# Hyperopt Train  0.6154    0.7407  0.9655  0.4097\n",
    "# Hyperopt Test   0.24      0.533   0.712   0.319\n",
    "# --------------  --------  ------  ------  -------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:27.995766Z",
     "iopub.status.busy": "2021-03-11T23:18:27.992327Z",
     "iopub.status.idle": "2021-03-11T23:18:28.022633Z",
     "shell.execute_reply": "2021-03-11T23:18:28.023235Z"
    },
    "papermill": {
     "duration": 0.150643,
     "end_time": "2021-03-11T23:18:28.023467",
     "exception": false,
     "start_time": "2021-03-11T23:18:27.872824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "###############     LGBM     ###############\n",
    "\n",
    "lgbm_best_model = LGBMClassifier(alpha=0.4, boosting_type='dart', class_weight='balanced',\n",
    "               colsample_bytree=0.7, max_depth=2, n_estimators=2, num_leaves=39,\n",
    "               objective='binary', random_state=42, subsample=0.5)\n",
    "\n",
    "lgbm_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = lgbm_best_model.predict(x_full)\n",
    "y_prob_test = lgbm_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "lgbm_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "lgbm_f1_score_test = round(f1_score_test[1],4)\n",
    "lgbm_recall_test = round(recall_test[1],4)\n",
    "\n",
    "lgbm_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:28.259107Z",
     "iopub.status.busy": "2021-03-11T23:18:28.258014Z",
     "iopub.status.idle": "2021-03-11T23:18:28.262592Z",
     "shell.execute_reply": "2021-03-11T23:18:28.263067Z"
    },
    "papermill": {
     "duration": 0.125444,
     "end_time": "2021-03-11T23:18:28.263233",
     "exception": false,
     "start_time": "2021-03-11T23:18:28.137789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------  --------  ------  ------  -------------\n",
      "Model                F1-score  Recall  AUC     Avg Precision\n",
      "Logistic Regression  0.3056    0.7097  0.7175  0.1696\n",
      "Extra Trees          0.6019    1.0     0.9784  0.4306\n",
      "LGBM                 0.4252    0.871   0.8493  0.2589\n",
      "-------------------  --------  ------  ------  -------------\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "ExtraTreesClassifier(class_weight='balanced', max_depth=3, max_features='sqrt',\n",
       "                     max_samples=0.5, min_samples_split=10, n_estimators=2632,\n",
       "                     random_state=42)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###############     Model comparison table     ###############\n",
    "\n",
    "\n",
    "print(\n",
    "    tabulate(\n",
    "        [\n",
    "            [\"Model\", \"F1-score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "            [\n",
    "                \"Logistic Regression\",\n",
    "                lr_f1_score_test,\n",
    "                lr_recall_test,\n",
    "                lr_auc_score_test,\n",
    "                lr_avg_prec_test,          \n",
    "            ],\n",
    "            [\n",
    "                \"Extra Trees\",\n",
    "                xt_f1_score_test_3,\n",
    "                xt_recall_test_3,\n",
    "                xt_auc_score_test_3,\n",
    "                xt_avg_prec_test_3,\n",
    "            ],\n",
    "            [\n",
    "                \"LGBM\",\n",
    "                lgbm_f1_score_test,\n",
    "                lgbm_recall_test,\n",
    "                lgbm_auc_score_test,\n",
    "                lgbm_avg_prec_test\n",
    "            ],\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "\n",
    "\n",
    "best_model_3 = xt_best_model\n",
    "best_model_3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.111328,
     "end_time": "2021-03-11T23:18:28.486495",
     "exception": false,
     "start_time": "2021-03-11T23:18:28.375167",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* # Window (6-12 hours)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:28.721590Z",
     "iopub.status.busy": "2021-03-11T23:18:28.720840Z",
     "iopub.status.idle": "2021-03-11T23:18:28.724297Z",
     "shell.execute_reply": "2021-03-11T23:18:28.723794Z"
    },
    "papermill": {
     "duration": 0.126816,
     "end_time": "2021-03-11T23:18:28.724447",
     "exception": false,
     "start_time": "2021-03-11T23:18:28.597631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#     train test split\n",
    "_, _, _, _, x_full, y_full = train_test(df_fourth_window)  \n",
    "\n",
    "\n",
    "# ###############     Logistic Regression     ###############\n",
    "\n",
    "# init_time = time.time()\n",
    "\n",
    "# ###### Hyperoptimization ###### --> after discovering the best hyperparameters, we do not need to keep executing that part of the code\n",
    "# lr_params = {\n",
    "#     'C': np.random.uniform(low=0.0, high=1.0, size=1000),\n",
    "#     'penalty': ['l1', 'l2'],\n",
    "#     'max_iter': np.random.uniform(low=2000, high=10000, size=1000),\n",
    "# }\n",
    "\n",
    "# lr_random_search_model = RandomizedSearchCV(\n",
    "#     estimator=LogisticRegression(\n",
    "#         fit_intercept=True,\n",
    "#         class_weight='balanced',\n",
    "#         random_state=42\n",
    "#     ), \n",
    "#     param_distributions=lr_params,\n",
    "#     scoring='f1',\n",
    "#     cv=4,\n",
    "#     n_iter=2000,\n",
    "#     n_jobs=-1,\n",
    "#     random_state=42\n",
    "# )\n",
    "\n",
    "# lr_random_search_model.fit(x_full, y_full)\n",
    "# lr_best_model = lr_random_search_model.best_estimator_\n",
    "\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             lr_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=4,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# lr_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# lr_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# lr_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# lr_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"Logistic Regression\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train_cv,\n",
    "#                 recall_train_cv,\n",
    "#                 auc_score_train_cv,\n",
    "#                 avg_prec_train_cv,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 lr_f1_score_test_cv,\n",
    "#                 lr_recall_test_cv,\n",
    "#                 lr_auc_score_test_cv,\n",
    "#                 lr_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# lr_fit_time = round((end_time - init_time),2)\n",
    "\n",
    "# print(f\"Logistic Regression done in {lr_fit_time} seconds\")\n",
    "# lr_best_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:28.952573Z",
     "iopub.status.busy": "2021-03-11T23:18:28.951556Z",
     "iopub.status.idle": "2021-03-11T23:18:28.954190Z",
     "shell.execute_reply": "2021-03-11T23:18:28.954703Z"
    },
    "papermill": {
     "duration": 0.119523,
     "end_time": "2021-03-11T23:18:28.954880",
     "exception": false,
     "start_time": "2021-03-11T23:18:28.835357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# -------------------  --------  ------  -----  -------------\n",
    "# Logistic Regression  F1 Score  Recall  AUC    Avg Precision\n",
    "# Hyperopt Train       0.816     0.944   0.969  0.912\n",
    "# Hyperopt Test        0.599     0.722   0.817  0.615\n",
    "# -------------------  --------  ------  -----  -------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:29.192527Z",
     "iopub.status.busy": "2021-03-11T23:18:29.191841Z",
     "iopub.status.idle": "2021-03-11T23:18:29.241523Z",
     "shell.execute_reply": "2021-03-11T23:18:29.242427Z"
    },
    "papermill": {
     "duration": 0.17529,
     "end_time": "2021-03-11T23:18:29.242721",
     "exception": false,
     "start_time": "2021-03-11T23:18:29.067431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lr_best_model = LogisticRegression(C=0.8289805678387626, class_weight='balanced',\n",
    "                   max_iter=9335.5416957698, random_state=42)\n",
    "\n",
    "lr_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = lr_best_model.predict(x_full)\n",
    "y_prob_test = lr_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "lr_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "lr_f1_score_test = round(f1_score_test[1],4)\n",
    "lr_recall_test = round(recall_test[1],4)\n",
    "\n",
    "lr_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:29.519557Z",
     "iopub.status.busy": "2021-03-11T23:18:29.518626Z",
     "iopub.status.idle": "2021-03-11T23:18:29.521477Z",
     "shell.execute_reply": "2021-03-11T23:18:29.520971Z"
    },
    "papermill": {
     "duration": 0.120019,
     "end_time": "2021-03-11T23:18:29.521624",
     "exception": false,
     "start_time": "2021-03-11T23:18:29.401605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ###############     Extra Trees     ############### \n",
    "    \n",
    "# init_time = time.time()\n",
    "\n",
    "\n",
    "# # Hyperparameter grid\n",
    "# param_grid = {\n",
    "#     'n_estimators': np.linspace(1500, 3000).astype(int),\n",
    "#     'max_depth': list(np.linspace(2, 4).astype(int)),\n",
    "#     'max_features': ['auto', 'sqrt'],\n",
    "#     'max_samples': list(np.arange(0.5, 1, 0.1)),\n",
    "#     'min_samples_split': [5, 10, 20],\n",
    "#     'bootstrap': [True, False]\n",
    "# }\n",
    "\n",
    "# # Estimator for use in random search\n",
    "# estimator = ExtraTreesClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "# # Create the random search model\n",
    "# xtrees_model = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "#                         scoring = 'f1', cv = 3, \n",
    "#                         n_iter = 100, verbose = 0,\n",
    "#                         random_state=42)\n",
    "\n",
    "# # Fit \n",
    "# xtrees_model.fit(x_full, y_full)\n",
    "# xt_best_model = xtrees_model.best_estimator_\n",
    "\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             xt_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=4,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# xt_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# xt_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# xt_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# xt_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"Extra Trees\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train,\n",
    "#                 recall_train,\n",
    "#                 auc_score_train,\n",
    "#                 avg_prec_train,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 xt_f1_score_test_cv,\n",
    "#                 xt_recall_test_cv,\n",
    "#                 xt_auc_score_test_cv,\n",
    "#                 xt_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# xt_fit_time = round((end_time - init_time),2)\n",
    "# print(f\"Extra Trees done in {xt_fit_time} seconds\")\n",
    "# print(xt_best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:29.750891Z",
     "iopub.status.busy": "2021-03-11T23:18:29.750145Z",
     "iopub.status.idle": "2021-03-11T23:18:29.753426Z",
     "shell.execute_reply": "2021-03-11T23:18:29.752866Z"
    },
    "papermill": {
     "duration": 0.120016,
     "end_time": "2021-03-11T23:18:29.753570",
     "exception": false,
     "start_time": "2021-03-11T23:18:29.633554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# --------------  --------  ------  ------  -------------\n",
    "# Extra Trees     F1 Score  Recall  AUC     Avg Precision\n",
    "# Hyperopt Train  0.6154    0.7407  0.9655  0.4097\n",
    "# Hyperopt Test   0.746     0.877   0.939   0.876\n",
    "# --------------  --------  ------  ------  -------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:29.990405Z",
     "iopub.status.busy": "2021-03-11T23:18:29.989685Z",
     "iopub.status.idle": "2021-03-11T23:18:34.595367Z",
     "shell.execute_reply": "2021-03-11T23:18:34.595837Z"
    },
    "papermill": {
     "duration": 4.73028,
     "end_time": "2021-03-11T23:18:34.596029",
     "exception": false,
     "start_time": "2021-03-11T23:18:29.865749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "###############     Extra Trees     ###############\n",
    "\n",
    "xt_best_model = ExtraTreesClassifier(class_weight='balanced', max_depth=3, max_samples=0.5,\n",
    "                     min_samples_split=20, n_estimators=2816, random_state=42)\n",
    "\n",
    "xt_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = xt_best_model.predict(x_full)\n",
    "y_prob_test = xt_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "xt_auc_score_test_4 = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "xt_f1_score_test_4 = round(f1_score_test[1],4)\n",
    "xt_recall_test_4 = round(recall_test[1],4)\n",
    "\n",
    "xt_avg_prec_test_4 = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:34.827981Z",
     "iopub.status.busy": "2021-03-11T23:18:34.827071Z",
     "iopub.status.idle": "2021-03-11T23:18:34.830008Z",
     "shell.execute_reply": "2021-03-11T23:18:34.829522Z"
    },
    "papermill": {
     "duration": 0.121975,
     "end_time": "2021-03-11T23:18:34.830149",
     "exception": false,
     "start_time": "2021-03-11T23:18:34.708174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ##############     LGBM     ###############\n",
    "\n",
    "# init_time = time.time()\n",
    "\n",
    "\n",
    "# # Hyperparameter grid\n",
    "# param_grid = {\"n_estimators\": np.linspace(2, 5).astype(int),\n",
    "#               \"boosting_type\": [\"gbdt\",\"dart\",\"goss\"],\n",
    "#               \"subsample\": list(np.arange(0.5, 1, 0.2)),\n",
    "#               \"colsample_bytree\": list(np.arange(0.5, 0.8, 0.1)),\n",
    "#               \"objective\": [\"binary\",\"multiclass\"],\n",
    "#               \"alpha\": list(np.arange(0, 0.6, 0.2)),\n",
    "#               \"max_depth\": [2,3,4,5,6],\n",
    "#               \"num_leaves\": np.linspace(20, 40).astype(int),\n",
    "#              }\n",
    "\n",
    "# # Estimator for use in random search\n",
    "# estimator = LGBMClassifier(class_weight='balanced',random_state=42)\n",
    "\n",
    "# # Create the random search model\n",
    "# lgbm = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n",
    "#                         scoring = 'f1', cv = 5, \n",
    "#                         n_iter = 100, verbose = 0,\n",
    "#                         random_state=42)\n",
    "\n",
    "# # Fit \n",
    "# lgbm.fit(x_full, y_full)\n",
    "# lgbm_best_model = lgbm.best_estimator_\n",
    "\n",
    "# cv_scores = cross_validate(\n",
    "#                             lr_best_model, # best_estimator da RandomSearchCV\n",
    "#                             x_full,\n",
    "#                             y_full,\n",
    "#                             cv=5,\n",
    "#                             scoring=('f1', 'average_precision', 'roc_auc','recall'),\n",
    "#                             return_train_score=True\n",
    "#                             )\n",
    "\n",
    "# f1_score_train_cv =  round(np.mean(cv_scores['train_f1']),3)\n",
    "# recall_train_cv =  round(np.mean(cv_scores['train_recall']),3)\n",
    "# auc_score_train_cv =  round(np.mean(cv_scores['train_roc_auc']),3)\n",
    "# avg_prec_train_cv =  round(np.mean(cv_scores['train_average_precision']),3)\n",
    "\n",
    "# lgbm_f1_score_test_cv = round(np.mean(cv_scores['test_f1']),3)\n",
    "# lgbm_recall_test_cv = round(np.mean(cv_scores['test_recall']),3)\n",
    "# lgbm_auc_score_test_cv = round(np.mean(cv_scores['test_roc_auc']),3)\n",
    "# lgbm_avg_prec_test_cv = round(np.mean(cv_scores['test_average_precision']),3)\n",
    "\n",
    "\n",
    "# ###### Tabela comparativa ######\n",
    "# print(\n",
    "#     tabulate(\n",
    "#         [\n",
    "#             [\"\",\"F1 Score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "#             [\n",
    "#                 \"Hyperopt Train\",\n",
    "#                 f1_score_train,\n",
    "#                 recall_train,\n",
    "#                 auc_score_train,\n",
    "#                 avg_prec_train,\n",
    "#             ],\n",
    "#             [\n",
    "#                 \"Hyperopt Test\",\n",
    "#                 lgbm_f1_score_test_cv,\n",
    "#                 lgbm_recall_test_cv,\n",
    "#                 lgbm_auc_score_test_cv,\n",
    "#                 lgbm_avg_prec_test_cv,\n",
    "#             ],\n",
    "#         ]\n",
    "#     )\n",
    "# )\n",
    "\n",
    "# end_time = time.time()\n",
    "# lgbm_fit_time = round(end_time - init_time,3)\n",
    "# print(f\"LGBM done in {lgbm_fit_time} seconds\")\n",
    "# print(lgbm_best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:35.061088Z",
     "iopub.status.busy": "2021-03-11T23:18:35.060463Z",
     "iopub.status.idle": "2021-03-11T23:18:35.065393Z",
     "shell.execute_reply": "2021-03-11T23:18:35.064865Z"
    },
    "papermill": {
     "duration": 0.122159,
     "end_time": "2021-03-11T23:18:35.065546",
     "exception": false,
     "start_time": "2021-03-11T23:18:34.943387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crossval results\n",
    "\n",
    "# --------------  --------  ------  ------  -------------\n",
    "#                 F1 Score  Recall  AUC     Avg Precision\n",
    "# Hyperopt Train  0.6154    0.7407  0.9655  0.4097\n",
    "# Hyperopt Test   0.632     0.723   0.842   0.676\n",
    "# --------------  --------  ------  ------  -------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:35.302085Z",
     "iopub.status.busy": "2021-03-11T23:18:35.301116Z",
     "iopub.status.idle": "2021-03-11T23:18:35.340959Z",
     "shell.execute_reply": "2021-03-11T23:18:35.341577Z"
    },
    "papermill": {
     "duration": 0.162259,
     "end_time": "2021-03-11T23:18:35.341798",
     "exception": false,
     "start_time": "2021-03-11T23:18:35.179539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "###############     LGBM     ###############\n",
    "\n",
    "lgbm_best_model = LGBMClassifier(alpha=0.4, boosting_type='dart', class_weight='balanced',\n",
    "               colsample_bytree=0.7, max_depth=2, n_estimators=2, num_leaves=39,\n",
    "               objective='binary', random_state=42, subsample=0.5)\n",
    "\n",
    "lgbm_best_model.fit(x_full, y_full)\n",
    "\n",
    "###### Avaliando hyperopt - test ######\n",
    "y_pred_test = lgbm_best_model.predict(x_full)\n",
    "y_prob_test = lgbm_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "lgbm_auc_score_test = round(roc_auc_score(y_full,y_prob_test),4)\n",
    "\n",
    "_,recall_test,f1_score_test,_ = precision_recall_fscore_support(y_full,y_pred_test)\n",
    "lgbm_f1_score_test = round(f1_score_test[1],4)\n",
    "lgbm_recall_test = round(recall_test[1],4)\n",
    "\n",
    "lgbm_avg_prec_test = round(average_precision_score(y_full,y_pred_test),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:35.576788Z",
     "iopub.status.busy": "2021-03-11T23:18:35.575786Z",
     "iopub.status.idle": "2021-03-11T23:18:35.583207Z",
     "shell.execute_reply": "2021-03-11T23:18:35.582674Z"
    },
    "papermill": {
     "duration": 0.127007,
     "end_time": "2021-03-11T23:18:35.583366",
     "exception": false,
     "start_time": "2021-03-11T23:18:35.456359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------  --------  ------  ------  -------------\n",
      "Model                F1-score  Recall  AUC     Avg Precision\n",
      "Logistic Regression  0.7922    0.9385  0.9617  0.6589\n",
      "Extra Trees          0.8477    0.9846  0.9904  0.7367\n",
      "LGBM                 0.7692    0.8462  0.9238  0.6359\n",
      "-------------------  --------  ------  ------  -------------\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "ExtraTreesClassifier(class_weight='balanced', max_depth=3, max_samples=0.5,\n",
       "                     min_samples_split=20, n_estimators=2816, random_state=42)"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###############     Model comparison table     ###############\n",
    "\n",
    "\n",
    "print(\n",
    "    tabulate(\n",
    "        [\n",
    "            [\"Model\", \"F1-score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "            [\n",
    "                \"Logistic Regression\",\n",
    "                lr_f1_score_test,\n",
    "                lr_recall_test,\n",
    "                lr_auc_score_test,\n",
    "                lr_avg_prec_test,          \n",
    "            ],\n",
    "            [\n",
    "                \"Extra Trees\",\n",
    "                xt_f1_score_test_4,\n",
    "                xt_recall_test_4,\n",
    "                xt_auc_score_test_4,\n",
    "                xt_avg_prec_test_4,\n",
    "            ],\n",
    "            [\n",
    "                \"LGBM\",\n",
    "                lgbm_f1_score_test,\n",
    "                lgbm_recall_test,\n",
    "                lgbm_auc_score_test,\n",
    "                lgbm_avg_prec_test,\n",
    "            ],\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "\n",
    "\n",
    "best_model_4 = xt_best_model\n",
    "best_model_4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.113564,
     "end_time": "2021-03-11T23:18:35.861399",
     "exception": false,
     "start_time": "2021-03-11T23:18:35.747835",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Best model for each window**\n",
    "\n",
    "* First Window: Extra Trees \n",
    "* Second Window: LGBM\n",
    "* Third Window: Extra Trees \n",
    "* Fourth Window: Extra Trees "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:36.096634Z",
     "iopub.status.busy": "2021-03-11T23:18:36.095632Z",
     "iopub.status.idle": "2021-03-11T23:18:36.099714Z",
     "shell.execute_reply": "2021-03-11T23:18:36.099082Z"
    },
    "papermill": {
     "duration": 0.125208,
     "end_time": "2021-03-11T23:18:36.099856",
     "exception": false,
     "start_time": "2021-03-11T23:18:35.974648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------  --------  ------  ------  -------------\n",
      "Model             F1-score  Recall  AUC     Avg Precision\n",
      "W1 - Extra Trees  0.6154    0.7407  0.9655  0.4097\n",
      "W2 - Extra Trees  0.6897    1.0     0.9884  0.5263\n",
      "W3 - Extra Trees  0.6019    1.0     0.9784  0.4306\n",
      "W4 - LGBM         0.8477    0.9846  0.9904  0.7367\n",
      "----------------  --------  ------  ------  -------------\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    tabulate(\n",
    "        [\n",
    "            [\"Model\", \"F1-score\", \"Recall\", \"AUC\", \"Avg Precision\"],\n",
    "            [\n",
    "                \"W1 - Extra Trees\",\n",
    "                xt_f1_score_test_1,\n",
    "                xt_recall_test_1,\n",
    "                xt_auc_score_test_1,\n",
    "                xt_avg_prec_test_1,          \n",
    "            ],\n",
    "            [\n",
    "                \"W2 - Extra Trees\",\n",
    "                lgbm_f1_score_test_2,\n",
    "                lgbm_recall_test_2,\n",
    "                lgbm_auc_score_test_2,\n",
    "                lgbm_avg_prec_test_2, \n",
    "            ],\n",
    "            [\n",
    "                \"W3 - Extra Trees\",\n",
    "                xt_f1_score_test_3,\n",
    "                xt_recall_test_3,\n",
    "                xt_auc_score_test_3,\n",
    "                xt_avg_prec_test_3 \n",
    "            ],\n",
    "            [\n",
    "                \"W4 - LGBM\",\n",
    "                xt_f1_score_test_4,\n",
    "                xt_recall_test_4,\n",
    "                xt_auc_score_test_4,\n",
    "                xt_avg_prec_test_4,\n",
    "            ],\n",
    "        ]\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.11396,
     "end_time": "2021-03-11T23:18:36.329478",
     "exception": false,
     "start_time": "2021-03-11T23:18:36.215518",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Based on the metrics above, there will be a high success rate in predicting, for each window, which patients are going to be sent to the ICU on the next window. But further dedicaton should be spent in improving the hyperparameters, in order to check for eventual overfitting, even if the hyperoptimization was done using cross validation techniques."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.113544,
     "end_time": "2021-03-11T23:18:36.557217",
     "exception": false,
     "start_time": "2021-03-11T23:18:36.443673",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Combined Proba"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.11432,
     "end_time": "2021-03-11T23:18:36.785005",
     "exception": false,
     "start_time": "2021-03-11T23:18:36.670685",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we need to create new dataframes without the feature difference features, in order to be able to use the new df's features across all windows. In these dataframes, we wil have the info of how many patients went to the ICU on other windows, and features related to the first window."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:37.021563Z",
     "iopub.status.busy": "2021-03-11T23:18:37.020481Z",
     "iopub.status.idle": "2021-03-11T23:18:37.120015Z",
     "shell.execute_reply": "2021-03-11T23:18:37.120683Z"
    },
    "papermill": {
     "duration": 0.221886,
     "end_time": "2021-03-11T23:18:37.120878",
     "exception": false,
     "start_time": "2021-03-11T23:18:36.898992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:14: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  \n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:45: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:74: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:103: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n"
     ]
    }
   ],
   "source": [
    "df_first_proba,df_second_proba,df_third_proba,df_fourth_proba = df_proba_create(df_best_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:37.357486Z",
     "iopub.status.busy": "2021-03-11T23:18:37.356598Z",
     "iopub.status.idle": "2021-03-11T23:18:37.361375Z",
     "shell.execute_reply": "2021-03-11T23:18:37.360728Z"
    },
    "papermill": {
     "duration": 0.124565,
     "end_time": "2021-03-11T23:18:37.361522",
     "exception": false,
     "start_time": "2021-03-11T23:18:37.236957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(353, 65)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_first_proba.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:37.598029Z",
     "iopub.status.busy": "2021-03-11T23:18:37.597092Z",
     "iopub.status.idle": "2021-03-11T23:18:37.601317Z",
     "shell.execute_reply": "2021-03-11T23:18:37.601801Z"
    },
    "papermill": {
     "duration": 0.124979,
     "end_time": "2021-03-11T23:18:37.601983",
     "exception": false,
     "start_time": "2021-03-11T23:18:37.477004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(353, 65)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_second_proba.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:37.841941Z",
     "iopub.status.busy": "2021-03-11T23:18:37.841007Z",
     "iopub.status.idle": "2021-03-11T23:18:37.846046Z",
     "shell.execute_reply": "2021-03-11T23:18:37.845533Z"
    },
    "papermill": {
     "duration": 0.12746,
     "end_time": "2021-03-11T23:18:37.846192",
     "exception": false,
     "start_time": "2021-03-11T23:18:37.718732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(353, 65)"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_third_proba.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:38.087355Z",
     "iopub.status.busy": "2021-03-11T23:18:38.086241Z",
     "iopub.status.idle": "2021-03-11T23:18:38.090607Z",
     "shell.execute_reply": "2021-03-11T23:18:38.089972Z"
    },
    "papermill": {
     "duration": 0.127019,
     "end_time": "2021-03-11T23:18:38.090750",
     "exception": false,
     "start_time": "2021-03-11T23:18:37.963731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(353, 65)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_fourth_proba.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.115976,
     "end_time": "2021-03-11T23:18:38.323827",
     "exception": false,
     "start_time": "2021-03-11T23:18:38.207851",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Finding the best models for the predict proba dataframes. For that, we train the models with the dataframes related to their windows, but after we find the best model, we fit the first widnow dataframe in order to have all patients in our final dataframe.**\n",
    "\n",
    "**After that, we have to calibrate the predict probas from the Tree Models in order to use them in a combined fashion, based on the following [article](https://gdmarmerola.github.io/probability-calibration/)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:38.560102Z",
     "iopub.status.busy": "2021-03-11T23:18:38.559369Z",
     "iopub.status.idle": "2021-03-11T23:18:38.563149Z",
     "shell.execute_reply": "2021-03-11T23:18:38.562545Z"
    },
    "papermill": {
     "duration": 0.1232,
     "end_time": "2021-03-11T23:18:38.563322",
     "exception": false,
     "start_time": "2021-03-11T23:18:38.440122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# lr_best_model_1, xt_best_model_1, lgbm_best_model_1 = model_comparison(df_first_proba)\n",
    "# best_model_proba_1 = xt_best_model_1\n",
    "# best_model_proba_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:38.811783Z",
     "iopub.status.busy": "2021-03-11T23:18:38.810764Z",
     "iopub.status.idle": "2021-03-11T23:18:45.184880Z",
     "shell.execute_reply": "2021-03-11T23:18:45.184277Z"
    },
    "papermill": {
     "duration": 6.504838,
     "end_time": "2021-03-11T23:18:45.185020",
     "exception": false,
     "start_time": "2021-03-11T23:18:38.680182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ICU_1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.013568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.108901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.009321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.021117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.011103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>0.012437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>0.084681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>0.008825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>0.008711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>0.060295</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>353 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ICU_1\n",
       "id           \n",
       "0    0.013568\n",
       "2    0.108901\n",
       "3    0.009321\n",
       "4    0.021117\n",
       "5    0.011103\n",
       "..        ...\n",
       "380  0.012437\n",
       "381  0.084681\n",
       "382  0.008825\n",
       "383  0.008711\n",
       "384  0.060295\n",
       "\n",
       "[353 rows x 1 columns]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_, _, _, _, x_full, y_full = train_test(df_first_proba)\n",
    "\n",
    "###############     Extra Trees     ###############\n",
    "\n",
    "xt_best_model = ExtraTreesClassifier(bootstrap=True, class_weight='balanced', max_depth=3,\n",
    "                     max_samples=0.7999999999999999, min_samples_split=20,\n",
    "                     n_estimators=2724, random_state=42)\n",
    "\n",
    "xt_best_model.fit(x_full, y_full)\n",
    "xt1_y_prob_test = xt_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "df_proba_1 = lr_proba(xt_best_model,df_first_proba)\n",
    "df_proba_1.drop(columns=[0],inplace=True)\n",
    "df_proba_1.columns = ['ICU_1']\n",
    "df_proba_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:45.423664Z",
     "iopub.status.busy": "2021-03-11T23:18:45.422947Z",
     "iopub.status.idle": "2021-03-11T23:18:45.425629Z",
     "shell.execute_reply": "2021-03-11T23:18:45.425046Z"
    },
    "papermill": {
     "duration": 0.123861,
     "end_time": "2021-03-11T23:18:45.425784",
     "exception": false,
     "start_time": "2021-03-11T23:18:45.301923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# lr_best_model_2, xt_best_model_2, lgbm_best_model_2 = model_comparison(df_second_proba)\n",
    "# best_model_proba_2 = xt_best_model_2\n",
    "# best_model_proba_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:45.665525Z",
     "iopub.status.busy": "2021-03-11T23:18:45.664840Z",
     "iopub.status.idle": "2021-03-11T23:18:49.726209Z",
     "shell.execute_reply": "2021-03-11T23:18:49.725546Z"
    },
    "papermill": {
     "duration": 4.182046,
     "end_time": "2021-03-11T23:18:49.726370",
     "exception": false,
     "start_time": "2021-03-11T23:18:45.544324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ICU_2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.024784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.142660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.018318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.031084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.018344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>0.022061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>0.110276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>0.017224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>0.016908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>0.072074</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>353 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ICU_2\n",
       "id           \n",
       "0    0.024784\n",
       "2    0.142660\n",
       "3    0.018318\n",
       "4    0.031084\n",
       "5    0.018344\n",
       "..        ...\n",
       "380  0.022061\n",
       "381  0.110276\n",
       "382  0.017224\n",
       "383  0.016908\n",
       "384  0.072074\n",
       "\n",
       "[353 rows x 1 columns]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_, _, _, _, x_full, y_full = train_test(df_first_proba)\n",
    "\n",
    "###############     Extra Trees     ###############\n",
    "\n",
    "xt_best_model = ExtraTreesClassifier(bootstrap=True, class_weight='balanced', max_depth=2,\n",
    "                     max_features='sqrt', max_samples=0.8999999999999999, min_samples_split=20,\n",
    "                     n_estimators=1714, random_state=42)\n",
    "\n",
    "xt_best_model.fit(x_full, y_full)\n",
    "\n",
    "xt2_y_prob_test = xt_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "df_proba_2 = lr_proba(xt_best_model,df_first_proba)\n",
    "df_proba_2.drop(columns=[0],inplace=True)\n",
    "df_proba_2.columns = ['ICU_2']\n",
    "df_proba_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:49.967573Z",
     "iopub.status.busy": "2021-03-11T23:18:49.966510Z",
     "iopub.status.idle": "2021-03-11T23:18:49.969562Z",
     "shell.execute_reply": "2021-03-11T23:18:49.970008Z"
    },
    "papermill": {
     "duration": 0.125646,
     "end_time": "2021-03-11T23:18:49.970188",
     "exception": false,
     "start_time": "2021-03-11T23:18:49.844542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# lr_best_model_3, xt_best_model_3, lgbm_best_model_3 = model_comparison(df_third_proba)\n",
    "# best_model_proba_3 = xt_best_model_3\n",
    "# best_model_proba_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:50.225381Z",
     "iopub.status.busy": "2021-03-11T23:18:50.224669Z",
     "iopub.status.idle": "2021-03-11T23:18:55.151688Z",
     "shell.execute_reply": "2021-03-11T23:18:55.151143Z"
    },
    "papermill": {
     "duration": 5.063464,
     "end_time": "2021-03-11T23:18:55.151838",
     "exception": false,
     "start_time": "2021-03-11T23:18:50.088374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ICU_3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.015586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.105904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.011382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.018735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.009514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>0.012542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>0.083904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>0.010254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>0.009157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>0.063631</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>353 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ICU_3\n",
       "id           \n",
       "0    0.015586\n",
       "2    0.105904\n",
       "3    0.011382\n",
       "4    0.018735\n",
       "5    0.009514\n",
       "..        ...\n",
       "380  0.012542\n",
       "381  0.083904\n",
       "382  0.010254\n",
       "383  0.009157\n",
       "384  0.063631\n",
       "\n",
       "[353 rows x 1 columns]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_, _, _, _, x_full, y_full = train_test(df_first_proba)\n",
    "\n",
    "###############     Extra Trees     ###############\n",
    "\n",
    "xt_best_model = ExtraTreesClassifier(class_weight='balanced', max_depth=3, max_features='sqrt',\n",
    "                     max_samples=0.8999999999999999, min_samples_split=10,\n",
    "                     n_estimators=2479, random_state=42)\n",
    "\n",
    "xt_best_model.fit(x_full, y_full)\n",
    "\n",
    "xt3_y_prob_test = xt_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "df_proba_3 = lr_proba(xt_best_model,df_first_proba)\n",
    "df_proba_3.drop(columns=[0],inplace=True)\n",
    "df_proba_3.columns = ['ICU_3']\n",
    "df_proba_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:55.400646Z",
     "iopub.status.busy": "2021-03-11T23:18:55.399912Z",
     "iopub.status.idle": "2021-03-11T23:18:55.403339Z",
     "shell.execute_reply": "2021-03-11T23:18:55.402659Z"
    },
    "papermill": {
     "duration": 0.129017,
     "end_time": "2021-03-11T23:18:55.403483",
     "exception": false,
     "start_time": "2021-03-11T23:18:55.274466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# lr_best_model_4, xt_best_model_4, lgbm_best_model_4 = model_comparison(df_fourth_proba)\n",
    "# best_model_proba_4 = xt_best_model_4\n",
    "# best_model_proba_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:55.658096Z",
     "iopub.status.busy": "2021-03-11T23:18:55.657414Z",
     "iopub.status.idle": "2021-03-11T23:18:55.716486Z",
     "shell.execute_reply": "2021-03-11T23:18:55.715803Z"
    },
    "papermill": {
     "duration": 0.190662,
     "end_time": "2021-03-11T23:18:55.716642",
     "exception": false,
     "start_time": "2021-03-11T23:18:55.525980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ICU_4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.376425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.449104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.376425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.402397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.376425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>0.402397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>0.474058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>0.376425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>0.376425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>0.402397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>353 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ICU_4\n",
       "id           \n",
       "0    0.376425\n",
       "2    0.449104\n",
       "3    0.376425\n",
       "4    0.402397\n",
       "5    0.376425\n",
       "..        ...\n",
       "380  0.402397\n",
       "381  0.474058\n",
       "382  0.376425\n",
       "383  0.376425\n",
       "384  0.402397\n",
       "\n",
       "[353 rows x 1 columns]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_, _, _, _, x_full, y_full = train_test(df_first_proba)\n",
    "\n",
    "###############     LGBM     ###############\n",
    "\n",
    "lgbm_best_model = LGBMClassifier(alpha=0.4, class_weight='balanced', colsample_bytree=0.5,\n",
    "               max_depth=3, n_estimators=4, num_leaves=24, objective='binary',\n",
    "               random_state=42, subsample=0.7)\n",
    "\n",
    "lgbm_best_model.fit(x_full, y_full)\n",
    "\n",
    "lgbm4_y_prob_test = lgbm_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "df_proba_4 = lr_proba(lgbm_best_model,df_first_proba)\n",
    "df_proba_4.drop(columns=[0],inplace=True)\n",
    "df_proba_4.columns = ['ICU_4']\n",
    "df_proba_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:55.969936Z",
     "iopub.status.busy": "2021-03-11T23:18:55.968973Z",
     "iopub.status.idle": "2021-03-11T23:18:55.972636Z",
     "shell.execute_reply": "2021-03-11T23:18:55.971761Z"
    },
    "papermill": {
     "duration": 0.132824,
     "end_time": "2021-03-11T23:18:55.972807",
     "exception": false,
     "start_time": "2021-03-11T23:18:55.839983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# _, _, _, _, x_full, y_full = train_test(df_first_proba)\n",
    "\n",
    "# ###############     Extra Trees     ###############\n",
    "\n",
    "# xt_best_model = ExtraTreesClassifier(bootstrap=True, class_weight='balanced', max_depth=2,\n",
    "#                      max_features='sqrt', max_samples=0.5, min_samples_split=10,\n",
    "#                      n_estimators=1836, random_state=42)\n",
    "\n",
    "# xt_best_model.fit(x_full, y_full)\n",
    "\n",
    "# xt4_y_prob_test = xt_best_model.predict_proba(x_full)[:, 1]\n",
    "\n",
    "# df_proba_4 = lr_proba(xt_best_model,df_first_proba)\n",
    "# df_proba_4.drop(columns=[0],inplace=True)\n",
    "# df_proba_4.columns = ['ICU_4']\n",
    "# df_proba_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:56.245577Z",
     "iopub.status.busy": "2021-03-11T23:18:56.244931Z",
     "iopub.status.idle": "2021-03-11T23:18:56.250668Z",
     "shell.execute_reply": "2021-03-11T23:18:56.249955Z"
    },
    "papermill": {
     "duration": 0.154492,
     "end_time": "2021-03-11T23:18:56.250880",
     "exception": false,
     "start_time": "2021-03-11T23:18:56.096388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ICU_1</th>\n",
       "      <th>ICU_2</th>\n",
       "      <th>ICU_3</th>\n",
       "      <th>ICU_4</th>\n",
       "      <th>combined_ICU_proba</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.013568</td>\n",
       "      <td>0.024784</td>\n",
       "      <td>0.015586</td>\n",
       "      <td>0.376425</td>\n",
       "      <td>0.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.108901</td>\n",
       "      <td>0.142660</td>\n",
       "      <td>0.105904</td>\n",
       "      <td>0.449104</td>\n",
       "      <td>0.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.009321</td>\n",
       "      <td>0.018318</td>\n",
       "      <td>0.011382</td>\n",
       "      <td>0.376425</td>\n",
       "      <td>0.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.021117</td>\n",
       "      <td>0.031084</td>\n",
       "      <td>0.018735</td>\n",
       "      <td>0.402397</td>\n",
       "      <td>0.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.011103</td>\n",
       "      <td>0.018344</td>\n",
       "      <td>0.009514</td>\n",
       "      <td>0.376425</td>\n",
       "      <td>0.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>0.012437</td>\n",
       "      <td>0.022061</td>\n",
       "      <td>0.012542</td>\n",
       "      <td>0.402397</td>\n",
       "      <td>0.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>0.084681</td>\n",
       "      <td>0.110276</td>\n",
       "      <td>0.083904</td>\n",
       "      <td>0.474058</td>\n",
       "      <td>0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>0.008825</td>\n",
       "      <td>0.017224</td>\n",
       "      <td>0.010254</td>\n",
       "      <td>0.376425</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>0.008711</td>\n",
       "      <td>0.016908</td>\n",
       "      <td>0.009157</td>\n",
       "      <td>0.376425</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>0.060295</td>\n",
       "      <td>0.072074</td>\n",
       "      <td>0.063631</td>\n",
       "      <td>0.402397</td>\n",
       "      <td>0.60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>353 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ICU_1     ICU_2     ICU_3     ICU_4  combined_ICU_proba\n",
       "id                                                             \n",
       "0    0.013568  0.024784  0.015586  0.376425                0.43\n",
       "2    0.108901  0.142660  0.105904  0.449104                0.81\n",
       "3    0.009321  0.018318  0.011382  0.376425                0.42\n",
       "4    0.021117  0.031084  0.018735  0.402397                0.47\n",
       "5    0.011103  0.018344  0.009514  0.376425                0.42\n",
       "..        ...       ...       ...       ...                 ...\n",
       "380  0.012437  0.022061  0.012542  0.402397                0.45\n",
       "381  0.084681  0.110276  0.083904  0.474058                0.75\n",
       "382  0.008825  0.017224  0.010254  0.376425                0.41\n",
       "383  0.008711  0.016908  0.009157  0.376425                0.41\n",
       "384  0.060295  0.072074  0.063631  0.402397                0.60\n",
       "\n",
       "[353 rows x 5 columns]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_combined_proba = df_proba_1.merge(df_proba_2,left_index = True,right_index = True)\n",
    "df_combined_proba = df_combined_proba.merge(df_proba_3,left_index = True,right_index = True)\n",
    "df_combined_proba = df_combined_proba.merge(df_proba_4,left_index = True,right_index = True)\n",
    "df_combined_proba['combined_ICU_proba'] = round(df_combined_proba['ICU_1'] + df_combined_proba['ICU_2'] + df_combined_proba['ICU_3'] + df_combined_proba['ICU_4'],2)\n",
    "df_combined_proba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:56.513083Z",
     "iopub.status.busy": "2021-03-11T23:18:56.512420Z",
     "iopub.status.idle": "2021-03-11T23:18:56.775392Z",
     "shell.execute_reply": "2021-03-11T23:18:56.774661Z"
    },
    "papermill": {
     "duration": 0.399178,
     "end_time": "2021-03-11T23:18:56.775543",
     "exception": false,
     "start_time": "2021-03-11T23:18:56.376365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[8, 8])\n",
    "\n",
    "ax = sns.distplot(df_combined_proba['combined_ICU_proba'])\n",
    "plt.title('Distribution of patient probabilities of needing the ICU')\n",
    "ax.set(xlim=(0, 1.1));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:57.033949Z",
     "iopub.status.busy": "2021-03-11T23:18:57.033307Z",
     "iopub.status.idle": "2021-03-11T23:18:57.039381Z",
     "shell.execute_reply": "2021-03-11T23:18:57.038677Z"
    },
    "papermill": {
     "duration": 0.136549,
     "end_time": "2021-03-11T23:18:57.039527",
     "exception": false,
     "start_time": "2021-03-11T23:18:56.902978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "160"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Patients below the 50% threshold\n",
    "len(df_combined_proba[df_combined_proba['combined_ICU_proba']<0.5]['combined_ICU_proba'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:57.297806Z",
     "iopub.status.busy": "2021-03-11T23:18:57.296852Z",
     "iopub.status.idle": "2021-03-11T23:18:57.301601Z",
     "shell.execute_reply": "2021-03-11T23:18:57.300949Z"
    },
    "papermill": {
     "duration": 0.135669,
     "end_time": "2021-03-11T23:18:57.301747",
     "exception": false,
     "start_time": "2021-03-11T23:18:57.166078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "193"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Patients above the 50% threshold\n",
    "len(df_combined_proba[df_combined_proba['combined_ICU_proba']>=0.5]['combined_ICU_proba'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.128015,
     "end_time": "2021-03-11T23:18:57.558177",
     "exception": false,
     "start_time": "2021-03-11T23:18:57.430162",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Combined Probability usage \n",
    "\n",
    "As we want the probability of a combined event, we sum the probabilities of each individual event happening. With this approach, we are checking whether the patient will be sent to the ICU in any given window.  That information can be of great use to the hospital in checking, with the first exam results, if a patient is more likely to need an ICU spot. And when combined allied with the previous models, the patients wigh a higher risk can be monitored and analysed if in the following window the transfer to the ICU will be required."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-11T23:18:57.821600Z",
     "iopub.status.busy": "2021-03-11T23:18:57.820674Z",
     "iopub.status.idle": "2021-03-11T23:18:57.825527Z",
     "shell.execute_reply": "2021-03-11T23:18:57.824905Z"
    },
    "papermill": {
     "duration": 0.139164,
     "end_time": "2021-03-11T23:18:57.825672",
     "exception": false,
     "start_time": "2021-03-11T23:18:57.686508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.35"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# total Notebook run  time\n",
    "\n",
    "notebook_stop = time.time()\n",
    "total_run_time = round(notebook_stop - notebook_start,3)\n",
    "total_run_time_minutes = round(total_run_time/60,2)\n",
    "total_run_time_minutes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 102.641156,
   "end_time": "2021-03-11T23:18:58.662849",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-03-11T23:17:16.021693",
   "version": "2.2.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
